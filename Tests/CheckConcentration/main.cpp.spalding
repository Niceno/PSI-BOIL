#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#define SYM
//#define SETUP_ONLY
//#define STATIC
#define RADIAL
#define ANALYTIC
#define CASE 1
/* case 1 = axisymmetric
        2 = cartesian 2D
        3 = cartesian 3D
*/

/******************************************************************************/
int main(int argc, char ** argv) {

  boil::timer.start();

  if(argc<5){
    boil::oout<<"Four command line arguments required!"<<"\n";
#ifndef ANALYTIC
    boil::oout<<"./Boil wmin gLevel tinf[case] humidity[case]"<<"\n";
    boil::oout<<"Temperatures: 10-40-70-95 [degC]\n";
    boil::oout<<"Humidities: 10-30-50 [%]"<<boil::endl;
#else
    boil::oout<<"./Boil wmin gLevel tinf[C] einf[%]"<<"\n";
#endif
    exit(0);
  }

/******************************************************************************/
/* ------------ input from command line */
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]); /* domain dimensions */
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  const int tcase = atoi(argv[3]);
  boil::oout<<"tcase= "<<tcase<<"\n"; /* 10 40 70 95 */

  const int ecase = atoi(argv[4]);
  boil::oout<<"ecase= "<<ecase<<"\n"; /* 10 30 50 */

/******************************************************************************/
/* ------------ boundary or initial conditions */
  const real Tref  = 273.15+99.97; /* tsat at 1 atm */
  const real radius = 128e-6;

  real Tinf = 273.15;
#ifndef ANALYTIC
  switch(tcase) {
    case 10 : Tinf += real(tcase); break;
    case 40 : Tinf += real(tcase); break;
    case 70 : Tinf += real(tcase); break;
    case 95 : Tinf += real(tcase); break;
    default : 
      boil::oout<<"Invalid Tinf selected. Exiting."<<boil::endl;
      exit(0);
  }
#else
  Tinf += tcase;
#endif

  real epsinf;
#ifndef ANALYTIC
  real epswb, Twb;

  switch (tcase*100+ecase) {
    case 1010 :
      epsinf = 0.9988;
      epswb  = 0.9932;
      Twb    = 274.6133;
      break;

    case 1030 :
      epsinf = 0.9964;
      epswb  = 0.9921;
      Twb    = 276.7108;
      break;

    case 1050 :
      epsinf = 0.9939;
      epswb  = 0.9909;
      Twb    = 278.6863;
      break;

    case 4010 :
      epsinf = 0.9927;
      epswb  = 0.9785;
      Twb    = 291.7161;
      break;

    case 4030 :
      epsinf = 0.9781;
      epswb  = 0.9680;
      Twb    = 298.2436;
      break;

    case 4050 :
      epsinf = 0.9636;
      epswb  = 0.9566;
      Twb    = 303.4553;
      break;

    case 7010 :
      epsinf = 0.9692;
      epswb  = 0.9456;
      Twb    = 307.4614;
      break;

    case 7030 :
      epsinf = 0.9076;
      epswb  = 0.8920;
      Twb    = 320.4203;
      break;
 
    case 7050 :
      epsinf = 0.8460;
      epswb  = 0.8355;
      Twb    = 329.0291;
      break;

    case 9510 :
      epsinf = 0.9165;
      epswb  = 0.8863;
      Twb    = 321.4453;
      break;

    case 9530 :
      epsinf = 0.7495;
      epswb  = 0.7315;
      Twb    = 339.7568;
      break;

    case 9550 :
      epsinf = 0.5824;
      epswb  = 0.5715;
      Twb    = 350.7870;
      break;

    default :
      boil::oout<<"Invalid Tinf-humidity combination selected. Exiting."
                <<boil::endl;
      exit(0);
  }
#else
  epsinf = 0.01*ecase;
#endif


/******************************************************************************/
/* ------------ numerical simulation settings */

#ifndef STATIC
  /* total number of steps */
  const int ndt = 10000*gLevel*3;
#else
  /* total number of steps */
  const int ndt = 10000*gLevel;
#endif

  /* steps per backup */
  const int n_per_backup = ndt/5;

  /* steps per plot */
  const int n_per_plot = ndt/100;

  /* surface tension multiplier */
  const real surftens_dt_coef = 10.;

  /* cfl limit */
  const real cfl_limit = 0.1;
  const real init_dt_coef = 1e-6;

/* ------------ optional simulation settings */

  /* multigrid */
  const bool multigrid_stop_if_diverging = true;
  //const bool multigrid_stop_if_diverging = false;

  const int multigrid_min_cycles = 3;
  const int multigrid_max_cycles = 20;

  /* vof */
  const CurvMethod curv_method = CurvMethod::HF();
  const TopoMethod topo_method = TopoMethod::Hybrid();
  const CurvMethod wall_curv_method = CurvMethod::none();

  const bool use_fs_interp = false;
  const bool store_pressure_extrap = false;
  const int niter_pressure_extrap = 1000;

  /* tifmodel */
  const real ur = 0.05;

/******************************************************************************/
/* ------------ material properties */
  real muv, lambdav;
  real mun, rhon, lambdan;
  real Kpg;
  real diffcoef;

#ifndef ANALYTIC
  /* reference property points are different for the tcases,
     vapour mu, lambda: at saturation pressure corresponding to WBT
     diffcoef: obtained through rescaling from 25 degC     */
  switch(tcase) {
    case 10 :
      muv = 9.3958e-6;
      lambdav = 17.474e-3;
      /* 2 degC, 1 atm */
      mun = 1.7599e-5;
      rhon = 1.2589;
      lambdan = 2.46e-2;
      diffcoef = 2.2828e-5;
      /* for comparison with analytic solution */
      Kpg = 1.0087e3;
      break;
    case 40 : 
      muv = 1.0129e-5;
      lambdav = 0.019168;
      /* ~50 degC, 1 atm */
      mun = 1.8872e-5;
      rhon = 1.1495;
      lambdan = 0.0266;
      diffcoef = 2.6611e-5;
      /* for comparison with analytic solution */
      Kpg = 1.0216e3;
      break;
    case 70 : 
      muv = 0.010964e-3;
      lambdav = 21.264e-3;
      /* ~64 degC, 1 atm */
      mun = 2.0104e-5;
      rhon = 1.0568;
      lambdan = 0.0286;
      diffcoef = 3.0668e-5;
      /* for comparison with analytic solution */
      Kpg = 1.1897e3;
      break;
    case 95 : 
      muv = 0.000011715;
      lambdav = 23.371e-3;
      /* 77 degC, 1 atm */
      mun = 2.1108e-5;
      rhon = 0.9892;
      lambdan = 0.0302;
      diffcoef = 3.4287e-5;
      /* for comparison with analytic solution */
      Kpg = 1.0692e3;
      break;
    default :
      boil::oout<<"Invalid Tinf selected. Exiting."<<boil::endl;
      exit(0);
  }
#else
  muv = 0.010964e-3;
  lambdav = 21.264e-3;
  /* ~64 degC, 1 atm */
  mun = 2.0104e-5;
  rhon = 1.0568;
  lambdan = 0.0286;
  diffcoef = 3.0668e-5;
  Kpg = 1.1897e3;
#endif

  const real mmassv = 18.015e-3; /* water vapour */
  const real mmassn = 28.971e-3; /* dry air */

  const real Rmv = boil::R/mmassv;

  /* IG scaling */
  const real rhov = rhon*mmassv/mmassn;

  const real cpv = rhov*Kpg;
  const real cpn = rhon*Kpg;

  /*
     for simplicity, cst gas properties are assumed at lin mean concentration,
     moreover, linear mixing is used
  */
#ifndef ANALYTIC
  const real epsref = 0.5*(epsinf+epswb);
#else
  const real epsref = epsinf;
#endif

  const real mug  = mun *epsref+muv *(1.-epsref);
  const real rhog = rhon*epsref+rhov*(1.-epsref);
  const real cpg  = cpn *epsref+cpv *(1.-epsref);
  assert(fabs(cpg-rhog*Kpg)<boil::pico); /* test */

  const real lambdag = lambdan*epsref+lambdav*(1.-epsref);

  /* 
     liquid properties should be inconsequential
     -> 50 degC, atmospheric pressure
  */
  const real mul = 0.00033882;
  const real rhol = 969.48;
  const real cpl  = rhol*4.1997e3;
  const real lambdal = 0.67210;
  const real mmassl  = mmassv;

#ifndef STATIC
  const real sig = 71.99e-3;
#else
  const real sig = 0.0;
#endif

  const real latent_cst = 3.146e6;
  const real latent_slp = -2361.0;

#ifndef ANALYTIC
  /* for simplicity, cst latent heat at Twb assumed */
  const real latent = latent_cst + latent_slp*Twb;
#else
  const real latent = latent_cst + latent_slp*Tinf;
#endif

  const real Le = diffcoef*rhog*Kpg/lambdag; /* Lewis number */
  boil::oout<< "Le = " << Le << boil::endl;

#ifdef ANALYTIC
  auto epsfunc = [=](real T) {
    return 1.-exp(latent/Rmv*(1./Tref-1./T));
  };

  auto residual = [=](real T) {
    real E = epsfunc(T);
    return T - Tinf + latent/Kpg*(1.-pow((epsinf-1.)/(E-1.),Le));
  };

  real Tt;
  real T0 = 100.0;
  real T1 = Tref;
  real rest;
  real res0 = residual(T0);
  real res1 = residual(T1);

  if(res0*res1>=0) {
    boil::oout<<"Wrong choice of starting points. Exiting."<<boil::endl;
    exit(0);
  } else {

    real rest;
    while((T1-T0)>=1e-5) {
      Tt = 0.5*(T1+T0);
      rest = residual(Tt);
      if       (rest==0.0) {
        break;
      } else if(rest*res0<0) {
        T1 = Tt;
        res1 = rest;
      } else {
        T0 = Tt;
        res0 = rest;
      }
    }
  }

  boil::oout<<"bisection: "<<Tt<<" "<<epsfunc(Tt)<<" "<<rest<<boil::endl;
  //exit(0);

  const real Twb = Tt;
  const real epswb = epsfunc(Tt);
#endif

  /* infinite boundary conditions */
  const real keps = log(epswb/epsinf)*radius;
  const real ktpr = log( latent / (latent + Kpg * (Twb-Tinf)) )*radius;

  boil::oout<<"Coefficients: "<<keps<<" "<<ktpr<<boil::endl;

  const real Twb_red  = Twb  + latent/Kpg;
  const real Tinf_red = Tinf - Twb_red;

/******************************************************************************/
/* ------------ domain dimensions */
  const int rad_mult = 2;
  const int Nradcells = gLevel * 8;
  const int NX = Nradcells*rad_mult;

  const real LX = rad_mult*radius;
  const real DX = LX/real(NX);

/******************************************************************************/
/* ------------- setup finished */
/******************************************************************************/
/* below this line, NO VALUES AND SETTINGS CAN BE ENTERED! */
/******************************************************************************/

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());
  //boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
#ifndef SYM
  Grid1D gz( Range<real>(-LX,LX), NX, Periodic::no() );
#else
  Grid1D gz( Range<real>(0.0,LX), NX, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
#endif

  /*---------+
  |  domain  |
  +---------*/
#if CASE == 1
  Axisymmetric d(gx, gz, DX);
#elif CASE == 2
  Grid1D gy(DX);
  Domain d(gz,gy,gz);
#else
  Domain d(gz,gz,gz);
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d), uvw_2(d);       // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate

  Scalar eps(d), mdot_eps(d);      /* NG concentration */

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
#if CASE == 1
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#else
  #ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #else
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #endif
#endif
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
#if CASE < 3
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#else 
  #ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #else
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #endif
#endif
    uvw_1(m)=uvw(m).shape();
    uvw_2(m)=uvw(m).shape();
  }

#if CASE == 1
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#else
  #ifdef SYM
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #else
  c.bc().add( BndCnd( Dir::imin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #endif
#endif
#ifdef SYM
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
#if CASE < 3
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#else
  #ifdef SYM
  c.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #else
  c.bc().add( BndCnd( Dir::jmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #endif
#endif

  press=c.shape();
  p=c.shape();
  kappa=c.shape();

  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  g = p.shape();
  mdot_eps = p.shape();

  std::ostringstream streameps, streamtpr;
  streameps << keps;
  streamtpr << ktpr;
  //std::string STR_keps = std::to_string(keps);
  //std::string STR_ktpr = std::to_string(ktpr);
  std::string STR_keps = streameps.str();
  std::string STR_ktpr = streamtpr.str();

  std::string STR_epsinf = std::to_string(epsinf);
  std::string STR_Tinr = std::to_string(Tinf_red);
  std::string STR_Twbr = std::to_string(Twb_red);
  std::string STR_eul  = std::to_string(exp(1.0));

  /* temperature */
  std::string eq = (STR_Tinr+"*"+STR_eul+"^("+STR_ktpr+"/(x*x+y*y+z*z)^0.5)+"+STR_Twbr);
  //std::string eq = (STR_Tinr+"*"+STR_eul+"^("+STR_ktpr+"/(x*x+z*z)^0.5)+"+STR_Twbr);

  boil::oout<<eq<<"\n";
#ifndef RADIAL
  char *eqTpr = new char[eq.length()+1];
  std::strcpy(eqTpr, eq.c_str());
#else 
  real eqTpr = Tinf_red*exp(ktpr/LX)+Twb_red;
  boil::oout<<"tpredge= "<<eqTpr<<boil::endl;
#endif

#if CASE == 1
  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqTpr ) );
#else
  #ifdef SYM
  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqTpr ) );
  #else
  tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), eqTpr ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqTpr ) );
  #endif
#endif
#ifdef SYM
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), eqTpr ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), eqTpr ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), eqTpr ) );
#endif
#if CASE < 3
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) ); 
#else
  #ifdef SYM
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), eqTpr ) );
  #else
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::dirichlet(), eqTpr ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), eqTpr ) );
  #endif
#endif

  /* concentration */
  eq = STR_epsinf+"*"+STR_eul+"^("+STR_keps+"/(x*x+y*y+z*z)^0.5)";

  boil::oout<<eq<<"\n";
#ifndef RADIAL
  char *eqEps = new char[eq.length()+1];
  std::strcpy(eqEps, eq.c_str());
#else 
  real eqEps = epsinf*exp(keps/LX);
  boil::oout<<"epsedge= "<<eqEps<<boil::endl;
#endif

#if CASE == 1
  eps.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  eps.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqEps ) );
#else
  #ifdef SYM
  eps.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  eps.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqEps ) );
  #else
  eps.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), eqEps ) );
  eps.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqEps ) );
  #endif
#endif
#ifdef SYM
  eps.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  eps.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), eqEps ) );
#else
  eps.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), eqEps ) );
  eps.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), eqEps ) );
#endif
#if CASE < 3
  eps.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  eps.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#else
  #ifdef SYM
  eps.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  eps.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), eqEps ) );
  #else
  eps.bc().add( BndCnd( Dir::jmin(), BndType::dirichlet(), eqEps ) );
  eps.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), eqEps ) );
  #endif
#endif

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter gas(d), liquid(d);
  gas.mu       (mug);
  gas.rho      (rhog);
  gas.cp       (cpg);  
  gas.lambda   (lambdag);
  gas.mmass    (mmassv);
  gas.gamma    (diffcoef*rhog);

  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);
  liquid.lambda(lambdal);

  Matter mixed(liquid,gas, &c); /* c = 1 : water */ 
  mixed.sigma(sig);
  mixed.latent(latent);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
#ifndef STATIC
  const real dt = surftens_dt_coef*pow(gas.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
#else
  const real dt = 100*DX;
#endif

  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  boil::oout<<"main:nparams= "<<n_per_plot<<" "<<n_per_backup<<"\n";
  Times time(ndt, dt);
  time.set_coef_dec(0.75);
  time.set_dt(dt*init_dt_coef);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solverCGdi = new CG(d, Prec::di());
  Krylov * solverBICG = new BiCGS(d, Prec::di());

  Krylov * solver = solverCGic;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.diffusion_set (TimeScheme::backward_euler());
  ns.convection_set(TimeScheme::forward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
#if CASE > 1
  VOF conc(c, g, kappa, uvw_1, time, solver);
#else
  VOFaxisym conc(c, g, kappa, uvw_1, time, solver);
#endif
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_wall_curv_method(wall_curv_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  /* enthalpy equation */
#ifdef STANDARD
  TIF tsat(Tref);
#else
  Clapeyron tsat(Tref,conc.topo.adens,eps,mmassv,latent);
  tsat.set_ur(ur);
#endif
#if CASE > 1
  EnthalpyFD enthFD      (tpr, q, uvw, time, solver  , &mixed,
                          conc.topo, tsat);
#else
  EnthalpyFDaxisym enthFD(tpr, q, uvw, time, solver  , &mixed,
                          conc.topo, tsat);
#endif

  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set (TimeScheme::backward_euler());

  /* phase change */
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed);

  ConcentrationTP ngtransp(eps,mdot_eps,uvw,
                           c,conc.flow(),conc.heaviside(),&(conc.topo),
                           time, solverCGdi, &gas);

  /*---------------------------------------------------------------+
  |                     start computation                          |
  +----------------------------------------------------------------*/

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      boil::oout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    press.load("press",ts);
    c. load("c",ts);
    tpr.  load("tpr",ts);
#ifndef STANDARD
    (tsat.tif).load("tif",ts);
#endif
    eps.  load("eps",ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);

    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
    for_vijk(c,i,j,k) 
      c[i][j][k] = 0.0;

    const real xcent=0.0;
    const real ycent=0.0;
    const real zcent=0.0;

#if CASE < 3
    boil::setup_circle_xz(conc.color(), radius, xcent, zcent);
#else
    boil::setup_sphere(conc.color(), radius, xcent, ycent, zcent);
#endif
    conc.color().bnd_update();
    conc.color().exchange_all();
#if CASE == 1
    conc.color_to_vf(conc.color(),c);
#endif

    c.bnd_update();
    c.exchange_all();
    conc.init();
    conc.totalvol();

    for_vijk(c,i,j,k) {
      if(conc.color()[i][j][k]>0.5) {
        tpr[i][j][k] = Twb;
        eps[i][j][k] = epswb;
      } else {
        real dist = pow(c.xc(i)-xcent,2.0)
#if CASE == 3
                   +pow(c.yc(j)-ycent,2.0)
#endif
                   +pow(c.zc(k)-zcent,2.0);
        
        dist = sqrt(dist);

        tpr[i][j][k] = Twb_red + Tinf_red*exp(ktpr/dist);
        eps[i][j][k] = epsinf*exp(keps/dist);

        //boil::oout<<dist<<" "<<tpr[i][j][k]<<" "<<eps[i][j][k]<<boil::endl;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();
    eps.bnd_update();
    eps.exchange_all();


#if 0
    boil::oout<<c.ei()+1<<" "<<c.sk()<<" "<<tpr[c.ei()][boil::BW][c.sk()]<<" "<<tpr[c.ei()+1][boil::BW][c.sk()];
    boil::oout<<" "<<eps[c.ei()][boil::BW][c.sk()]<<" "<<eps[c.ei()+1][boil::BW][c.sk()];

    real dist = sqrt(pow(c.xc(c.ei())-xcent,2.0)+pow(c.zc(c.sk())-zcent,2.0));
    boil::oout<<" | "<<Twb_red + Tinf_red*exp(ktpr/dist);
    dist = sqrt(pow(c.xc(c.ei()+1)-xcent,2.0)+pow(c.zc(c.sk())-zcent,2.0));
    boil::oout<<" "<<Twb_red + Tinf_red*exp(ktpr/dist);
    boil::oout<<boil::endl;
#endif

    tsat.init();

#ifdef STANDARD
    boil::plot->plot(uvw,c,tpr,eps,mdot,
                     "uvw-c-tpr-eps-mdot",0);
#else
    boil::plot->plot(uvw,c,tpr,eps,mdot,tsat.tif,
                     "uvw-c-tpr-eps-mdot-tif",0);
#endif
  }
  input.close();

  /* set iint */
  int iint, testint(1);
  if(time.current_time()<time.dt()) {
      iint = 0;
  } else {
    iint = time.current_step() / n_per_plot;
  }

  boil::oout<<"iint= "<<iint<<"\n";

  /*------------+
  |  time loop  |
  +------------*/
#ifndef SETUP_ONLY
  for(time.start(); time.end(); time.increase()) {

#ifndef STATIC
  #ifndef RADIAL
     update boundary conditions
  #endif
#endif

#ifdef RADIAL
    real xcent, ycent, zcent;
    xcent = ycent = zcent = 0.;
    for_vijk(c,i,j,k) {
      real dist = pow(c.xc(i)-xcent,2.0)
  #if CASE == 3
                 +pow(c.yc(j)-ycent,2.0)
  #endif
                 +pow(c.zc(k)-zcent,2.0);

        dist = sqrt(dist);
      if(dist>=LX) {
        tpr[i][j][k] = eqTpr;
        eps[i][j][k] = eqEps;

        //boil::oout<<dist<<" "<<tpr[i][j][k]<<" "<<eps[i][j][k]<<boil::endl;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();
    eps.bnd_update();
    eps.exchange_all();
#endif

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    //enthFD.tint_field(); /* called in discretize */
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"Enthalpy");

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);

    /* reset body force */
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

#ifndef STATIC
    /* surface tension */
    conc.tension(&xyz, mixed,conc.color());
#endif

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    p = 0.0;
    if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        if(pmin>press[i][j][k]) pmin=press[i][j][k];
      }
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        press[i][j][k] -= pmin;
      } else {
        press[i][j][k] = 0.0;
      }
    }
    press.bnd_update();
    press.exchange_all();

    ns.cfl_max();

#ifndef STATIC
    /*-----------------------+
    |  solve color equation  |
    +-----------------------*/
    conc.advance_with_extrapolation(true,ResRat(1e-9),uvw,f,
                                    &liquid,&uvw_1);
#endif

    /*-------------------------+
    |  solve species equation  |
    +-------------------------*/
    ngtransp.discretize();
    ngtransp.new_time_step();
    ngtransp.solve(ResRat(1e-14),"Concentration");
    ngtransp.extrapolate();
    eps.bnd_update();
    eps.exchange_all();

    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();

    /* front */
    conc.front_minmax();

    time.control_dt(ns.cfl_max(),cfl_limit,dt);

    /*--------------+
    |  output data  |
    +--------------*/    
    real tgamma(0.), tgamma2(0.);
    real egamma(0.), egamma2(0.);
    real mgamma(0.), mgamma2(0.);
    real weight(0.);
    for_vijk(c,i,j,k) {
      if((*conc.topo.adens)[i][j][k]>boil::atto) {
         real t1 = tsat.Tint(i,j,k);
         real t2 = t1*t1;
         
         real e1 = eps[i][j][k];
         real e2 = e1*e1;
         
         real m1 = mflx[i][j][k];
         real m2 = m1*m1;
 
         real wt = (*conc.topo.adens)[i][j][k]*c.dV(i,j,k);

         tgamma  += t1*wt;        
         tgamma2 += t2*wt;        
         egamma  += e1*wt;        
         egamma2 += e2*wt;        
         mgamma  += m1*wt;        
         mgamma2 += m2*wt;        

         weight += wt;

         //boil::oout<<i<<" "<<k<<" "<<(*conc.topo.adens)[i][j][k]<<" "<<t1<<" "<<e1<<boil::endl;
      }
    }

    boil::cart.sum_real(&tgamma );
    boil::cart.sum_real(&tgamma2);
    boil::cart.sum_real(&egamma );
    boil::cart.sum_real(&egamma2);
    boil::cart.sum_real(&mgamma );
    boil::cart.sum_real(&mgamma2);
    boil::cart.sum_real(&weight );

    tgamma  /= weight;
    tgamma2 /= weight;
    egamma  /= weight;
    egamma2 /= weight;
    mgamma  /= weight;
    mgamma2 /= weight;

#ifndef STATIC
    real rad = conc.totalvol();
  #if CASE == 3
    #ifdef SYM
    rad *= 8.;
    #endif
  #elif CASE == 2
    boil::oout<<"Unsuported combination. Exiting."<<boil::endl;
    exit(0);
  #elif CASE == 1
    rad *= 2.*boil::pi;
    #ifdef SYM
    rad *= 2.;
    #endif
  #endif
    rad = pow(0.75*rad/boil::pi,1./3.);
#else
    conc.totalvol();
    real rad = radius;
#endif

    real tstd = sqrt(std::max(0.0,tgamma2-tgamma*tgamma));
    real estd = sqrt(std::max(0.0,egamma2-egamma*egamma));
    real mstd = sqrt(std::max(0.0,mgamma2-mgamma*mgamma));

    real Sh1 = mgamma*rad*2./(diffcoef*rhog*log(epsinf/egamma)); 
#ifndef RADIAL
    real Sh2 = Sh1;
#else
    real Sh2 = mgamma*rad*2./(diffcoef*rhog*log(eqEps/egamma))
             * (1.-rad/LX); 
#endif

    boil::oout<<"interface: "<<time.current_time()<<" "
              <<tgamma<<" "<<tstd<<" "
              <<egamma<<" "<<estd<<" "
              <<mgamma<<" "<<mstd<<" "
              <<weight<<" "<<Sh1<<" "<<Sh2
              <<boil::endl;

    if(time.current_step() % n_per_plot == 0 || time.current_step()==1 ) {
      iint++;
#ifdef STANDARD
      boil::plot->plot(uvw,c,tpr,eps,mdot,
                       "uvw-c-tpr-eps-mdot",iint);
#else
      boil::plot->plot(uvw,c,tpr,eps,mdot,tsat.tif,
                       "uvw-c-tpr-eps-mdot-tif",iint);
#endif
    }

#if 0
    if((time.current_step()==testint) ) {
  #ifdef STANDARD
      boil::plot->plot(uvw,c,tpr,eps,mdot,
                       "uvw-c-tpr-eps-mdot",time.current_step());
  #else
      boil::plot->plot(uvw,c,tpr,eps,mdot,tsat.tif,
                       "uvw-c-tpr-eps-mdot-tif",time.current_step());
  #endif
      testint++;
      if (testint == 5) exit(0);
    }
#endif
    /*--------------+
    |  backup data  |
    +--------------*/
    if(time.current_step() % n_per_backup == 0) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c    .save("c"   ,  time.current_step());
      tpr  .save("tpr" ,  time.current_step());
#ifndef STANDARD
      (tsat.tif).save("tif",time.current_step());
#endif
      eps  .save("eps",      time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c .save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
#ifndef STANDARD
      (tsat.tif).save("tpr",   time.current_step());
#endif
      eps       .save("eps",   time.current_step());
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      c .rm("c", ts);
      tpr  .rm("tpr", ts);
#ifndef STANDARD
      (tsat.tif).rm("tif",ts);
#endif
      eps  .rm("eps", ts);
      exit(0);
    }
  }
#endif

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();
}

