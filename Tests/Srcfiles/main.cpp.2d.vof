#include "Include/psi-boil.h"
#include "update_step.cpp"
#include "disjoint_pressure.cpp"

#define STRETCH
//#define STANDARD
//#define ADIABATIC
//#define SMALL

const int level=2;

const int  ndt = 2*6000;//3000*level;

#ifdef STRETCH
const int NZ = 50*level;
const int NY = 2;
const int AR = 4;

const real mult = 1.2;
real DZi  = 3e-9/real(level);

int NZst  = 15; /* from aspect ratio */
int NZun  = NZ - NZst;
real DZf  = DZi * pow(mult,real(NZst-1));

real LZst = DZi * (1.0-pow(mult,real(NZst)))/(1.0-mult);
real LZun = DZf * real(NZun);
real LZ   = LZst + LZun;

real LX = LZ;
real DX_frac = DZi*real(AR);
int  NX = trunc(LX/DX_frac);
real DX = LX/real(NX);

real DZu = sqrt(DZi*DZf);

real LY = real(AR)*DZi*real(NY);
real LZu = real(NZ)*DZu;
#else
real LX = 1.74505e-6; /* from stretched */
real DX_frac = 20e-9/real(level);
#ifndef SMALL
int  NX = trunc(LX/DX_frac);
#else
int  NX = 4*level;
#endif
real DX = LX/real(NX);

//#ifdef SMALL
//real DZu = DX/4.;
//const int NZ = 4.*NX;
//#else
real DZu = DX;
const int NZ = NX;
//#endif
real DZf = DZu;

const int NY = 2;

real LZ = LX;
real LY = DZu*real(NY);
#endif

const real Tout=101.0+273.15;
const real Tsat=100.0+273.15;

/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc==1){
    boil::oout<<"One command line argument is required!"<<"\n";
    boil::oout<<"./Boil wmin (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef STRETCH
  Grid1D gz_st(Range<real>( 0.0, LZst ),
               Range<real>( DZi, DZf  ),
               NZst, Periodic::no());
  Grid1D gz_un(Range<real>( 0.0, LZun ),
               NZun, Periodic::no());

  Grid1D gz(gz_st, gz_un, Periodic::no());
  Grid1D gx( Range<real>( 0.0,LX), NX, Periodic::no() );
  Grid1D gy( Range<real>( 0.0,LY), NY, Periodic::yes() );
#else
  DZf = DZu;
  Grid1D gz( Range<real>( 0.0,LZ), NZ, Periodic::no() );
  Grid1D gx( Range<real>( 0.0,LX), NX, Periodic::no() );
  Grid1D gy( Range<real>( 0.0,LY) , NY, Periodic::yes() );
#endif

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  int iref = d.local_i(1);
  int jref = d.local_j(1);
  int kref = d.local_k(1);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d);
  Scalar mdot(d);        // phase-change

  Scalar mflx(d);
  Vector bndclr(d), bndclrold(d);
  Scalar pcc(d);
  Scalar tprold(d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );

    bndclr(m)    = uvw(m).shape();
    bndclrold(m) = uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::neumann() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  q = p.shape();
  mflx = p.shape();

  c.bc().add( BndCnd( Dir::imin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  g = c.shape();
  cold = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), Tout ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), Tsat ) );
  OPR( Tout );

  pcc   = p.shape();
  tprold = tpr.shape();

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
  vapor  .cp    (2030*0.597);
#ifdef ADIABATIC
  vapor  .lambda(0.0);
#else
  vapor  .lambda(0.025);
#endif
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);
  const real latent=2258.0*1e3;

  const real Mv = 18.015e-3;
  const real pi = atan(1.0) * 4.0;
  const real R  = 8.3144621;
  const real resist = pow(Tsat,1.5)/2.0/vapor.rho()->value()/latent/sqrt(Mv/(2.0*pi*R));

  const real hamaker = 5.0e-20;
  const real pc0 = (Tout/Tsat-1.0)*latent*liquid.rho()->value();
  const real delta0 = pow(hamaker/pc0,1.0/3.0);
  OPR(delta0);

  Matter mixed(liquid, vapor,& c, & bndclr); //c=1: full of liquid, c=0: full of vapor
  mixed.sigma(2.3610e-2);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  nint = ndt/5;
  const int  bint = ndt/1;
#ifndef SMALL
  const real dt  = 1.0e-10/real(level);
#else
  const real dt  = 1.0e-8/real(level);
#endif
  const real dxmin = d.dxyz_min();
  const real cfl_limit = 0.2;
  Times time(ndt, dt);
  time.print_time(false);
  time.set_coef_dec(0.2);

  OPR(  NX );
  OPR(  dt );
  OPR( ndt );

  for_vijk(c,i,j,k) 
    c[i][j][k] = 0.0;

#if 1
  const real radius = LX;
  const real xcent = 0.;
  const real zcent = LZ;
  int Realsum(0);

  for_vijk(c,i,j,k) {
    real wsb_x = c.xc(i) - c.dxc(i)*0.5;
    real wst_x = c.xc(i) - c.dxc(i)*0.5;
    real wnb_x = c.xc(i) - c.dxc(i)*0.5;
    real wnt_x = c.xc(i) - c.dxc(i)*0.5;
    real esb_x = c.xc(i) + c.dxc(i)*0.5;
    real est_x = c.xc(i) + c.dxc(i)*0.5;
    real enb_x = c.xc(i) + c.dxc(i)*0.5;
    real ent_x = c.xc(i) + c.dxc(i)*0.5;

    real wsb_z = c.zc(k) - c.dzc(k)*0.5;
    real wst_z = c.zc(k) - c.dzc(k)*0.5;
    real wnb_z = c.zc(k) + c.dzc(k)*0.5;
    real wnt_z = c.zc(k) + c.dzc(k)*0.5;
    real esb_z = c.zc(k) - c.dzc(k)*0.5;
    real est_z = c.zc(k) - c.dzc(k)*0.5;
    real enb_z = c.zc(k) + c.dzc(k)*0.5;
    real ent_z = c.zc(k) + c.dzc(k)*0.5;

    real wsb_dist = sqrt(pow(wsb_x-xcent,2.0)+pow(wsb_z-zcent,2.0));
    real wst_dist = sqrt(pow(wst_x-xcent,2.0)+pow(wst_z-zcent,2.0));
    real wnb_dist = sqrt(pow(wnb_x-xcent,2.0)+pow(wnb_z-zcent,2.0));
    real wnt_dist = sqrt(pow(wnt_x-xcent,2.0)+pow(wnt_z-zcent,2.0));
    real esb_dist = sqrt(pow(esb_x-xcent,2.0)+pow(esb_z-zcent,2.0));
    real est_dist = sqrt(pow(est_x-xcent,2.0)+pow(est_z-zcent,2.0));
    real enb_dist = sqrt(pow(enb_x-xcent,2.0)+pow(enb_z-zcent,2.0));
    real ent_dist = sqrt(pow(ent_x-xcent,2.0)+pow(ent_z-zcent,2.0));

    if(wsb_dist<radius&&wst_dist<radius&&wnb_dist<radius&&wnt_dist<radius&&
       esb_dist<radius&&est_dist<radius&&enb_dist<radius&&ent_dist<radius) {
       c[i][j][k] = 1.0;
    } else if(wsb_dist<=radius||wst_dist<=radius||wnb_dist<=radius||wnt_dist<=radius||
              esb_dist<=radius||est_dist<=radius||enb_dist<=radius||ent_dist<=radius) {
       Realsum++;
       int mm=20;
       real x0=d.xn(i);
       real z0=d.zn(k);
       real ddx=d.dxc(i)/real(mm);
       real ddz=d.dzc(k)/real(mm);
       int itmp=0;
       for (int ii=0; ii<mm; ii++){
         for (int jj=0; jj<mm; jj++){
           for (int kk=0; kk<mm; kk++){
             real xxc=x0+0.5*ddx+real(ii)*ddx;
             real zzc=z0+0.5*ddz+real(kk)*ddz;
             real dist=sqrt(pow(xxc-xcent,2.0)
                           +pow(zzc-zcent,2.0));
             if (dist<radius){
               itmp=itmp+1;
             }
           }
         }
       }
       c[i][j][k]=real(itmp)/real(mm*mm*mm);
    }
  }

  for_vijk(c,i,j,k) {
    c[i][j][k] = 1.0 - c[i][j][k];
#ifndef STRETCH
    if(c.zc(k)<c.dzc(k)&&c[i][j][k]<delta0/c.dzc(k)) {
      c[i][j][k]=delta0/c.dzc(k);
    }
#else
    if(c.zc(k-1)<c.dzc(k-1)&&c[i][j][k]<(delta0-c.dzc(k-1))/c.dzc(k)) {
      c[i][j][k  ]=(delta0-c.dzc(k-1))/c.dzc(k);
      c[i][j][k-1]=1.0;
    }
#endif
  }

  c.bnd_update();
  c.exchange_all();
#else
  for_vijk(c,i,j,k) {
    real pos = LZ - sqrt(LX*LX-c.xc(i)*c.xc(i));
    if(c.zc(k)<pos) {
      c[i][j][k]=1.0;
    } else if(c.zc(k)<(pos+c.dzb(k))) {
      c[i][j][k]=1.0-(c.zc(k)-pos)/c.dzb(k);
    } else {
      c[i][j][k]=0.0;
    }
  }
  c.exchange_all();
#endif

  for_avijk(tpr,i,j,k){
    tpr[i][j][k] = Tsat;
  }

  pcc   = 0.0;

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.diffusion_set (TimeScheme::backward_euler());
  ns.convection_set(ConvScheme::upwind());

  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  //multigrid.stop_if_diverging(false);
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(3);

  VOF conc  (c,  g, kappa, uvw, time, solver, &bndclr, &mixed);
  conc.curvature();

  real Simarea(0.);
  int Simcount(0);
  for_vijk(conc.adens,i,j,k) {
    Simarea += (conc.adens)[i][j][k]*c.dV(i,j,k);
    if((conc.adens)[i][j][k]>boil::atto)
      Simcount++;
  }

#if 0
  /* verification */
  real Realarea = 2.*acos(-1.0)*radius*LY/4.;
  boil::oout<<"Verif: "<<Realarea<<" "<<Realsum;
  boil::oout<<" | "<<Simarea<<" "<<Simcount;
  boil::oout<<" | "<<Simarea/Realarea-1.<<" "<<real(Simcount)/real(Realsum)-1.<<boil::endl;
  exit(0);
#endif

#ifndef STANDARD
  TIF tsat(Tsat, latent, resist, &mixed, conc.adens, mflx, &pcc);
  tsat.set_weak_limiting(Tsat, Tout);
  //tsat.set_strong_limiting(&tpr,&c,0.5);
#else
  TIF tsat(Tsat); 
#endif

  EnthalpyTIF enthFD(tpr, q, c, uvw, time, solver, &mixed, tsat, 
                     NULL, &(conc.fs), &(conc.adens));
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc,
                    tsat, time, &mixed, latent);

#ifndef STANDARD
  boil::plot->plot(uvw,c,tpr,mdot,tsat.tif,"uvw-c-tpr-mdot-tif",0);
#else
  boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",0);
#endif

#if 1
  std::ofstream fout;
  fout.open("pc.txt");
  real distt = 0.0;
  while(distt<LX) {
    real hflow(0.0);
    real width(0.0);
    real volum(0.0);
    for_vijk(mdot,i,j,k) {
      if((mdot).xc(i)<distt+DX && (mdot).xc(i) > distt) {
        width += mdot.dzc(k) * c[i][j][k];
        if(fabs((mdot)[i][j][k]) > boil::atto) {
          hflow += (mdot)[i][j][k]*latent*(mdot).dV(i,j,k);
          volum += (mdot).dV(i,j,k);
        }
      }
    }
    boil::cart.sum_real(&hflow);
    boil::cart.sum_real(&volum);
    boil::cart.sum_real(&width);

    fout << distt+0.5*DX<<" "<<width/delta0<<" "<<hflow/(LY*DX)<<"\n";
    distt += DX;
  }
  fout.close();
#endif 
  /*---------------------------------------------------------------+
  |                     start computation                          |
  +----------------------------------------------------------------*/
  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    press.load("press",ts);
    c.load("conc",ts);
    tpr.  load("tpr",ts);
#ifndef STANDARD
    (tsat.tif).load("tif",ts);
#endif
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);

  } else {

    boil::oout << "######################" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "######################" << boil::endl;

#ifndef STANDARD
    boil::plot->plot(uvw,c,tpr,mdot,tsat.tif,"uvw-c-tpr-mdot-tif",0);
#else
    boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",0);
#endif
  }
  input.close();

  /*-------------------+
  |  reset body force  |
  +-------------------*/
  for_m(m)
    for_avmijk(xyz,m,i,j,k)
      xyz[m][i][j][k] = 0.0;

  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    boil::oout << "##################" << boil::endl;
    boil::oout << "# TIME:      " << time.current_time() << boil::endl;
    boil::oout << "# TIME STEP: " << time.current_step() << boil::endl;
    boil::oout << "# WTIME:     " << boil::timer.current_min() << boil::endl;
    boil::oout << "##################" << boil::endl;

    /*---------------------------------------+
    |  solve energy equation + phase change  |
    +---------------------------------------*/
    calculate_disjoint_pressure_z(pcc, c, conc.adens, conc.fs,
                                  hamaker, delta0);

    //pc.set_upwind_flag(true);
    tsat.set_ur(0.01);
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"Enthalpy");
    pc.initialize();
    pc.cal_massflux();

#if 0
    //tsat.set_ur(0.05);
    tsat.set_ur(0.3);
    enthFD.update_ftif(1.0,0.0);
    //enthFD.update_ftif(0.5,0.5);
    enthFD.solve(ResRat(1e-16),"T-correction");
    pc.cal_massflux();
#elif 0
    for_avijk(tpr,i,j,k) tprold[i][j][k] = tpr[i][j][k];

    tsat.set_ur(0.1);
    real resT(1.0);
    int ctr(0);
    //while(resT>1e-3 && ctr<10) {
    while(ctr<5) {
      //enthFD.update_ftif(0.5,0.5);
      enthFD.update_ftif(1.0,0.0);
      enthFD.solve(ResRat(1e-16),"T-correction");
      resT = 0.0;
      for_avijk(tpr,i,j,k) {
        real del = tprold[i][j][k]-tpr[i][j][k];
        if((fabs(del)/tpr[i][j][k])>resT) {
          resT = fabs(del)/tpr[i][j][k];
        }
      }
      pc.cal_massflux();
      boil::cart.max_real(&resT);
      ctr++;
      boil::oout << "dTresidual: "<<time.current_time() << " "<< ctr<< " "<< resT << boil::endl;
    }
#endif
    pc.finalize();
   
#if 0
    for_avi(c,i) {
      for_avjk(c,j,k) {
        mdot[i][j][k] = mdot[i][2][2];
        mflx[i][j][k] = mflx[i][2][2];
      }
    }
    mdot.bnd_update();
    mdot.exchange_all();
    mflx.bnd_update();
    mflx.exchange_all();
#endif
#if 1
    ns.vol_phase_change(&f);

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
	xyz[m][i][j][k]=0.0;

    ns.grad(press);
    ns.solve(ResRat(1e-14));
#if 0
    for_m(m) {
      for_avmi(uvw,m,i) {
        for_avmjk(uvw,m,j,k) {
          uvw[m][i][j][k] = uvw[m][i][2][2];
        }
      }
    }
#endif
    p = 0.0;
    if (multigrid.vcycle(ResRat(1e-5))) OMS(converged);
#if 1
    p.exchange();
#else
    for_avi(p,i) {
      for_avjk(p,j,k) {
        p[i][j][k] = p[i][2][2];
      }
    }
    p.bnd_update();
    p.exchange_all();
#endif
    ns.project(p);
    press += p;
    press.exchange();
#endif

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
#if 0 
    cold=c;
    //if(time.current_step()<5) conc.advance();
    for_avi(c,i) {
      for_avjk(c,j,k) {
        c[i][j][k] = c[i][2][2];
      }
    }
    c.bnd_update();
    c.exchange_all();
#endif
    conc.curvature();
    conc.totalvol();

    pc.modify_vel(uvw,bndclr,bndclrold);

    /*-------------+
    |  dt control  |
    +-------------*/
    real cflmax = ns.cfl_max();
    time.control_dt(cflmax, cfl_limit, dt);

#if 0
    if(time.current_step() % 1000==0) {
      std::ofstream fout;
      fout.open("pc.txt");
      real distt = 0.0;
      while(distt<LX) {
        real hflow(0.0);
        real width(0.0);
        real volum(0.0);
        real tintv(0.0);
        int  ctr(0);
        for_vijk(mdot,i,j,k) {
          if((mdot).xc(i)<distt+DX && (mdot).xc(i) > distt) {
            width += mdot.dzc(k) * c[i][j][k];
            if(fabs((mdot)[i][j][k]) > boil::atto) {
              hflow += (mdot)[i][j][k]*latent*(mdot).dV(i,j,k);
              volum += (mdot).dV(i,j,k);
              tintv += (tsat.tif)[i][j][k]*(mdot).dV(i,j,k);
              ctr++;
            }
          }
        }
        boil::cart.sum_real(&hflow);
        boil::cart.sum_real(&volum);
        boil::cart.sum_real(&width);
        boil::cart.sum_real(&tintv);
        boil::cart.sum_int(&ctr);
        if(volum>0.0) tintv /= volum;

        fout << distt+0.5*DX<<" "<<width<<" "<<hflow/(LY*DX)<<" "<<tintv<<" "<<ctr<<"\n";
        distt += DX;
      }
      fout.close();
    }
#endif
#if 0
    if (time.dt()<1.0e-11) {
      boil::oout<<"Too small dt: "<<dt<<"\n";
      exit(0);
    }
#endif

    if(time.current_step() % (nint)==0 ||time.current_step()==1) {
#ifndef STANDARD
      boil::plot->plot(uvw,c,tpr,mdot,tsat.tif,"uvw-c-tpr-mdot-tif",time.current_step());
#else
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
#endif
    }

#if 0
    if((time.current_step()==testint) ) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
      testint++;
      if (testint == 5) exit(0);
    }
#endif
#if 1
    /*--------------+
    |  backup data  |
    +--------------*/
    if(((time.current_step()) % (bint)==0) ) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("conc",  time.current_step());
      tpr  .save("tpr",   time.current_step());
  #ifndef STANDARD
      (tsat.tif).save("tif",   time.current_step());
  #endif
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c .save("conc",  time.current_step());
      tpr  .save("tpr",   time.current_step());
  #ifndef STANDARD
      (tsat.tif).save("tif",   time.current_step());
  #endif
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      c .rm("conc", ts);
      tpr  .rm("tpr", ts);
  #ifndef STANDARD
      (tsat.tif).rm("tif",ts);
  #endif
#endif 
#if 1
  std::ofstream fout;
  fout.open("pc.txt");
  real distt = DX;
  real inthflow(0.0);
  while(distt<LX+DX/2.) {
    real hflow(0.0);
    real width(0.0);
    real volum(0.0);
    real tintv(0.0);
    real area(0.0);
    int  ctr(0);
    for_vijk(mdot,i,j,k) {
      if((mdot).xc(i)<distt && (mdot).xc(i) > distt-DX) {
        width += mdot.dzc(k) * c[i][j][k];
        area += (conc.adens)[i][j][k] * (mdot).dV(i,j,k);
        if(fabs((mdot)[i][j][k]) > boil::atto) {
          hflow += (mdot)[i][j][k]*latent*(mdot).dV(i,j,k);
          volum += (mdot).dV(i,j,k);
          tintv += (tsat.tif)[i][j][k]*(mdot).dV(i,j,k);
          ctr++;
        }
      }
    }
    boil::cart.sum_real(&hflow);
    boil::cart.sum_real(&volum);
    boil::cart.sum_real(&width);
    boil::cart.sum_real(&tintv);
    boil::cart.sum_real(&area);
    boil::cart.sum_int(&ctr);
    if(volum>0.0) tintv /= volum;
    inthflow += hflow;

    fout << distt-0.5*DX<<" "<<width/real(NY)<<" "<<hflow/(LY*DX)<<" "<<area<<" "<<tintv-Tsat<<" "<<ctr/2<<"\n";
    distt += DX;
  }
  fout.close();
  boil::oout << "IntegralHF: "<<inthflow/LY<<boil::endl;
#endif 
      exit(0);
    }
  }


  boil::timer.stop();
  boil::timer.report();

}	
/*-----------------------------------------------------------------------------+
 '$Id: main-JCP-phaseChange-stefan.cpp,v 1.3 2018/04/30 08:45:18 sato Exp $'/
+-----------------------------------------------------------------------------*/
