#include "Include/psi-boil.h"
#include "setup_circle.cpp"
#include <fstream>
//#define USE_VOF
//#define AVEJ
//#define SYM
//#define USE_PC /* use old pc */
//#define USE_ENTH /* use old enth */

/* computed parameters */
const int gLevel = 4;  //grid level=2,4,8
#ifdef SYM
const int NX = 24*gLevel;
#else
const int NX = 48*gLevel;
#endif
const int NY = NX;
#ifdef USE_VOF
const int NZ = 1;
#else
const int NZ = 3;
#endif

/* domain dimensions (given by problem) */
const real LX = 187.5e-6;
const real DX = LX/real(NX);
const real radius=50.0e-6;

const real tsat0=373.15;
const real tout=tsat0+5.;
const real dtsatdp=3.0/4.0;
const real pi=acos(-1.0);

const real LY =   LX;
#ifdef SYM
const real LZ =   0.5*LX/real(NX)*real(NZ);
#else
const real LZ =   LX/real(NX)*real(NZ);
#endif

#ifdef USE_VOF
const int mSimple = 4;
const int Nsmooth = 0;
#else
const int mSimple = 1;
#endif

/******************************************************************************/
main(int argc, char ** argv) {

  boil::timer.start();

  if(argc==1){
    boil::oout<<"An argument is required!"<<"\n";
    boil::oout<<"./Boil wmin (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(),Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef SYM
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
  Grid1D gy( Range<real>(0.0,LY), NY, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#else
  Grid1D gx( Range<real>(-LX,LX), NX, Periodic::no() );
  Grid1D gy( Range<real>(-LY,LY), NY, Periodic::no() );
#endif
#ifdef USE_VOF
  Grid1D gz(2.*LZ/real(NZ));
#else
  Grid1D gz( Range<real>(-LZ,LZ), NZ, Periodic::yes() );
#endif
  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d), uvw_liq(d), uvw2(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);

  Scalar tpr(d), q  (d); // temperature
  Scalar mdot(d);        // phase-change
  Scalar mflx(d); // pc

  Scalar sc(d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
#endif
#ifdef USE_VOF
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#endif

    uvw_old(m)=uvw(m).shape();
    uvw_liq(m)=uvw(m).shape();
    uvw2(m)=uvw(m).shape();
  }

#ifdef SYM
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::imin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
#endif
#ifdef USE_VOF
  c.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#endif

  press.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  press.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  press.bc().add( BndCnd( Dir::jmin(), BndType::neumann() ) );
  press.bc().add( BndCnd( Dir::jmax(), BndType::neumann() ) );
#ifdef USE_VOF
  press.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  press.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
#else
  press.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  press.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#endif

  p=press.shape();
  kappa=c.shape();
  cold=c.shape();
  sc = c.shape();

  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  g = c.shape();

#ifdef SYM
  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), tout ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), tout ) );
#else
  tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), tout ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), tout ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::dirichlet(), tout ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), tout ) );
#endif
#ifdef USE_VOF
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#endif

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
  vapor  .cp    (2030*0.597);
  vapor  .lambda(0.025);
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);
  const real latent=2258.0*1e3;
#ifndef USE_VOF
  Matter mixed(liquid, vapor, & c);
#else
  Matter mixed(liquid, vapor, & sc);
  //Matter mixed(vapor, liquid, & sc);
#endif
  mixed.sigma(5.9e-2);
  boil::oout<<"physical properties\n";

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(vapor.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  //const real tend = 0.003;
  const real tend = 0.0009/2.;
  const int ndt = tend/dt;
  const int nint = ndt/5;
  const real tint = tend/25.;
  Times time(ndt, dt); 
	
#if 1
  boil::oout<<"si= "<<c.si()<<" ei= "<<c.ei()<<"\n";
  boil::oout<<"sj= "<<c.sj()<<" ei= "<<c.ej()<<"\n";
  boil::oout<<"sk= "<<c.sk()<<" ei= "<<c.ek()<<"\n";
#endif

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  multigrid.min_cycles(4);  // 4
  multigrid.max_cycles(8); // 8
  multigrid.stop_if_diverging(true);

  Momentum ns2( uvw2, xyz, time, solver, &mixed);
  Pressure pr2(p, f, uvw2, time, solver, &mixed);

  AC multigrid2( &pr2 );
  multigrid2.min_cycles(4);  // 4
  multigrid2.max_cycles(8); // 8
  multigrid2.stop_if_diverging(true);

#ifdef USE_VOF
  VOF conc  (c, g, kappa, uvw_liq, time, solver);
  //VOF conc  (c,  g, kappa, uvw, time, solver, NULL, &mixed);
  conc.set_curv_method(0);  // height function
  //conc.set_curv_method(1);  // smoothed VOF
  if(Nsmooth>0)
    conc.smooth(c,sc,Nsmooth);
  else
    for_avijk(c,i,j,k)
      sc[i][j][k] = c[i][j][k];
#else
  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
  conc.set_itsharpen(8);
  conc.set_globalSharpen();
#endif
  conc.totalvol();

  TIF tsat(tsat0);
#ifndef USE_ENTH
  #ifdef USE_VOF
  EnthalpyTIF enthFD(tpr, q, c, uvw2, time, solver, &mixed, tsat,
                     NULL, conc.topo.fs, conc.topo.adens);
  #else
  EnthalpyTIF enthFD(tpr, q, c, uvw, time, solver, &mixed, tsat,
                     NULL, conc.topo.fs, conc.topo.adens);
  #endif
#else
  EnthalpyTIF enthFD(tpr, q, c, uvw, time, solver, &mixed, tsat,
                     NULL, NULL, conc.topo.adens);
                     //NULL, NULL, NULL);
#endif
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

#ifndef USE_PC
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed, latent);
#else
  PhaseChange pc(mdot, tpr, q, c, g, f, c, uvw, time, &mixed, latent, tsat0);
#endif

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",   ts);
    press.load("press",   ts);
    c. load("c", ts);
    tpr.  load("tpr", ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/

    c = 0.0;

    const real xcent = 0.0;
    const real ycent = 0.0;
    const real zcent = 0.0;

    setup_circle(c,radius,xcent,ycent);
#if 1
    for_avijk(c,i,j,k)
      c[i][j][k] = 1. - c[i][j][k];
    c.bnd_update();
    c.exchange_all();
#ifdef USE_VOF
    if(Nsmooth>0)
      conc.smooth(c,sc,Nsmooth);
    else
      for_avijk(c,i,j,k)
        sc[i][j][k] = c[i][j][k];
#endif
#endif
    conc.init();
    conc.ancillary();

    for_vijk(c,i,j,k) {
      real dist = pow(c.xc(i)-xcent,2.0)
                 +pow(c.yc(j)-ycent,2.0);

      if (dist<=pow(radius,2.0)) {
        tpr[i][j][k] = tsat0;
      } else {
        real xi = sqrt(dist) - radius;
        real coef = erf(xi/5.0e-5*2.65);
        tpr[i][j][k] = tsat0 + (tout-tsat0) * coef;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();

    boil::plot->plot(uvw,c,tpr,press,mdot,mflx,"uvw-c-tpr-press-mdot-mflx",0);
    //exit(0);

  } // restart
  input.close();

  /* set iint */
  int iint = int(time.current_time()/tint) + 1;
  boil::oout<<"iint= "<<iint<<"\n";

#if 0
  conc.ancillary();
  real Arsum(0.0);
  for_avijk(c,i,j,k)
    Arsum += (*(conc.topo.adens))[i][j][k]*c.dV(i,j,k);
  boil::cart.sum_real(&Arsum);
  boil::oout<<"Area= "<<time.current_time()<<" "<<Arsum<<boil::endl;
  exit(0);
#endif

  for(time.start(); time.end(); time.increase()) {

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
#if 1
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"enthFD");

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);
#endif

#ifdef USE_VOF
    for_m(m)
      for_avmijk(uvw2,m,i,j,k)
        uvw2[m][i][j][k]=0.0;
    ns2.vol_phase_change(&f);
    ns2.outlet();
    p=0.0;
    pr2.discretize();
    pr2.coarsen();
    if (multigrid2.vcycle(ResRat(1e-6))) OMS(converged);
    ns2.project(p);
    //boil::plot->plot(uvw2, p,"uvw-press",  time.current_step());
    //exit(0);
#endif
    
    // store velocity
    for_m(m)
      uvw_old(m) = uvw(m);
    // store color function
    cold = c;

    /* inner loop */
    for(int mloop=0; mloop<mSimple; mloop++) {

      //reset body force
      for_m(m)
        for_avmijk(xyz,m,i,j,k)
          xyz[m][i][j][k]=0.0;

      /* surface tension */
      conc.tension(&xyz, mixed);

      /* essential for moving front */
      ns.discretize();
      pr.discretize();
      pr.coarsen();

      /* momentum */
      ns.new_time_step(uvw_old);
      ns.convection();
      ns.grad(press);
      ns.solve(ResRat(1e-8));

      p=0.0;
      if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);

      ns.project(p);
      press += p;
      press.exchange();

      ns.cfl_max();

#ifdef USE_VOF
      conc.cal_liq_vel(&uvw,&uvw_liq);
      conc.advance(cold);
      if(Nsmooth>0)
        conc.smooth(c,sc,Nsmooth);
      else
        for_avijk(c,i,j,k)
          sc[i][j][k] = c[i][j][k];
#else
      conc.advance();
#endif
      conc.totalvol();
#ifndef USE_VOF
      boil::oout<<"totalvol: "<<time.current_time()<<" "<< conc.get_clrsum1()<<" "<<conc.get_clrsum2()<<"\n";
#endif

      pc.modify_vel(uvw,c,cold);
    }
    real Arsum(0.0);
     for_vijk(c,i,j,k)
       Arsum += (*(conc.topo.adens))[i][j][k]*c.dV(i,j,k);
     boil::cart.sum_real(&Arsum);
     boil::oout<<"Area= "<<time.current_time()<<" "<<Arsum<<boil::endl;
#if 0
    /* post process */
    //velocity
    real umax=0.0, vmax=0.0, wmax=0.0;
    real usum=0.0, vsum=0.0, wsum=0.0;
    int icount=0;
    for_vijk(c,i,j,k) {
      real utmp=fabs(0.5*(uvw[Comp::u()][i][j][k]+uvw[Comp::u()][i+1][j][k]));
      real vtmp=fabs(0.5*(uvw[Comp::v()][i][j][k]+uvw[Comp::v()][i][j+1][k]));
      real wtmp=fabs(0.5*(uvw[Comp::w()][i][j][k]+uvw[Comp::w()][i][j][k+1]));
      if (umax<utmp) umax=utmp;
      if (vmax<vtmp) vmax=vtmp;
      if (wmax<wtmp) wmax=wtmp;
      usum += utmp;
      vsum += vtmp;
      wsum += wtmp;
      icount++;
    }
    boil::cart.max_real(&umax);
    boil::cart.max_real(&vmax);
    boil::cart.max_real(&wmax);
    boil::cart.sum_real(&usum);
    boil::cart.sum_real(&vsum);
    boil::cart.sum_real(&wsum);
    boil::cart.sum_int(&icount);
    usum /= real(icount);
    vsum /= real(icount);
    wsum /= real(icount);
    boil::oout<<"velocity= "<<time.current_time()<<" "
                <<umax<<" "<<vmax<<" "<<wmax<<" "
                <<usum<<" "<<vsum<<" "<<wsum<<"\n";

    if(time.current_step() % nint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw, c, press,"uvw-c-press",  time.current_step());
      boil::plot->plot(xyz, c, kappa,"xyz-c-kappa",  time.current_step());
    }
#else
    conc.front_minmax();
    boil::oout<<"x-min-front= "<<time.current_time()<<" "<<conc.get_xminft()
              <<" "<<conc.get_xmaxft()<<"\n";

    /* dt control */
    time.control_dt(ns.cfl_max(),0.10,dt);

    if(time.current_step() % nint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw,c,tpr,press,mdot,mflx,"uvw-c-tpr-press-mdot-mflx",iint);
      iint++;
    }
#endif

    if(time.current_step() % nint == 0) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c    .save("c"   ,  time.current_step());
      tpr  .save("tpr" ,  time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << "\n";
        output << time.current_time()+time.dt() << "\n";
        output << time.dt() << "\n";
        output.close();
      }
    }
  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
