#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#include "microlayer_common.h"

  const real expvel = sqrt(boil::pi/7.*rhov*latent/rhol*deltat/tsat0_K);
  boil::oout<<"Expvel= "<<expvel<<boil::endl;

/******************************************************************************/
/* ------------- setup finished */
/******************************************************************************/
/* below this line, NO VALUES AND SETTINGS CAN BE ENTERED! */
/******************************************************************************/

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );

  Grid1D gz0( Range<real>(LZ0, 0.0), NZ0, Periodic::no() );
  Grid1D gzf( Range<real>(0.0, LZ1), NZ1, Periodic::no() );

  Grid1D gz(gz0, gzf, Periodic::no());

  /*---------+
  |  domain  |
  +---------*/
  Body floor("floor.stl");
#ifdef USE_SOLID
  Axisymmetric d(gx,gz,DX0,&floor);
#else
  Axisymmetric d(gx,gzf,DX0);
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d), uvw_2(d);       // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate
  Scalar auxscalar(d);             // micro-layer film thickness
  Scalar mu_t(d);                  // eddy viscosity

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

    uvw_1(m)=uvw(m).shape();
    uvw_2(m)=uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  mu_t = p.shape();
  kappa = p.shape();
  g = p.shape();
  auxscalar = p.shape();

  /* should avoid spurious flows from the outlet */
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 1.0 ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d), heater(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  vapor  .mmass (Mv);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);
  liquid.mmass (Mv);

  /* solid */
  heater.rho    (rhosol);
  heater.cp     (cpsol);
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
  Matter mixed(*one,*zero, &c);
  mixed.sigma(sig);
  mixed.latent(latent);

  /* rescaling */
  vapor.rescale(xmult,tmult,mmult);
  liquid.rescale(xmult,tmult,mmult);
  mixed.rescale(xmult,tmult,mmult);
  heater.rescale(xmult,tmult,mmult);
  
  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = surftens_dt_coef*pow(vapor.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  Times time(ndt, dt);
  time.set_coef_dec(0.75);
  time.set_dt(dt*initdtcoef);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solverCGdi = new CG(d, Prec::di());
  Krylov * solverBICG = new BiCGS(d, Prec::di());

  Krylov * solver = solverCGic;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
  Vector & uvwvof = uvw_1;
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
 
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  if(subgrid_method) {
    conc.set_subgrid_method(SubgridMethod::SLICliquid());
  } else {
    conc.set_subgrid_method(SubgridMethod::None());
  }

  conc.set_cangle(cangle);

  if(detachment_model) {
    conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle,Nfilm_crit);
  } else {
    conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle,Nfilm_crit);
  }
  
  /*-------------------+
  |  check if restart  |
  +-------------------*/
  boil::test_irun();
  boil::set_irun(1);

  int ts;
  /* load variables */
  std::vector<Scalar*> load_scalars = { &press, &c };
  std::vector<std::string> load_scalar_names = { "press", "c" };
 
  std::vector<Vector*> load_vectors = { &uvw };
  std::vector<std::string> load_vector_names = { "uvw" };

  std::vector<Nucleation*> load_nucls = {};
  std::vector<std::string> load_nucl_names = {};

  if(boil::load_backup("time.txt",ts,time,
                       load_scalars, load_scalar_names,
                       load_vectors, load_vector_names,
                       load_nucls, load_nucl_names)) {
    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
#ifndef USE_BIG
    c = 1.0;

    /* set seed */
    real zsite=rseed*cos(0.0/180.0*boil::pi);
    nucl.add(Site( 0.000,  0.000, zsite, tseed, zplant));
  #if 1
    /* plant seed from initial step */
    nucl.plant();
    for(int ns=0; ns<nucl.size(); ns++){
      nucl.sites[ns].set_time_seed(0.0);
    }
  #endif
#else
    const real R0 = R0mult*dxmin;
    real radius, zcent, chord;
    const real xcent = 0.0;
    const real V0 = 4./3.*boil::pi*R0*R0*R0;
    boil::droplet_parameters_3D(180.-cangle,V0,radius,zcent,chord);
    conc.color() = 0.0;

    boil::setup_circle_xz(conc.color(),radius,xcent,zcent);
    for_avijk(conc.color(),i,j,k)
      conc.color()[i][j][k] = 1. - conc.color()[i][j][k];

    conc.color().bnd_update();
    conc.color().exchange_all();

    conc.color_to_vf(conc.color(),c);
    conc.reconstruct_geometry();
    conc.test_reconstruction(conc.color(),c);
#endif
    c.bnd_update();
    c.exchange_all();
    conc.init();

    boil::plot->plot(uvw,c,kappa,press
                    ,"uvw-c-curv-press",0);
    
    std::fstream output;
    std::stringstream ssp;
    ssp <<"profile-"<<0<<".txt";
    output.open(ssp.str(), std::ios::out);
    for_avijk(c,i,j,k) {
      auxscalar[i][j][k] = 1.0-std::max(0.0,std::min(1.0,conc.color()[i][j][k]));
    }
    boil::output_profile_xz(auxscalar,output,Range<int>(NZ0+1,NZ));
    boil::cart.barrier();
    output.close();
  }

  /* set iint */
  int iint;
  if(use_t_per_plot) {
    iint = time.current_time() / t_per_plot;
  } else {
    if(time.current_time()<time.dt()) {
      iint = 0;
    } else {
      iint = time.current_step() / n_per_plot;
    }
  }

  boil::oout<<"iint= "<<iint<<"\n";

  /* the loaded velocity will not be divergence-free after extending */
  if(time.current_time()>0) {
    /* cell-center velocities */
    Scalar u(d), v(d), w(d);
    if(boil::load_backup("time-extend.txt",ts,time,
                         {&u,&v,&w}, {"u","v","w"})) {
      boil::staggered_velocities(u,v,w,uvw);

      p = 0.0;
      if(multigrid.cycle(multigrid_cycle0,
                         multigrid_cycle1,
                         multigrid_rr,multigrid_mi))
        OMS(converged);

      p.exchange();
      ns.project(p);
      press += p;

      /* shift pressure */
      real pmin=1.0e+300;
      for_vijk(press,i,j,k) {
        if(d.ibody().on(i,j,k)) {
          if(pmin>press[i][j][k])
            pmin=press[i][j][k];
        }
      }
      boil::cart.min_real(&pmin);

      for_vijk(press,i,j,k) {
        if(d.ibody().on(i,j,k)) {
          press[i][j][k] -= pmin;
        } else {
          press[i][j][k] = 0.0;
        }
      }
  
      press.bnd_update();
      press.exchange_all();
    }
  }
 
  /*------------+
  |  time loop  |
  +------------*/
#ifndef SETUP_ONLY
  for(time.start(); time.end(); time.increase()) {

    /* new time step */
    conc.new_time_step();

    /*----------------------------------------------+
    |  reset body force & source term for enthalpy  |
    +----------------------------------------------*/
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    /*---------------+
    |  phase change  |
    +---------------*/
    /* step one: reset auxscalar */
    auxscalar = 0.;

    /* step two: label cells */
    for_vijk(auxscalar,i,j,k)
      auxscalar[i][j][k] = conc.heaviside()->status(i,j,k);

    /* step two: calculate volume of gas (this to avoid spurious source in liquid bulk) */
    real vapsum(0.0);
    for_vijk(auxscalar,i,j,k)
      if(auxscalar[i][j][k]==0||auxscalar[i][j][k]==-1)
        vapsum += (1.0-std::min(1.0,std::max(0.0,c[i][j][k])))*c.dV(i,j,k);

    boil::cart.sum_real(&vapsum);

    /* step four: set outlet */
    real A = 1.0;
    real tot_vpc = 2.*A*expvel*std::pow(1.5/1.0*vapsum,2./3.);

    /* step five: distribute source */
    f = 0.0;
    for_vijk(f,i,j,k) {
      if(auxscalar[i][j][k]==0||auxscalar[i][j][k]==-1) {
         f[i][j][k] += time.dti() * (1.0-std::min(1.0,std::max(0.0,c[i][j][k])))
                                  * c.dV(i,j,k)/vapsum * tot_vpc;
      }
    }
    f.exchange();

    ns.vol_phase_change(&f);

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* gravity force */
    Comp m = Comp::w();
    for_vmijk(xyz,m,i,j,k) {
      if(d.ibody().on(m,i,j,k))
        xyz[m][i][j][k] += -gravity * xyz.dV(m,i,j,k) * mixed.rho(m,i,j,k);
    }

    /* surface tension */
    if(wall_curv_method==CurvMethod::HFnormalXZ())
      conc.output_cangle_2d(Comp::i(),Comp::k(),Sign::neg());
    conc.tension(&xyz,mixed,conc.color());

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    p = 0.0;
    if(multigrid.cycle(multigrid_cycle0,
                       multigrid_cycle1,
                       multigrid_rr,multigrid_mi))
      OMS(converged);

    p.exchange();
    ns.project(p);
    press += p;

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k) {
      if(d.ibody().on(i,j,k)) {
        if(pmin>press[i][j][k])
          pmin=press[i][j][k];
      }
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k) {
      if(d.ibody().on(i,j,k)) {
        press[i][j][k] -= pmin;
      } else {
        press[i][j][k] = 0.0;
      }
    }

    press.bnd_update();
    press.exchange_all();

    ns.cfl_max();

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    conc.advance_with_extrapolation(false,ResRat(1e-6),uvw,
                                    one,&uvw_1);

    for_avk(c,k) {
      if(c.zc(k)>=(zmax-c.dzc(k))) {
        for_avij(c,i,j) {
          c[i][j][k]= 1.0;
        }
      }
    }

    c.bnd_update();
    c.exchange_all();
    conc.ancillary();

    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();

    /* front */
    conc.front_minmax(Range<real>(0   ,LX1),
                      Range<real>(-LX1,LX1),
                      Range<real>(0   ,LZ1));

    conc.totalvol();

    time.control_dt(ns.cfl_max(), cfl_with, dt);

    /*---------------------+
    |  stopping criterion  |
    +---------------------*/
    if(conc.topo->get_xmaxft()>0.8*LX1 || conc.topo->get_zmaxft()>0.8*LZ1) {
      boil::save_backup(time.current_step(), 1, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names,
                        load_nucls, load_nucl_names);
      boil::rm_backup(ts,
                      load_scalars, load_scalar_names,
                      load_vectors, load_vector_names,
                      load_nucls, load_nucl_names);
      boil::plot->plot(uvw,c,kappa,press
                      ,"uvw-c-curv-press",time.current_step());

      /* cell-center velocities */
      Scalar u(d), v(d), w(d);
      boil::cell_center_velocities(uvw,u,v,w);
      boil::save_backup(time.current_step(), 1, time,
                        {&u,&v,&w}, {"u","v","w"});

      break;
    }

    /*--------------+
    |  output data  |
    +--------------*/
    bool otpcond;
    if(use_t_per_plot)
      otpcond = time.current_time() / t_per_plot >= real(iint);
    else
      otpcond = time.current_step() / n_per_plot >= real(iint);
    if(otpcond) {
      iint++;
      boil::plot->plot(uvw,c,kappa,press
                      ,"uvw-c-curv-press",iint);
      std::fstream output;
      std::stringstream ssp;
      ssp <<"profile-"<<iint<<".txt";
      output.open(ssp.str(), std::ios::out);
      for_avijk(c,i,j,k) {
        auxscalar[i][j][k] = 1.0-std::max(0.0,std::min(1.0,conc.color()[i][j][k]));
      }
      boil::output_profile_xz(auxscalar,output,Range<int>(NZ0+1,NZ));
      boil::cart.barrier();
      output.close();
    }

    /*--------------+
    |  backup data  |
    +--------------*/
    if(time.current_step() % n_per_backup == 0) {
      boil::save_backup(time.current_step(), 0, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names,
                        load_nucls, load_nucl_names);
    }
    
    if(  boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()
      || time.current_time()>tend) {
      boil::save_backup(time.current_step(), 1, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names,
                        load_nucls, load_nucl_names);
      boil::rm_backup(ts,
                      load_scalars, load_scalar_names,
                      load_vectors, load_vector_names,
                      load_nucls, load_nucl_names);
      boil::plot->plot(uvw,c,kappa,press
                      ,"uvw-c-curv-press",time.current_step());

      if(time.current_time()<tend) {
        boil::set_irun(0);
      }
      break;
    }
  } /* time loop */
#endif /* setup only */

  boil::oout << "Finished." << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}
