#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

void restrictXZ(const Scalar & fine, Scalar & coarse, const int NZ0);

#include "microlayer_common.h"

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx_fine( Range<real>(0.0,LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );

  Grid1D gz0_fine( Range<real>(LZ0, 0.0), NZ0, Periodic::no() );
  Grid1D gzf_fine( Range<real>(0.0, LZ1), NZ1, Periodic::no() );

  Grid1D gz_fine(gz0_fine, gzf_fine, Periodic::no());

  Grid1D gx_coarse( Range<real>(0.0,2*LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );

  Grid1D gz0_coarse( Range<real>(2*LZ0, 0.0), NZ0, Periodic::no() );
  Grid1D gzf_coarse( Range<real>(0.0, 2*LZ1), NZ1, Periodic::no() );

  Grid1D gz_coarse(gz0_coarse, gzf_coarse, Periodic::no());


  /*---------+
  |  domain  |
  +---------*/
  Body floor_fine("floor.stl");
  Body floor_coarse("floor.stl");
#ifdef USE_SOLID
  Axisymmetric d_fine(gx_fine,gz_fine,DX0,&floor_fine);
  Axisymmetric d_coarse(gx_coarse,gz_coarse,2*DX0,&floor_coarse);
#else
  Axisymmetric d_fine(gx_fine,gzf_fine,DX0);
  Axisymmetric d_coarse(gx_coarse,gzf_coarse,2*DX0);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw_fine(d_fine);
  Scalar u_fine(d_fine), v_fine(d_fine), w_fine(d_fine);
  Scalar c_fine(d_fine), press_fine(d_fine), tpr_fine(d_fine);

  Vector uvw_coarse(d_coarse);
  Scalar u_coarse(d_coarse), v_coarse(d_coarse), w_coarse(d_coarse);
  Scalar c_coarse(d_coarse), press_coarse(d_coarse), tpr_coarse(d_coarse);

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw_fine.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw_fine.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw_fine.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw_fine.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw_fine.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw_fine.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

    uvw_coarse.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw_coarse.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw_coarse.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw_coarse.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw_coarse.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw_coarse.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
  }

  press_fine.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  press_fine.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  press_fine.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  press_fine.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  press_fine.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  press_fine.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  press_coarse.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  press_coarse.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  press_coarse.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  press_coarse.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  press_coarse.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  press_coarse.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  c_fine.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c_fine.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  c_fine.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c_fine.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 1.0 ) );
  c_fine.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c_fine.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  c_coarse.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c_coarse.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  c_coarse.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c_coarse.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 1.0 ) );
  c_coarse.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c_coarse.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  tpr_fine.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr_fine.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
#ifdef USE_BOTTOM_DIRICHLET
  tpr_fine.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), twall ) );
#else
  tpr_fine.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
#endif
  //tpr_fine.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),tout) );
  tpr_fine.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr_fine.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  tpr_coarse.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr_coarse.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
#ifdef USE_BOTTOM_DIRICHLET
  tpr_coarse.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), twall ) );
#else
  tpr_coarse.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
#endif
  //tpr_coarse.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),tout) );
  tpr_coarse.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr_coarse.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d_fine), liquid(d_fine), heater(d_fine);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  vapor  .mmass (Mv);
  vapor  .beta  (betav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);
  liquid.mmass (Mv);
  liquid.beta  (betal);

  /* CaF2 */
  heater.rho    (rhosol);
  heater.cp     (cpsol);
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
  Matter mixed(*one,*zero, &c_fine);
  mixed.sigma(sig);
  mixed.latent(latent);

  /* rescaling */
  vapor.rescale(xmult,tmult,mmult);
  liquid.rescale(xmult,tmult,mmult);
  mixed.rescale(xmult,tmult,mmult);
  heater.rescale(xmult,tmult,mmult);
  
  /* natural convection BL thickness */
  real ztconst = boil::convective_boundary_layer_thickness(liquid,
                                                           twall0-tout);
  boil::oout<<"BL thickness: "<<ztconst<<boil::endl;

  /* top temperature boundary */
  real ttop = tout;
  if(LZ1<ztconst) {
    ttop = twall0 + (tout-twall0)*LZ1/ztconst;
  }
  tpr_fine.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),ttop) );

  ttop = tout;
  if(2*LZ1<ztconst) {
    ttop = twall0 + (twall0-tout)*2*LZ1/ztconst;
  }
  tpr_coarse.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),ttop) );

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = DX0;
  Times time(ndt, dt);

  int ts;
  /***************** load variables *****************/
  std::vector<Scalar*> load_scalars = { &press_fine, &c_fine, &tpr_fine, &u_fine, &v_fine, &w_fine };
  std::vector<std::string> load_scalar_names = { "press", "c", "tpr", "u", "v", "w" };

  boil::load_backup("time.txt",ts,time,
                    load_scalars, load_scalar_names);
  boil::rm_backup(ts,
                  load_scalars, load_scalar_names);

  /***************** restrict *****************/
#ifdef USE_SOLID
  const int n0 = NZ0;
#else
  const int n0 = 0;
#endif
  restrictXZ(press_fine,press_coarse,n0);
  restrictXZ(c_fine,c_coarse,n0);
  restrictXZ(tpr_fine,tpr_coarse,n0);
  restrictXZ(u_fine,u_coarse,n0);
  restrictXZ(v_fine,v_coarse,n0);
  restrictXZ(w_fine,w_coarse,n0);

  /***************** complement *****************/

  /* in x-direction */
  for_vijk(c_coarse,i,j,k) {
    /* establish coordinate correspondence */
    const int b = boil::BW-1;
    int ihat = i-b;
    int khat = k-b;

    if(ihat>NX1/2) {
      c_coarse[i][j][k] = 1.0;
      /* linear drop-off */
      press_coarse[i][j][k] = press_coarse[NX1/2+b][j][k]
                            *(1.0-(c_coarse.xc(i)-LX1)/LX1);

      /* constant extension */
      tpr_coarse[i][j][k] = tpr_coarse[NX1/2+b][j][k];
      /* u, v, w zero (wall in x-dir) */
    }
    /* special treatment of temperature in solid */
    if(khat<=NZ0/2) {
      tpr_coarse[i][j][k] = twall;
    }
  }

  /* in z-direction */
  for_vijk(c_coarse,i,j,k) {
    /* establish coordinate correspondence */
    const int b = boil::BW-1;
    int ihat = i-b;
    int khat = k-b;

    if(khat>NZ1/2+NZ0) {
      c_coarse[i][j][k] = 1.0;

      /* linear drop-off */
      press_coarse[i][j][k] = press_coarse[i][j][NZ1/2+NZ0+b]
                            *(1.0-(c_coarse.zc(k)-LZ1)/LZ1);

      /* temperature boundary layer */
      if(c_coarse.zc(k)<ztconst) {
        tpr_coarse[i][j][k] = twall0 + (tout-twall0)*c_coarse.zc(k)/ztconst;
      } else {
        tpr_coarse[i][j][k] = tout;
      }
      /* w prolongated in z-dir */
      w_coarse[i][j][k] = w_coarse[i][j][NZ1/2+NZ0+b];

    }
  }

  /* in xz-direction */
  for_vijk(c_coarse,i,j,k) {
    /* establish coordinate correspondence */
    const int b = boil::BW-1;
    int ihat = i-b;
    int khat = k-b;

    if(ihat>NX1/2&&khat>NZ1/2+NZ0) {
      c_coarse[i][j][k] = 1.0;

      /* linear interpolation */
      press_coarse[i][j][k] = (
                                press_coarse[i][j][NZ1/2+NZ0+b]
                              *1./(c_coarse.zc(k)-c_coarse.zc(NZ1/2+NZ0+b))
                              + press_coarse[NX1/2+b][j][k]
                              *1./(c_coarse.xc(i)-c_coarse.xc(NX1/2+b))
                              )/
                              (
                               1./(c_coarse.zc(k)-c_coarse.zc(NZ1/2+NZ0+b))
                              +1./(c_coarse.xc(i)-c_coarse.xc(NX1/2+b))
                              );
    }
  }
  
  /***************** staggered velocity *****************/
  /* (for plotting and backup only) */
  boil::staggered_velocities(u_coarse,v_coarse,w_coarse,uvw_coarse);

  /***************** cleanup *****************/
  c_coarse.bnd_update();
  tpr_coarse.bnd_update();
  press_coarse.bnd_update();

  c_coarse.exchange_all();
  tpr_coarse.exchange_all();
  press_coarse.exchange_all();
  uvw_coarse.exchange_all();

  /***************** save variables *****************/
#if 1
  boil::save_backup(ts, 1, time,
                    { &press_coarse, &c_coarse, &tpr_coarse, &u_coarse, &v_coarse, &w_coarse }, 
                    { "press", "c", "tpr", "u", "v", "w" },
                    { &uvw_coarse }, { "uvw" });
#endif
#if 1
  boil::plot->plot(uvw_coarse,c_coarse,tpr_coarse,press_coarse
                 ,"uvw-c-tpr-press",ts);
#else
  boil::plot->plot(uvw_fine,c_fine,tpr_fine,press_fine
                 ,"uvw-c-tpr-press",ts);
#endif
  

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}

/******************************************************************************/
void restrictXZ(const Scalar & fine, Scalar & coarse, const int NZ0) {
  /***************************************************************************//**
   \brief Restrict scalar on a 2D fine grid to a coarse one.
      output: coarse
      NZ0: invariant thickness of solid

     ---------     b = boil::BW-1
     | x | y |     coarse coords: i,j,k ; i^ = i-b, k^ = k-b
     ---------     fine coords:
     | q | z |         y - 2*i^   +b, j ,2*k^   +b
     ---------         x - 2*i^-1 +b, j ,2*k^   +b
                       z - 2*i^   +b, j ,2*k^-1 +b
                       q - 2*i^-1 +b, j ,2*k^-1 +b

  *******************************************************************************/

  int imax = coarse.ei();
  int kmax = coarse.ek();

  for_vijk(coarse,i,j,k) {
  
    /* establish coordinate correspondence */
    const int b = boil::BW-1;
    int ihat = i-b;
    int khat = k-b;

    int i_y = 2*ihat + b;
    int i_x = 2*ihat-1 + b;
    int i_z = 2*ihat + b;
    int i_q = 2*ihat-1 + b;

    int j_y = j;
    int j_x = j;
    int j_z = j;
    int j_q = j;

    int k_y, k_x, k_z, k_q;

    /* fluid */
    if(khat>NZ0) {
      int kstar = khat-NZ0; /* kstar = 1: first fluid cell */

      k_y = 2*kstar + b + NZ0;
      k_x = 2*kstar + b + NZ0;
      k_z = 2*kstar-1 + b + NZ0;
      k_q = 2*kstar-1 + b + NZ0;
    } else {
      /* in solid, we only consider upper NZ0/2 cells */
      if(khat<=NZ0/2) {
        continue;
      } else {
        int kstar = khat-NZ0/2; /* kstar = 1: first solid cell above middle */
        
        k_y = 2*kstar + b;
        k_x = 2*kstar + b;
        k_z = 2*kstar-1 + b;
        k_q = 2*kstar-1 + b;
      }
    }

    /* avoid out-of-scope indices */
    if(i_y>imax||k_y>kmax)
      continue;

    coarse[i][j][k] = fine[i_x][j_x][k_x]*fine.dV(i_x,j_x,k_x)
                    + fine[i_y][j_y][k_y]*fine.dV(i_y,j_y,k_y)
                    + fine[i_z][j_z][k_z]*fine.dV(i_z,j_z,k_z)
                    + fine[i_q][j_q][k_q]*fine.dV(i_q,j_q,k_q);

    coarse[i][j][k] /= coarse.dV(i,j,k);
  }

  return;
}
