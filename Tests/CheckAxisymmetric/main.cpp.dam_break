#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

/* KIT dam break SA-D1-3 -and- KIT water step SA-D1X-3 */
/******************************************************************************/
int main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc<=5){
    boil::oout<<"Six command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin gridlevel d1 h0 h1 tend [vals in cm,s]"<<boil::endl;
    exit(0);
  }

  const int wmin = atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]);
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  const real d1 = atof(argv[3])*1e-2;
  boil::oout<<"d1= "<<d1<<"\n";

  const real h0 = atof(argv[4])*1e-2;
  boil::oout<<"h0= "<<h0<<"\n";

  const real h1 = atof(argv[5])*1e-2;
  boil::oout<<"h1= "<<h1<<"\n";

  const real tend = 0.5;//atof(argv[6]);
  boil::oout<<"tend= "<<tend<<"\n";

  /* steps per backup */
  const int n_per_backup = 5000;

  /* grid parameters */
  const int zmult = 2;
  const int base= 22*2*2*gLevel;

  /* domain dimensions (given by problem) */
  const real LZ = zmult*h1;
  const real LX = 0.5*44.*1e-2; /* diameter = 44 cm */
  const real AR = LX/LZ;

  const real radius = 0.5*d1; 

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
#if 1
  const int NX = base;
  const real DX = LX/real(NX);
  const int NZ = int(real(base)/AR);
  boil::oout<<"dims: "<<NX<<" "<<NZ<<" "<<LX<<" "<<LZ<<" "<<DX<<boil::endl;
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );

  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::no(),
             BndGrid::wall(), BndGrid::wall() );

  Axisymmetric d(gx,gz,DX);
#else
  const real LX1 = 0.5*radius;
  const real LX2 = LX;
  const real DX1 = 0.25*LX/real(xmult*base);
  const int  NX1 = int(LX1/DX1);
  const int  NX2 = int( (LX2-LX1)/DX1/2. );
  const int  NZ = zmult*base;

  Grid1D gx0( Range<real>(0.0, LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
  Grid1D gx1( Range<real>(LX1, LX2)
            , Range<real>(1.2*DX1,4.*DX1)
            , NX2, Periodic::no() );
  Grid1D gx (gx0, gx1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall());

  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::no(),
             BndGrid::wall(), BndGrid::wall() );

  Axisymmetric d(gx,gz,2.*DX1);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_old(m)=uvw(m).shape();
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  g=c.shape();
  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();

  Matter air(d), water(d);
  air  .mu    (18.22e-6);
  air  .rho   (1.2);
  water.mu    (0.9532e-3);
  water.rho   (997.76);

  Matter mixed(water, air, &c);
  mixed.sigma (0.072);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(air.rho()->value()*pow(dxmin,3.0)
                             /(2.0*boil::pi*mixed.sigma()->value()),0.5);
  const int ndt = 1e6;
  const real tint = 1e-2;
  Times time(ndt, dt); 
	
  boil::oout<<"time: "<<dt<<" "<<tend<<" "<<tend/dt<<boil::endl;

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());

  VOFaxisym conc(c, g, kappa, uvw, time, solver);
  conc.set_curv_method(CurvMethod::HF());
  conc.set_wall_curv_method(CurvMethod::none());
  conc.set_topo_method(TopoMethod::Hybrid());

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  boil::test_irun();
  boil::set_irun(1);

  int ts;
  /* load variables */
  std::vector<Scalar*> load_scalars = { &press, &c };
  std::vector<std::string> load_scalar_names = { "press", "c" };

  std::vector<Vector*> load_vectors = { &uvw };
  std::vector<std::string> load_vector_names = { "uvw" };

  if(boil::load_backup("time.txt",ts,time,
                       load_scalars, load_scalar_names,
                       load_vectors, load_vector_names)) {
    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
    for_m(m)
      for_avmijk(uvw,m,i,j,k)
        uvw[m][i][j][k]=0.0;

    cold = 0.0;

    for_avijk(cold,i,j,k) {
      if       (cold.zn(k+1)<h0) {
        cold[i][j][k] = 1.0;
      } else if(cold.zn(k  )<h0) {
        cold[i][j][k] = (h0-cold.zn(k))/(cold.zn(k+1)-cold.zn(k));
      } else if(cold.xn(i+1)<radius && cold.zn(k+1)<h1) {
        cold[i][j][k] = 1.0;
      } else if(cold.xn(i+1)<radius && cold.zn(k  )<h1) {
        cold[i][j][k] = (h1-cold.zn(k))/(cold.zn(k+1)-cold.zn(k));
      } else if(cold.xn(i  )<radius && cold.zn(k+1)<h1) {
        cold[i][j][k] = (radius-cold.xn(i))/(cold.xn(i+1)-cold.xn(i));
      } else if(cold.xn(i  )<radius && cold.zn(k  )<h1) {
        cold[i][j][k] = (radius-cold.xn(i))/(cold.xn(i+1)-cold.xn(i))
                      * (h1-cold.zn(k))/(cold.zn(k+1)-cold.zn(k));
      }
    }

    cold.bnd_update();
    cold.exchange_all();

    conc.color_to_vf(cold,c);
    conc.reconstruct_geometry();
    conc.test_reconstruction(conc.color(),c);
    c.bnd_update();
    c.exchange_all();
    conc.init();

    boil::plot->plot(uvw, c, conc.color(),kappa,"uvw-c-clr-kappa", 0);
  }

  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  multigrid.min_cycles(1);  // 6

  //conc.init();
  //conc.test_reconstruction(conc.color(),c);
  conc.totalvol();

  //boil::plot->plot(c,conc.color(),conc.nx,conc.ny,conc.nz, "phi-c-nx-ny-nz", 0);
  //exit(0);

  /* set iint */
  int iint = int(time.current_time()/tint) + 1;
  boil::oout<<"iint= "<<iint<<"\n";

  for(time.start(); time.end(); time.increase()) {

    /* reset body force */
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    const Comp m = Comp::w();
    for_vmijk(xyz,m,i,j,k) {
      real rhomix = mixed.rho(m,i,j,k);
                    //liquid.rho()->value()*phil + vapor.rho()->value() *phiv;
      xyz[m][i][j][k] += -boil::g * xyz.dV(m,i,j,k) * rhomix;
    }

    /* surface tension */
    conc.tension(&xyz, mixed,conc.color());
    //conc.tension(&xyz, mixed);

    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();
    ns.grad(press);
    ns.solve(ResRat(1e-8));

    p=0.0;
    if (multigrid.fcycle(ResRat(2e-5))) OMS(converged);

    ns.project(p);
    press += p;
    press.exchange();

    //ns.cfl_max();

    conc.advance();
    conc.totalvol();

    /* dt control */
    time.control_dt(ns.cfl_max(),0.2,dt);

    /* post-process */
    conc.front_minmax();

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(pmin>press[i][j][k]) pmin=press[i][j][k];
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k)
      press[i][j][k] -= pmin;
    press.bnd_update();
    press.exchange_all();

    real height(0.0);
    for_vijk(c,i,j,k) {
     if((LX-DX)<c.xc(i))
       height += conc.color()[i][j][k]*c.dzc(k);
    }
    boil::cart.sum_real(&height);
    boil::oout<<"main::height= "<<time.current_time()<<" "<<height<<boil::endl;

    /*--------------+
    |  output data  |
    +--------------*/
    if((time.current_time()) / (tint) >= real(iint)) {
      boil::plot->plot(uvw, c, conc.color(),kappa,"uvw-c-clr-kappa", iint);
      iint++;
    }

    /*--------------+
    |  backup data  |
    +--------------*/
    if(time.current_step() % n_per_backup == 0) {
      boil::save_backup(time.current_step(), 0, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names);
    }

    /*---------------------+
    |  stopping criterion  |
    +---------------------*/
    if( boil::timer.current_min() > wmin-12.0
      || time.current_step()==time.total_steps()
      || time.current_time()>tend
      || time.dt()<2e-6/gLevel) {
      boil::save_backup(time.current_step(), 1, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names);
      boil::rm_backup(ts,
                      load_scalars, load_scalar_names,
                      load_vectors, load_vector_names);

      if(time.current_time()<tend&&time.dt()>=2e-6/gLevel) {
        boil::set_irun(0);
      }
      break;
    }

  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
