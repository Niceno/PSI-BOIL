#include "Include/psi-boil.h"
#include "setup_circle.cpp"
#include "test_reconstruction.cpp"
#include <fstream>
#include <iostream>
#define SYM
//#define USE_BNDCLR
//#define USE_CARTESIAN

#if 0
/* computed parameters */
const int gLevel = 4;
const int NX = 18*gLevel;
#ifdef SYM
const int NZ = NX;
#else
const int NZ = 2*NX;
#endif

/* domain dimensions (given by problem) */
//const real LX =   1.0;
const real LX =   4.0e-3;
const real LZ =   LX;
const real DX =   0.5*LX/real(NX);

const int mSimple = 1;

const bool inverted = false;//true;
const real radius = 1.*LX/5.0;
real mmx = 1.;
real mmy = 0.;
real mmz = 0.7;

const real xcent = 0.0;
const real ycent = 0.0;
const real zcent = 0.0;

/* setup triangle */
const real msum = sqrt(mmx*mmx+mmy*mmy+mmz*mmz);
const real nnx = mmx/msum;
const real nny = mmy/msum;
const real nnz = mmz/msum;

/* alpha */
const real nalp = nnx*radius;
#endif


/******************************************************************************/
int main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc<=2){
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil gridlevel angleofrepose"<<boil::endl;
    exit(0);
  }

  const int gLevel = atoi(argv[1]);
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  const int NX = 18*gLevel;
#ifdef SYM
  const int NZ = NX;
#else
  const int NZ = 2*NX;
#endif
  /* domain dimensions (given by problem) */
  //const real LX =   1.0;
  const real LX =   4.0e-3;
  const real LZ =   LX;
  const real DX =   0.5*LX/real(NX);
#ifdef SYM
  const real DZ =   0.5*LZ/real(NZ);
#else
  const real DZ =   0.5*LZ/real(NZ/2);
#endif

  const int mSimple = 1;

  const bool inverted = true;//false;

  const real angle = atof(argv[2]);
  boil::oout<<"angle= "<<angle<<"\n";

  real mmz = 1./sqrt((1.+pow(tan(angle*boil::pi/180.),2.)));
  real mmx = sqrt(1.-mmz*mmz);
  real mmy = 0.;
  
  real r1 = 0.5*LX-DX;
  real r2 = (0.5*LZ-DZ)/tan(boil::pi/180.*(90.-angle));

  const real radius = std::min(r1,r2);
  //boil::oout<<r1<<" "<<r2<<" "<<r3<<" "<<mmz<<" "<<boil::endl;

  boil::oout<<"Cells-per-radius= "<<radius<<" "<<radius/LX*real(NX)<<boil::endl;

  /* setup triangle */
  const real msum = sqrt(mmx*mmx+mmy*mmy+mmz*mmz);
  const real nnx = mmx/msum;
  const real nny = mmy/msum;
  const real nnz = mmz/msum;

  /* alpha */
  const real nalp = nnx*radius;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,0.5*LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#ifdef SYM
  Grid1D gz( Range<real>(0.0,0.5*LZ), NZ, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#else
  Grid1D gz( Range<real>(-0.5*LZ,0.5*LZ), NZ, Periodic::no() );
#endif

  /*---------+
  |  domain  |
  +---------*/
#ifdef USE_CARTESIAN
  Grid1D gy(DX);
  Domain d(gx,gy,gz);
#else
  Axisymmetric d(gx,gz,DX);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);

#ifdef USE_BNDCLR
  Vector bndclr(d), bndclrold(d);
#endif

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_old(m)=uvw(m).shape();
#ifdef USE_BNDCLR
    bndclr(m)    = uvw(m).shape();
    bndclrold(m) = uvw(m).shape();
#endif
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  g=c.shape();
  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();

  Matter air(d), water(d);
#if 0
  air  .mu    (1.0000e-3);
  air  .rho   (1.0000e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+0);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.01);
#else
  air  .mu    (1.0000e-5);
  air  .rho   (1.2500e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+3);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.07);
#endif

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(air.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  const real tend = 0.1;
  const int ndt = tend/dt;
  const int nint = ndt/10;
  Times time(ndt, dt); 
	
#if 1
  boil::oout<<"si= "<<c.si()<<" ei= "<<c.ei()<<"\n";
  boil::oout<<"sj= "<<c.sj()<<" ei= "<<c.ej()<<"\n";
  boil::oout<<"sk= "<<c.sk()<<" ei= "<<c.ek()<<"\n";
#endif

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());

#ifdef USE_CARTESIAN
  #ifdef USE_BNDCLR
  VOF conc(c, g, kappa, uvw, time, solver, &bndclr);
  #else
  VOF conc(c, g, kappa, uvw, time, solver);
  #endif
#else
  #ifdef USE_BNDCLR
  VOFaxisym conc(c, g, kappa, uvw, time, solver, &bndclr);
  #else
  VOFaxisym conc(c, g, kappa, uvw, time, solver);
  #endif
  //conc.set_reconstruction_parameters(1e-5,conc.get_reconstruction_maxiter());
#endif
  conc.set_curv_method(0);  // height function
  //conc.set_curv_method(1);  // smoothed VOF

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_m(m)
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=0.0;

  cold = 0.0;

#if 0
  for_vijk(c,i,j,k) {
    if(c.xc(i)<1.1*DX)
      cold[i][j][k] = 1.0;
  }
#else
  for_vijk(c,i,j,k) {
    real xpos = c.xn(i);
    real ypos = c.yn(j);
    real zpos = c.zn(k);
    conc.nx[i][j][k] = nnx;
    conc.ny[i][j][k] = nny;
    conc.nz[i][j][k] = nnz;
    conc.nalpha[i][j][k] = (nalp-nnx*xpos-nny*ypos-nnz*zpos);
    conc.nalpha[i][j][k] /= c.dxc(i);
  }
  conc.forward(cold);
#endif

  if(inverted) {
    for_avijk(cold,i,j,k)
      cold[i][j][k] = 1. - cold[i][j][k];
  }

  cold.bnd_update();
  cold.exchange_all();

  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 6
  }
  multigrid.stop_if_diverging(true);


#ifdef USE_CARTESIAN
  for_avijk(cold,i,j,k) {
    c[i][j][k] = cold[i][j][k];
  }
#else
  conc.color_to_vf(cold,c);
  conc.reconstruct_geometry();
  conc.test_reconstruction(conc.color(),c);
#endif

  conc.ancillary();
  conc.totalvol();

#if 0
  /* g dummy */
  for_vijk(g,i,j,k) {
    g[i][j][k] = conc.color()[i][j][k]-cold[i][j][k];
  }
  boil::plot->plot(uvw,c,cold,conc.color(),g, "uvw-phi-c-c2-c3", 0);
#endif  

  std::vector<real> nl1, nli, kl1, kli;
  std::vector<NormMethod> nmv;

  NormMethod nm = NormMethod::ElviraXZ();
  nmv.push_back(nm);
  conc.set_normal_vector_method_all(nm);
  conc.ancillary();
  conc.curvature();
#ifndef USE_CARTESIAN
  test_reconstruction_cone(NX,NZ,conc,conc.color(),cold,kappa,inverted,nnx,nnz,nalp,nm,nl1,nli,kl1,kli);
#else
  test_reconstruction_triangle_xz(conc,c,cold,kappa,inverted,nnx,nnz,nm,nl1,nli,kl1,kli);
#endif

  std::ofstream output;
  output.open( "results_cone.txt", std::ios::out | std::ios::app );
  for(int i(0); i<nl1.size(); ++i) {
    boil::oout<<angle<<" "<<gLevel<<" | "<<nmv[i]<<" "<<nl1[i]<<" "<<nli[i]<<" "<<kl1[i]<<" "<<kli[i]<<boil::endl;
    output<<angle<<" "<<gLevel<<" | "<<nmv[i]<<" "<<nl1[i]<<" "<<nli[i]<<" "<<kl1[i]<<" "<<kli[i]<<boil::endl;
  }
  output.close();

#ifndef USE_CARTESIAN
  boil::plot->plot(c,conc.color(),kappa, "uvw-phi-c-kappa", 0);
#else
  boil::plot->plot(c,c,kappa, "uvw-phi-c-kappa", 0);
#endif
  exit(0);

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
