#include "Include/psi-boil.h"
#include "setup_circle.cpp"
//#include "test_reconstruction.cpp"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define SYM
//#define USE_BNDCLR
//#define USE_CARTESIAN
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif


/******************************************************************************/
int main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc<=3){
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil gridlevel radius-mult msimple"<<boil::endl;
    exit(0);
  }

  const int gLevel = atoi(argv[1]);
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  const real radmult = atof(argv[2]);
  boil::oout<<"radmult= "<<radmult<<"\n";

  const int mSimple = atoi(argv[3]);
  boil::oout<<"mSimple= "<<mSimple<<"\n";

  /* computed parameters */
  const int NX = 16*gLevel;
#ifdef SYM
  const int NZ = NX;
#else
  const int NZ = 2*NX;
#endif

  /* domain dimensions (given by problem) */
  const real LX =   4.0e-3;
  const real LZ =   LX;
  const real DX =   0.5*LX/real(NX);

  const bool inverted = true;
  const bool partial = true;

  const real radius = radmult*0.5*LX;
  const real xcent = 0.0;
  const real ycent = 0.0;
  const real zcent = 0.0;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,0.5*LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#ifdef SYM
  Grid1D gz( Range<real>(0.0,0.5*LZ), NZ, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#else
  Grid1D gz( Range<real>(-0.5*LZ,0.5*LZ), NZ, Periodic::no() );
#endif

  /*---------+
  |  domain  |
  +---------*/
#ifdef USE_CARTESIAN
  Grid1D gy(DX);
  Domain d(gx,gy,gz);
#else
  Axisymmetric d(gx,gz,DX);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);

#ifdef USE_BNDCLR
  Vector bndclr(d), bndclrold(d);
#endif

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_old(m)=uvw(m).shape();
#ifdef USE_BNDCLR
    bndclr(m)    = uvw(m).shape();
    bndclrold(m) = uvw(m).shape();
#endif
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  g=c.shape();
  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();

  Matter air(d), water(d);
#if 0
  air  .mu    (1.0000e-3);
  air  .rho   (1.0000e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+0);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.01);
#else
  air  .mu    (1.0000e-5);
  air  .rho   (1.2500e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+3);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.07);
#endif

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(air.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  const real tend = 0.1;
  const int ndt = tend/dt;
  const int nint = ndt/10;
  Times time(ndt, dt); 
	
#if 1
  boil::oout<<"si= "<<c.si()<<" ei= "<<c.ei()<<"\n";
  boil::oout<<"sj= "<<c.sj()<<" ei= "<<c.ej()<<"\n";
  boil::oout<<"sk= "<<c.sk()<<" ei= "<<c.ek()<<"\n";
#endif

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());

#ifdef USE_CARTESIAN
  #ifdef USE_BNDCLR
  VOF conc(c, g, kappa, uvw, time, solver, &bndclr);
  #else
  VOF conc(c, g, kappa, uvw, time, solver);
  #endif
#else
  #ifdef USE_BNDCLR
  VOFaxisym conc(c, g, kappa, uvw, time, solver, &bndclr);
  #else
  VOFaxisym conc(c, g, kappa, uvw, time, solver);
  #endif
  //conc.set_reconstruction_parameters(1e-5,conc.get_reconstruction_maxiter());
#endif
  conc.set_curv_method(0);  // height function
  //conc.set_curv_method(1);  // smoothed VOF

#if 1
  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_m(m)
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=0.0;

  cold = 0.0;

  setup_circle_xz(cold,radius,xcent,ycent);
  if(inverted) {
    for_avijk(cold,i,j,k)
      cold[i][j][k] = 1. - cold[i][j][k];
  }

  cold.bnd_update();
  cold.exchange_all();

  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 6
  }
  multigrid.stop_if_diverging(true);


#ifdef USE_CARTESIAN
  for_avijk(cold,i,j,k) {
    c[i][j][k] = cold[i][j][k];
  }
#else
  conc.color_to_vf(cold,c);
  conc.reconstruct_geometry();
  conc.test_reconstruction(conc.color(),c);
#endif
  conc.totalvol();


  for(time.start(); time.end(); time.increase()) {

    // store velocity
    for_m(m)
      uvw_old(m) = uvw(m);
    // store color function
    cold = c;
#ifdef USE_BNDCLR
    for_m(m)
      bndclrold(m) = bndclr(m);
#endif

    /* inner loop */
    for(int mloop=0; mloop<mSimple; mloop++) {

      //reset body force
      for_m(m)
        for_avmijk(xyz,m,i,j,k)
          xyz[m][i][j][k]=0.0;

      /* surface tension */
#ifdef USE_CARTESIAN
      conc.tension(&xyz, mixed);
#else
      conc.tension(&xyz, mixed,conc.color());
      //conc.tension(&xyz, mixed);
#endif

      /* essential for moving front */
      ns.discretize();
      pr.discretize();
      pr.coarsen();

      /* momentum */
      ns.new_time_step(uvw_old);
      ns.convection();
      ns.grad(press);
      ns.solve(ResRat(1e-8));

      p=0.0;
      if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);

      ns.project(p);
      press += p;
      press.exchange();

      ns.cfl_max();

      conc.advance(cold);
      conc.totalvol();

    }
    /* post process */
    //velocity
    real umax=0.0, vmax=0.0, wmax=0.0;
    real usum=0.0, vsum=0.0, wsum=0.0;
    int icount=0;
    for_vijk(c,i,j,k) {
      real utmp=fabs(0.5*(uvw[Comp::u()][i][j][k]+uvw[Comp::u()][i+1][j][k]));
      real vtmp=fabs(0.5*(uvw[Comp::v()][i][j][k]+uvw[Comp::v()][i][j+1][k]));
      real wtmp=fabs(0.5*(uvw[Comp::w()][i][j][k]+uvw[Comp::w()][i][j][k+1]));
      if (umax<utmp) umax=utmp;
      if (vmax<vtmp) vmax=vtmp;
      if (wmax<wtmp) wmax=wtmp;
      usum += utmp;
      vsum += vtmp;
      wsum += wtmp;
      icount++;
    }
    boil::cart.max_real(&umax);
    boil::cart.max_real(&vmax);
    boil::cart.max_real(&wmax);
    boil::cart.sum_real(&usum);
    boil::cart.sum_real(&vsum);
    boil::cart.sum_real(&wsum);
    boil::cart.sum_int(&icount);
    usum /= real(icount);
    vsum /= real(icount);
    wsum /= real(icount);
    boil::oout<<"velocity= "<<time.current_time()<<" "
                <<umax<<" "<<vmax<<" "<<wmax<<" "
                <<usum<<" "<<vsum<<" "<<wsum<<"\n";

    if(time.current_step() % nint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw, c, press,"uvw-c-press",  time.current_step());
      boil::plot->plot(xyz, c, kappa,"xyz-c-kappa",  time.current_step());
    }

  }
#endif
  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
