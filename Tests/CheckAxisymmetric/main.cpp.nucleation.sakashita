#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#define AXISYMMETRIC
#define INVERTED
#define USE_PHASE_VEL_VOF
//#define USE_PHASE_VEL_EFD
#define USE_SOLID
//#define USE_BIG
//#define OUTLET_VISC
#define CASE_1 /* water at 44.7 bar or at 22.3 bar */

/******************************************************************************/
int main(int argc, char ** argv) {

  boil::timer.start();

  if(argc<3){
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin glevel"<<"\n";

    exit(0);
  }

/******************************************************************************/
/* ------------ input from command line */
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]); /* domain dimensions */ 
  boil::oout<<"glevel= "<<gLevel<<"\n";

/******************************************************************************/
/* ------------ rescaling factors */
  const real xmult = 1e6;
  const real tmult = 1e6;
  const real mmult = xmult*tmult;

/******************************************************************************/
/* ------------ boundary or initial conditions */
  const real tsat0 = 0.0;
  const real tout = tsat0;
  const real cangle = 10.;

#ifdef CASE_1
  const real twall = tsat0 + 1.824;
  const real tsat0_K = 257.+273.15;
#else
  const real twall = tsat0 + 2.694;
  const real tsat0_K = 217.24+273.15;
#endif
  const real twall0 = twall;

#ifndef USE_BIG
  const real tseed = twall0-0.001;  // when temp of nucleation site reaches tseed, next ...
#endif

/******************************************************************************/
/* ------------ values to be directly rescaled */
  real Mv = 18.015e-3; /* kg/mol */
  real R  = 8.3144621; /* [J/molK] */
  real gravity = boil::g; /* m/s2 */

  real liquid_drhodt=-1.6;  /* [kg/m3K] */
  real vapor_drhodt=-0.101; /* kg/m3K] */

#ifndef USE_BIG
  /* nucleation parameters */
  real zplant= 0.05*0.001; // when bottom of bubble reaches zplant, next seed is set
  real seedper = 1e-3; /* s */
#endif

  /* natural convection BL thickness */
  real ztconst = 0.324e-3;

#ifdef CASE_1
  real qflux=7.29*1000.0;     // heater power [W/m2]
  real latent=1677.7*1000.0;
#else
  real qflux=12.2*1000.0;     // heater power [W/m2]
  real latent=1865.02*1000.0;
#endif

  /* rescaling */
  gravity *= xmult/tmult/tmult; /* [m/s2] */
  liquid_drhodt *= mmult/xmult/xmult/xmult;   //[kg/m3K]
  vapor_drhodt  *= mmult/xmult/xmult/xmult;  //[kg/m3K]
  latent *= xmult*xmult/tmult/tmult; /* [m2/s2] */
  R *= mmult*xmult*xmult/tmult/tmult; /* [kgm2/s2/mol/K] */

  seedper *= tmult;
  zplant *= xmult;
  ztconst *= xmult;

  qflux *= mmult/tmult/tmult/tmult;     // [kg/s3]

/******************************************************************************/
/* ------------ numerical simulation settings */

  /* total number of steps */
  const int ndt = 700000;
  /* steps per backup */
  const int n_per_backup= 10000;

  /* if yes, plotting each tperlot seconds. Else, each n_per_plot steps */
  const bool use_t_per_plot = false;
  const real t_per_plot = 1.0e-3*tmult;
  const int n_per_plot = 1000*gLevel;

  const real surftens_dt_coef = 10.;
  const real initdtcoef = 1./30.;

  /* cfl with and without interfaces */
  const real cfl_with = 0.05;
  const real cfl_wo   = 0.2;

#ifdef USE_BIG
  /* radius of init bubble in terms of dxmin */
  const real R0mult = 5.;
#endif

/* ------------ optional simulation settings */

  /* multigrid */
  const bool multigrid_stop_if_diverging = true;
  //const bool multigrid_stop_if_diverging = false;

  const int multigrid_min_cycles = 3;
  const int multigrid_max_cycles = 10+gLevel/2;

  /* vof */
  const CurvMethod curv_method = CurvMethod::HF();
  const TopoMethod topo_method = TopoMethod::Hybrid();

  const bool detachment_model = false;
  const bool subgrid_method = true; /* use slic subgrid */
  const bool use_fs_interp = false;
  const bool store_pressure_extrap = false;
  const int niter_pressure_extrap = 500; 

/******************************************************************************/
/* ------------ material properties */
#ifdef CASE_1  
  const real muv = 1.776e-5;
  const real rhov = 22.5504;
  const real cpv = 3959.9*rhov;
  const real lambdav = 0.0534;

  const real mul = 1.031e-4;
  const real rhol = 788.5849;
  const real cpl = 4945.7*rhol;
  const real lambdal = 0.6097;

  const real sig = 0.024;

#else
  const real muv = 1.634e-5;
  const real rhov = 11.17922;
  const real cpv = 3114.8052*rhov;
  const real lambdav = 0.042882509;
  
  const real mul = 1.228e-4;
  const real rhol = 842.969;
  const real cpl = 4599.44*rhol;
  const real lambdal = 0.61293;

  const real sig = 0.034;
#endif

  /* heater */
  const real rhosol = 8908.0;
  const real cpsol = 444.0*rhosol;
  const real lambdasol = 90.9;

/******************************************************************************/
/* ------------ domain dimensions */
  const int NX1  = 25*gLevel;
  const int NX2  =  7*gLevel;
  const int NZ0 = std::max(4,3*gLevel);
  const int NZ1 = 64*gLevel;

#ifdef CASE_1
  real LX1 =  0.1e-3;
  real LX2 =  0.15e-3;
#else
  real LX1 =  0.3e-3;
  real LX2 =  0.15e-3;
#endif
  real LZ0 = -8.0e-6;

  LX1 *= xmult;
  LX2 *= xmult;
  LZ0 *= xmult;
  
/******************************************************************************/
/* ------------ calculated values */
  const real LZ1  = LX1/real(NX1)*real(NZ1);
  const real dxuni = LX1/real(NX1);

#ifdef OUTLET_VISC
  /* settings for increased viscosity */
  const real z0=0.9*LZ1;
  const real z1=LZ1;
#endif

  /* settings for calculating xyz extents */
  const real zft=LZ1;

  /* heater power */
  real qsrc=qflux/fabs(LZ0);  // [W/m3]
  boil::oout<<"#qsrc= "<<qsrc<<" qflux= "<<qflux<<"\n";

/******************************************************************************/
/* ------------- setup finished */
/******************************************************************************/
/* below this line, NO VALUES AND SETTINGS CAN BE ENTERED! */
/******************************************************************************/

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx1( Range<real>(0.0,LX1), NX1, Periodic::no() );
  Grid1D gx2( Range<real>(LX1,LX2),
              Range<real>(dxuni,3.0*dxuni),
              NX2, Periodic::no() );
  Grid1D gx ( gx1, gx2, Periodic::no(), BndGrid::symmetry(), BndGrid::wall());
  Grid1D gz0( Range<real>(LZ0, 0.0), NZ0, Periodic::no() );

  Grid1D gz1( Range<real>(0.0, LZ1), NZ1, Periodic::no() );
  Grid1D gz ( gz0, gz1, Periodic::no());

  /*---------+
  |  domain  |
  +---------*/
  Body floor("floor.stl");
#ifdef USE_SOLID
  #ifndef AXISYMMETRIC
  Domain d(gx, gx, gz, & floor);
  #else
  Axisymmetric d(gx,gz,dxuni,&floor);
  #endif
#else
  #ifndef AXISYMMETRIC
  Domain d(gx, gx, gz1);
  #else
  Axisymmetric d(gx,gz1,dxuni);
  #endif
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d), uvw_2(d);       // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate
  Scalar auxscalar(d);                // micro-layer film thickness
  Scalar mu_t(d);                  // eddy viscosity

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

    uvw_1(m)=uvw(m).shape();
    uvw_2(m)=uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  mu_t = p.shape();
  kappa = p.shape();

  c = p.shape();
  g = c.shape();
  auxscalar = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
#ifdef USE_SOLID
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), twall ) );
#endif
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),tout) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d), heater(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);

  /* nickel */
  heater.rho    (rhosol);
  heater.cp     (cpsol);
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
#ifndef INVERTED
    zero = &liquid;
    one = &vapor;
#endif
  Matter mixed(*one,*zero, &c);
  mixed.sigma(sig);

  /* rescaling */
  vapor.rescale(xmult,tmult,mmult);
  liquid.rescale(xmult,tmult,mmult);
  mixed.rescale(xmult,tmult,mmult);
  heater.rescale(xmult,tmult,mmult);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = surftens_dt_coef*pow(vapor.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  Times time(ndt, dt);
  time.print_time(false);
  time.set_coef_dec(0.75);
  time.set_dt(dt*initdtcoef);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solverCGdi = new CG(d, Prec::di());
  Krylov * solverBICG = new BiCGS(d, Prec::di());

  Krylov * solver = solverCGic;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
#ifdef USE_PHASE_VEL_VOF
  Vector & uvwvof = uvw_1;
#else
  Vector & uvwvof = uvw;
#endif
#ifndef AXISYMMETRIC
  VOF conc(c, g, kappa, uvwvof, time, solver);
#else
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
#endif
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  if(subgrid_method) {
#ifdef INVERTED 
    conc.set_subgrid_method(SubgridMethod::SLICliquid());
#else
    conc.set_subgrid_method(SubgridMethod::SLICgas());
#endif
  } else {
    conc.set_subgrid_method(SubgridMethod::None());
  }

  /* 1-cangle */
#ifndef INVERTED
  cangle = 180.-cangle;
#endif
  conc.set_cangle(cangle);
  /* liquid-cangle */
#ifndef INVERTED
  cangle = 180.-cangle;
#endif

#ifdef AXISYMMETRIC
  if(detachment_model) {
  #ifndef INVERTED
      conc.set_wall_curv_method(CurvMethod::HFmixedXZ(),Sign::pos(),cangle);
  #else
      conc.set_wall_curv_method(CurvMethod::HFmixedXZ(),Sign::neg(),cangle);
  #endif
  } else {
  #ifndef INVERTED
      conc.set_wall_curv_method(CurvMethod::HFmixedXZ(),Sign::pos());
  #else
      conc.set_wall_curv_method(CurvMethod::HFmixedXZ(),Sign::neg());
  #endif 
  }
#else
  conc.set_wall_curv_method(CurvMethod::none());
#endif

  /* enthalpy equation */
#ifndef VARIABLE
  TIF tsat(tsat0);
#else
  const real resist = pow(tsat0_K,1.5)/2.0/vapor.rho()->value()/latent/sqrt(Mv/(2.0*boil::pi*R));
  boil::oout<<"Mass transfer resistance: "<<resist<<boil::endl;
  TIF tsat(tsat0, latent, resist, &mixed, *conc.topo.adens, mflx);
  tsat.set_weak_limiting(tsat0,twall);
#endif

#ifdef USE_PHASE_VEL_VOF
  #ifdef USE_PHASE_VEL_EFD
  Vector & uvwenth1 = uvw_1;
  Vector & uvwenth2 = uvw_2;
  //Vector & uvwenth2 = uvw;
  #else
  Vector & uvwenth1 = uvw;
  Vector & uvwenth2 = uvw;
  #endif
#else
  Vector & uvwenth1 = uvw;
  Vector & uvwenth2 = uvw;
#endif

#ifdef USE_SOLID
  /* nucleation site */
  real rseed = 2.0*dxmin;
  #ifdef INVERTED
  Nucleation nucl( &c, &tpr, &q, &time, auxscalar, &mixed, rseed
                 , 0.0e-10, latent, conc.get_cangle());
  #else
  Nucleation nucl( &c, &tpr, &q, &time, auxscalar, &mixed, rseed
                 , 0.0e-10, latent, conc.get_cangle(), Sign::neg());
  #endif
  /* useless microlayer parameter */
  nucl.set_slope(1.0*4.46e-3);
  nucl.set_seed_period(seedper);
#endif

  Matter * sld = NULL;
#ifdef USE_SOLID
  sld = &heater;
#endif

#ifndef AXISYMMETRIC
  EnthalpyFD enthFD      (tpr, q, uvw, uvwenth1, uvwenth2, time, solver  , &mixed,
                          conc.topo, tsat,sld);
#else
  EnthalpyFDaxisym enthFD(tpr, q, uvw, uvwenth1, uvwenth2, time, solver  , &mixed,
                          conc.topo, tsat,sld);
#endif
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  /* phase change */
#ifdef INVERTED
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed, latent, sld);
#else
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed, latent, sld,Sign::neg());
#endif

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",   ts);
    press.load("press",   ts);
    c. load("c", ts);
    tpr.  load("tpr", ts);
#ifdef VARIABLE
    (tsat.tif).load("tif",ts);
#endif
#ifdef USE_SOLID
    nucl. load("nucl", ts);
#endif
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
#ifdef USE_SOLID
    /* set allow_replant */
    if( ns.cfl_max()<=cfl_with && time.dt()<=dt) {
      boil::oout<<"Restart: Allow replant.\n";
      for(int nsd=0; nsd<nucl.size(); nsd++){
        nucl.sites[nsd].set_allow_replant(true);
      }
    } else {
      boil::oout<<"Restart: Deny replant for this step.\n";
    }
#endif
    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
#ifndef USE_BIG    
    for_vijk(c,i,j,k) 
      c[i][j][k] = 1.0;
  #ifndef INVERTED
    for_vijk(c,i,j,k) {
      c[i][j][k] = 1. - c[i][j][k];
    }
  #endif

    /* set seed */
    real zsite=rseed*cos(0.0/180.0*boil::pi);
    nucl.add(Site( 0.000,  0.000, zsite, tseed, zplant));
  #if 1
    /* plant seed from initial step */
    nucl.plant();
    for(int ns=0; ns<nucl.size(); ns++){
      nucl.sites[ns].set_time_seed(0.0);
    }
  #endif
#else
    const real R0 = R0mult*dxmin;
    real radius, zcent, chord;
    const real xcent = 0.0;
    const real V0 = 4./3.*boil::pi*R0*R0*R0;
    boil::droplet_parameters_3D(180.-cangle,V0,radius,zcent,chord);
    auxscalar = 0.0;

  #ifdef AXISYMMETRIC
    boil::setup_circle_xz(auxscalar,radius,xcent,zcent);
    for_avijk(auxscalar,i,j,k)
      auxscalar[i][j][k] = 1. - auxscalar[i][j][k];

    auxscalar.bnd_update();
    auxscalar.exchange_all();

    conc.color_to_vf(auxscalar,c);
    conc.reconstruct_geometry();
    conc.test_reconstruction(conc.color(),c);
  #else
    boil::oout<<"Underdevelopment! Need to add setup sphere. Exiting."
              <<boil::endl;
    exit(0);
  #endif
#endif
    c.bnd_update();
    c.exchange_all();
    conc.init();

    boil::oout<<"BL thickness: "<<ztconst<<boil::endl;

    for_vijk(c,i,j,k) {
      if(tpr.zc(k)<0.0) {
        tpr[i][j][k] = twall0 + tpr.zc(k)/LZ0 * (twall-twall0);
      } else if(conc.color()[i][j][k]<0.5) {
        tpr[i][j][k] = tsat0;
      } else if(tpr.zc(k)<=ztconst) {
        tpr[i][j][k] = twall0 + (tout-twall0)/ztconst * tpr.zc(k);
      } else {
        tpr[i][j][k] = tout;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();
#ifdef VARIABLE
   for_avijk(c,i,j,k) {
     (tsat.tif)[i][j][k] = tpr[i][j][k];
   }
#endif
    conc.init();
    boil::plot->plot(uvw,c,tpr,conc.color(),mdot,(*(conc.topo.adens))
                    ,"uvw-c-tpr-clr-mdot-adens",0);
  }
  input.close();

  /* set iint */
  int iint = int(time.current_time()/t_per_plot);
  boil::oout<<"iint= "<<iint<<"\n";

  /*------------+
  |  time loop  |
  +------------*/
#if 1
  for(time.start(); time.end(); time.increase()) {

    boil::oout << "########################" << boil::endl;
    boil::oout << "# TIME:      " << time.current_time() << boil::endl;
    boil::oout << "# DT:        " << time.dt() << boil::endl;
    boil::oout << "# TIME STEP: " << time.current_step() 
               << "/"             << time.total_steps() << boil::endl;
    boil::oout << "# WTIME:     " << boil::timer.current_min() << boil::endl;
    boil::oout << "########################" << boil::endl;

    /*----------------------------------------------+
    |  reset body force & source term for enthalpy  |
    +----------------------------------------------*/
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    q=0.0; 
    for_vk(tpr,k){
      if((tpr.zc(k)<0.0)){
        for_vij(tpr,i,j){
          q[i][j][k]=qsrc*tpr.dV(i,j,k);
        }
      }
    }

#ifdef VARIABLE
    real maxtif(-100000.);
    real mintif(100000.);
    for_vijk(tpr,i,j,k) {
      if(tsat.tif[i][j][k]>maxtif) maxtif = tsat.tif[i][j][k];
      if(tsat.tif[i][j][k]<mintif) mintif = tsat.tif[i][j][k];
    }
    boil::cart.max_real(&maxtif);
    boil::cart.min_real(&maxtif);
    boil::oout<<"MaxMinTif: "<<time.current_time()<<" " <<maxtif<<" "<<mintif<<boil::endl;
#endif

#ifdef OUTLET_VISC
    /* increase viscosity in outlet region */
    for_avk(c,k){
      if(c.zc(k)>z0){
        real coef=std::min((c.zc(k)-z0)/(z1-z0),1.0);
        for_avij(c,i,j){
          mu_t[i][j][k]= coef * liquid.mu()->value() * 10;
        }
      }
    }
#endif

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* gravity force */
    Comp m = Comp::w();
    for_vmijk(xyz,m,i,j,k){
#ifdef INVERTED
      real phil=c[i][j][k];
      real phiv=1.0-phil;
#else
      real phiv=c[i][j][k];
      real phil=1.0-phil;
#endif
      real deltmp=tpr[i][j][k]-tsat0;
      real rhomix = (liquid.rho()->value() + liquid_drhodt*deltmp)*phil
                  + (vapor.rho()->value()  + vapor_drhodt*deltmp)*phiv;
      if(d.ibody().on(m,i,j,k))
        xyz[m][i][j][k] += -gravity * xyz.dV(m,i,j,k) * rhomix;
    }

    /* surface tension */
    conc.tension(&xyz, mixed,conc.color());

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* essential for moving front */
    ns.discretize( &mu_t );
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    p = 0.0;
    if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);
    //pr.solve(ResRat(1e-6));
    p.exchange();
    ns.project(p);
    press += p;

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        if(pmin>press[i][j][k]) pmin=press[i][j][k];
      }
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        press[i][j][k] -= pmin;
      } else {
        press[i][j][k] = 0.0;
      }
    }
    press.bnd_update();
    press.exchange_all();
    
    ns.cfl_max();

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    conc.advance_phase_change(c);
#ifdef USE_PHASE_VEL_VOF
    conc.extrapolate_velocity(conc.color(),f,one,uvw,uvw_1,ResRat(1e-4),Sign::pos(),true);
  #ifdef USE_PHASE_VEL_EFD
    conc.extrapolate_velocity(conc.color(),f,zero,uvw,uvw_2,ResRat(1e-4),Sign::neg(),false);
  #endif
#endif
    conc.reconstruct_geometry(c);
    conc.advance_geometric(c);

    /*---------------------------+
    |  replant seed or cut neck  |
    +---------------------------*/ 
#ifdef USE_SOLID
    nucl.replant();
#endif

    /* update clr after seed, cutneck and outlet-region */
    c.bnd_update();
    c.exchange_all();
    conc.ancillary();
    conc.totalvol();

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"enthFD");
    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();
    time.control_dt(ns.cfl_max(), cfl_with, dt);

    /*--------------+
    |  output data  |
    +--------------*/
    bool otpcond;
    if(use_t_per_plot) 
      otpcond = time.current_time() / t_per_plot >= real(iint);
    else
      otpcond = time.current_step() / n_per_plot >= real(iint);
    if(otpcond) {
      iint++;
      boil::plot->plot(uvw,c,tpr,conc.color(),mdot,(*(conc.topo.adens))
                     ,"uvw-c-tpr-clr-mdot-adens",iint);
    }

    conc.front_minmax( Range<real>(-LX2,LX2) ,Range<real>(-LX2,LX2)
                      ,Range<real>(0, zft));

    /*--------------+
    |  backup data  |
    +--------------*/
    if((time.current_step()) % n_per_plot == 0 ){
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
#ifdef VARIABLE
      (tsat.tif).save("tif",   time.current_step());
#endif
#ifdef USE_SOLID
      nucl .save("nucl",   time.current_step());
#endif
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    } 
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
#ifdef VARIABLE
      (tsat.tif).save("tif",   time.current_step());
#endif
#ifdef USE_SOLID
      nucl .save("nucl",   time.current_step());
#endif
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      c.rm("c", ts);
      tpr  .rm("tpr", ts);
#ifdef VARIABLE
      (tsat.tif).rm("tif",ts);
#endif
#ifdef USE_SOLID
      nucl .rm("nucl", ts);
#endif
      exit(0); 
    }
  }
#endif

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}
