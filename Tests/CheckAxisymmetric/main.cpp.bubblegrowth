#include "Include/psi-boil.h"

#define SYM
//#define FS_TEST
#define USE_LIQ_VEL_VOF
#define USE_LIQ_VEL_EFD
//#define CARTESIAN

/******************************************************************************/
int main(int argc, char ** argv) {

  boil::timer.start();

  if(argc<3){
    boil::oout<<"Two arguments required!"<<"\n";
    boil::oout<<"./Boil wmin gLevel"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  int gLevel=atoi(argv[2]);
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  /* computed parameters */
  const int NX = 24*gLevel;
#ifdef SYM
  const int NZ = 24*gLevel;
#else
  const int NZ = 48*gLevel;
#endif

  /* domain dimensions (given by problem) */
  const real LX = 187.5e-6;
  const real DX = LX/real(NX);
  const real radius=50.0e-6;

  const real tsat0=373.15;
  const real tout=tsat0+1.25;
  const real dtsatdp=3.0/4.0;
  const real pi=acos(-1.0);

  const real LZ = LX;

  const int mSimple = 1;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(),Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
#ifndef SYM
  Grid1D gz( Range<real>(-LZ,LZ), NZ, Periodic::no() );
#else
  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
#endif

  /*---------+
  |  domain  |
  +---------*/
#ifdef CARTESIAN
  Grid1D gy(DX);
  Domain d(gx,gy,gz);
#else
  Axisymmetric d(gx, gz, DX);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d), uvw_liq(d), uvw2(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);

  Scalar tpr(d), q  (d); // temperature
  Scalar mdot(d);        // phase-change
  Scalar mflx(d); // pc

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_old(m)=uvw(m).shape();
    uvw_liq(m)=uvw(m).shape();
    uvw2(m)=uvw(m).shape();
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();

  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  g = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), tout ) );
#ifdef SYM
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), tout ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), tout ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), tout ) );
#endif
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
  vapor  .cp    (2030*0.597);
  vapor  .lambda(0.025);
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);
  const real latent=2258.0*1e3;
  Matter mixed(liquid, vapor, & c);
  mixed.sigma(5.9e-2);
  boil::oout<<"physical properties\n";

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(vapor.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  //const real tend = 0.003;
  const real tend = 0.0012*1.25; /* 12247 for level 2 */
  const int ndt = tend/dt;
  const int nint = ndt/2;
  const int tint = ndt/25.;
  Times time(ndt, dt);

  /*----------------+
  |  linear solver  |
  +----------------*/
  //Krylov * solver = new CG(d, Prec::ic2());
  Krylov * solver = new BiCGS(d, Prec::di());
  //Krylov * solver = new BiCGS(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 4
  }

  multigrid.stop_if_diverging(false);

  Momentum ns2( uvw2, xyz, time, solver, &mixed);
  Pressure pr2(p, f, uvw2, time, solver, &mixed);

  AC multigrid2( &pr2 );
  multigrid2.min_cycles(6); 
  multigrid2.stop_if_diverging(true);

#ifdef USE_LIQ_VEL_VOF
  Vector & uvwvof = uvw_liq;
#else
  Vector & uvwvof = uvw;
#endif

#ifdef CARTESIAN
  VOF conc(c, g, kappa, uvwvof, time, solver);
#else
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
#endif
  conc.set_curv_method(CurvMethod::HF());  // height function
  conc.set_topo_method(TopoMethod::Hybrid());
  conc.set_wall_curv_method(CurvMethod::none());
  conc.set_use_interp(true);

  TIF tsat(tsat0);
#ifdef USE_LIQ_VEL_EFD
  Vector & uvwenth = uvw_liq;
#else
  Vector & uvwenth = uvw;
#endif

#ifdef CARTESIAN
  EnthalpyFD enthFD      (tpr, q, conc.color(), uvw, uvwenth, uvw, time, solver, &mixed,
                          conc.topo, tsat);
#else
  EnthalpyFDaxisym enthFD(tpr, q, conc.color(), uvw, uvwenth, uvw, time, solver, &mixed,
                          conc.topo, tsat);
#endif
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  PhaseChangeVOF pc(mdot, mflx, tpr, q, conc.color(), g, f, uvw, conc.topo,
                    tsat, time, &mixed, latent);

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",   ts);
    press.load("press",   ts);
    c. load("c", ts);
    tpr.  load("tpr", ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
    for_vijk(c,i,j,k) 
      c[i][j][k] = 0.0;

    const real xcent=0.0;
    const real ycent=0.0;
    const real zcent=0.0;

    boil::setup_circle_xz(cold, radius, xcent, zcent);
    cold.bnd_update();
    cold.exchange_all();
#ifdef CARTESIAN
    c = cold;
#else
    conc.color_to_vf(cold,c);
#endif
    for_vijk(c,i,j,k)
      c[i][j][k] = 1.0-c[i][j][k];

    c.bnd_update();
    c.exchange_all();
  
    for_vijk(c,i,j,k) {
      real dist = pow(c.xc(i)-xcent,2.0)
                 +pow(c.zc(k)-zcent,2.0);

      real radius2=70.0e-6;
      real coef1 =  2.28023719E+05;
      real coef2 = -8.71920915E+09;
      real coef3 = -7.28351952E+14;
      real coef4 =  6.46735617E+19;
      real coef5 = -1.35949950E+24;
      if (dist<=pow(radius,2.0)) {
        tpr[i][j][k] = tsat0;
      } else if(dist<=pow(radius2,2.0)) {
        real xi = sqrt(dist) - radius;
        real ttmp = coef5*pow(xi,5.0) + coef4*pow(xi,4.0) + coef3*pow(xi,3.0)
                  + coef2*pow(xi,2.0) + coef1*xi + tsat0;
        tpr[i][j][k] = std::min(tout,ttmp);
      } else {
        tpr[i][j][k] = tout;
      }
    }
    tpr.exchange_all();

    boil::plot->plot(uvw,c,tpr,press,mdot,mflx,"uvw-c-tpr-press-mdot-mflx",0); 
    //exit(0);

  } // restart
  conc.init();
  conc.ancillary();
  input.close();

  /* set iint */
  int iint = int(time.current_time()/tint) + 1;
  boil::oout<<"iint= "<<iint<<"\n";

#ifdef FS_TEST
  #if 0
  Comp mcomp = Comp::i();
  #else
  Comp mcomp = Comp::k();
  #endif
  for_vmijk((*conc.topo.fs),mcomp,i,j,k) {
    real val = (*conc.topo.fs)[mcomp][i][j][k];
  #if 0
    real pos = (*conc.topo.fs).zc(mcomp,k);
    real sig = 1.;
  #else
    real pos  = (*conc.topo.fs).xc(mcomp,i);
    real pos2 = (*conc.topo.fs).zc(mcomp,k);
    real sig = (pos2>0.)-(pos2<0.);
  #endif
    if(boil::realistic(val)) {
      boil::oout<<i<<" "<<j<<" "<<k<<" "<<val<<" "<<sig*sqrt(radius*radius-pos*pos)
                <<" | "<<val/sig/sqrt(radius*radius-pos*pos)-1.
                <<boil::endl;
    } 
  }

  exit(0);
#endif

  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
#if 1
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"enthFD");

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);
#endif

    // store velocity
    for_m(m)
      uvw_old(m) = uvw(m);
    // store color function
    cold = c;

    /* inner loop */
    for(int mloop=0; mloop<mSimple; mloop++) {

      //reset body force
      for_m(m)
        for_avmijk(xyz,m,i,j,k)
          xyz[m][i][j][k]=0.0;

      /* surface tension */
      conc.tension(&xyz, mixed,conc.color());

      /* essential for moving front */
      ns.discretize();
      pr.discretize();
      pr.coarsen();

      /* momentum */
      ns.new_time_step(uvw_old);
      ns.convection();
      ns.grad(press);
      ns.solve(ResRat(1e-8));

      p=0.0;
      if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);

      ns.project(p);
      press += p;
      press.exchange();

      ns.cfl_max();

      conc.extrapolate_velocity(conc.color(),f,&mixed,uvw,uvw_liq,ResRat(1e-8),Sign::pos());
      //conc.extrapolate_velocity(conc.color(),f,&mixed,uvw,uvw_gas,ResRat(1e-8),Sign::neg());
      conc.advance(cold);
      conc.totalvol();

      //pc.modify_vel(uvw,c,cold);
    }

    conc.front_minmax();

    /* dt control */
    time.control_dt(ns.cfl_max(),0.10,dt);

    /* output data */
    if(time.current_step() % tint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw,c,tpr,press,mdot,mflx,"uvw-c-tpr-press-mdot-mflx",iint);
      iint++;
    }

    if(time.current_step() % nint == 0) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c    .save("c"   ,  time.current_step());
      tpr  .save("tpr" ,  time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << "\n";
        output << time.current_time()+time.dt() << "\n";
        output << time.dt() << "\n";
        output.close();
      }
    }

    if( boil::timer.current_min() > wmin-12.0
      || time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c .save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
      std::fstream output;
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      c .rm("c", ts);
      tpr  .rm("tpr", ts);
      exit(0); 
    }
  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
