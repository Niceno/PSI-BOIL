#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

//#define USE_SOLID
//#define SETUP_ONLY
#define USE_BOTTOM_DIRICHLET

/******************************************************************************/
int main(int argc, char ** argv) {

  boil::timer.start();

  if(argc<6){
    boil::oout<<"Five command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin glevel cangle deltat lz[in um]"<<"\n";

    exit(0);
  }

/******************************************************************************/
/* ------------ input from command line */
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]); /* domain dimensions */
  boil::oout<<"glevel= "<<gLevel<<"\n";

  const real cangle = atof(argv[3]); /* contact angle */
  boil::oout<<"cangle= "<<cangle<<"\n";

  const real deltat = atof(argv[4]); /* superheat */
  boil::oout<<"deltat= "<<deltat<<"\n";

  real LZ1 = atof(argv[5])*1e-6; /* distance between plates */
  boil::oout<<"LZ= "<<LZ1<<"\n";

/******************************************************************************/
/* ------------ boundary or initial conditions */
  const real tsat0 = 0.0;

  const real twall = tsat0 + deltat;
  const real tsat0_K = 273.15+47.585;
  const real tout = twall;

  const real twall0 = twall;

/******************************************************************************/
/* ------------ numerical simulation settings */

  /* total number of steps */
  const int ndt = 10e6; /* inconsequential */

  /* total time */
  const real tend = 10e-3;

  /* steps per backup */
  const int n_per_backup = 10000;

  /* if yes, plotting each t_per_plot seconds. Else, each n_per_plot steps */
  const bool use_t_per_plot = true;
  const real t_per_plot = 0.02e-3;
  const int n_per_plot = ndt/100;

  /* dt settings */
  //const real surftens_dt_coef = 5.;
  const real surftens_dt_coef = 10.;
  const real initdtcoef = 1./10.;

  /* cfl with and without interfaces */
  const real cfl_with = 0.05; //0.01 0.05

/* ------------ optional simulation settings */

  /* multigrid */
  const bool multigrid_stop_if_diverging = true;
  const bool multigrid_use_linf = true;
  const int multigrid_min_cycles = 1;
  const int multigrid_max_cycles = 20;

  MaxIter multigrid_mm_smooth1 = MaxIter(70);
  MaxIter multigrid_mm_smooth2 = MaxIter(70);
  MaxIter multigrid_mm_solve = MaxIter(200);
  MaxIter multigrid_mm_stale1 = MaxIter(45);
  MaxIter multigrid_mm_stale2 = MaxIter(-1);
  std::array<MaxIter,3> multigrid_mi = {multigrid_mm_smooth1,multigrid_mm_smooth2,multigrid_mm_solve};
  std::array<MaxIter,3> multigrid_mstale = {multigrid_mm_stale1,multigrid_mm_stale1,multigrid_mm_stale2};

  ResRat multigrid_rr = ResRat(-1.);
  ResTol multigrid_rt = ResTol(0.5);

  const Cycle multigrid_cycle0 = Cycle::Z();
  const Cycle multigrid_cycle1 = Cycle::F();

  /* vof */
  const CurvMethod curv_method = CurvMethod::HF();
  const CurvMethod wall_curv_method = CurvMethod::HFnormalXZ();
  const TopoMethod topo_method = TopoMethod::Hybrid();

  const bool subgrid_method = true; /* use slic subgrid */
  const bool use_fs_interp = false;
  const bool store_pressure_extrap = false;
  const int niter_pressure_extrap = 1000;

  /* phase change */
  const AccuracyOrder ao_pc = AccuracyOrder::FourthUpwind();

/******************************************************************************/
/* ------------ material properties */
  /* from NIST webbook (R113) */
  const real Mv = 187.376e-3;
  const real muv = 1.0279e-5;
  const real rhov = 7.4244;
  const real cpv = 0.69143e3*rhov;
  const real lambdav = 0.0095063;

  const real mul = 0.00049040;
  const real rhol = 1508.2;
  const real cpl = 0.94037e3*rhol;
  const real lambdal = 0.063655;

  const real sig = 0.014698;
  const real latent=146.7e3; /* https://www.researchgate.net/figure/Physical-properties-of-R113-and-its-vapor-R113v_tbl2_318547375 */

  const real betal = 0.;
  const real betav = 0.;//1./tsat0_K; /* ideal gas approximation */

  /* heater */
  /* glass */
  const real rhosol = 2200.0;
  const real cpsol = 670*rhosol;
  const real lambdasol = 1.4;

  const real Jal = cpl*(twall-tsat0)/(latent*rhov);
  boil::oout << "Jal= "<<Jal<<boil::endl;

/******************************************************************************/
/* ------------ domain dimensions */
  real LX1 = 6.4e-3;
  real LX2 = 3.5e-3;
  real LX3 = 5.0e-3;

  const int NX1 = 2*4*128*gLevel;

  /* in experiment, ITO: 200 nm, glass: 5 mm;
     here, glass: 4*DX0 */
#ifdef USE_SOLID
  const int NZ0 = 4;
#else
  const int NZ0 = 0;
#endif

/******************************************************************************/
/* ------------ calculated values */
  const real DX0 = LX1/real(NX1);
  const real DZ0 = DX0;

  int NZ(0);
  const int NZ1 = int(0.5*LZ1/DZ0+1e-5)-NZ0;
  boil::oout<<"NZ: "<<0.5*LZ1/DZ0<<" "<<NZ1<<boil::endl;
  NZ = NZ0+NZ1;

  const real LZ0 = -NZ0*DZ0;

  /* other parameters */
  const real xmax=0.95*LX1; /* only liquid beyond 0.95*LX1 */

/******************************************************************************/
/* ------------- setup finished */
/******************************************************************************/
/* below this line, NO VALUES AND SETTINGS CAN BE ENTERED! */
/******************************************************************************/

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx1( Range<real>(0.0,LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
  Grid1D & gx = gx1;

  Grid1D gz1( Range<real>(0.0, LZ1/2.), NZ1, Periodic::no(), BndGrid::wall(), BndGrid::symmetry() );
  Grid1D & gzf = gz1;
#ifdef USE_SOLID
  Grid1D gz0( Range<real>(LZ0, 0.0), NZ0, Periodic::no() );
  Grid1D gz(gz0, gzf, Periodic::no(), BndGrid::wall(), BndGrid::symmetry());
#endif

  /*---------+
  |  domain  |
  +---------*/
  Body floor("floor.stl");
#ifdef USE_SOLID
  Axisymmetric d(gx,gz,DX0,&floor);
#else
  Axisymmetric d(gx,gzf,DX0);
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d), uvw_2(d);       // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

    uvw_1(m)=uvw(m).shape();
    uvw_2(m)=uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::symmetry() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  kappa = p.shape();
  g = p.shape();

  /* should avoid spurious flows from the outlet */
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), 1.0 ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
#ifdef USE_BOTTOM_DIRICHLET
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), twall ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
#endif
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d), heater(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  vapor  .mmass (Mv);
  vapor  .beta  (betav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);
  liquid.mmass (Mv);
  liquid.beta  (betal);

  /* heater */
  heater.rho    (rhosol);
  heater.cp     (cpsol);
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
  Matter mixed(*one,*zero, &c);
  mixed.sigma(sig);
  mixed.latent(latent);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = surftens_dt_coef*pow(vapor.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  Times time(ndt, dt);
  time.set_coef_dec(0.75);
  time.set_dt(dt*initdtcoef);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Linear * solverCGic = new CG(d, Prec::ic2());
  Linear * solverCGdi = new CG(d, Prec::di());
  Linear * solverBICG = new BiCGS(d, Prec::di());

  Linear * solver = solverCGic;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.use_linf_error(multigrid_use_linf);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
  Vector & uvwvof = uvw_1;
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
 
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  if(subgrid_method) {
    conc.set_subgrid_method(SubgridMethod::SLICliquid());
  } else {
    conc.set_subgrid_method(SubgridMethod::None());
  }

  conc.set_cangle(cangle);
  conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle);
  
  /* enthalpy equation */
  TIF tsat(tsat0);

  Vector & uvwenth1 = uvw_1;
  Vector & uvwenth2 = uvw_2;

  /* is there conjugate heat transfer? */
  Matter * solid_ptr = NULL;
#ifdef USE_SOLID
  solid_ptr = &heater;
#endif

  /* function kernel of heat transfer */
  CommonHeatTransfer cht(tpr,conc.topo,tsat,
                         &mixed,solid_ptr);

  EnthalpyFDaxisym enthFD(tpr, q, uvw, uvwenth1, uvwenth2, time, solver  , &mixed,
                          cht,solid_ptr);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  /* phase change */
  PhaseChange4 pc(mdot, mflx, q, g, f, uvw, cht, time, &mixed, solid_ptr);
  pc.set_accuracy_order(ao_pc);

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",   ts);
    press.load("press",   ts);
    c. load("c", ts);
    tpr.  load("tpr", ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
    boil::setup_circle_xz(conc.color(), 0.5*LZ1, 0.0, 0.5*LZ1);
    conc.color_to_vf(conc.color(),c);
    for_vijk(c,i,j,k) {
      c[i][j][k] = 1. - c[i][j][k];
    }
    for_avijk(c,i,j,k) {
      if(d.ibody().off(i,j,k))
        c[i][j][k] = -1.;
    }
    c.bnd_update();
    c.exchange_all();

    conc.init();

    tpr = tout;
    for_avijk(tpr,i,j,k) {
      if(d.ibody().on(i,j,k)) {
        if(conc.color()[i][j][k]<0.5)
          tpr[i][j][k] = tsat0;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();
    boil::plot->plot(uvw,c,tpr,press,mdot,mflx,
                    "uvw-c-tpr-press-mdot-mflx",
                     0);
    
    std::fstream output;
    std::stringstream ss;
    ss <<"profile-"<<0<<".txt";
    output.open(ss.str(), std::ios::out);
    boil::output_profile_xz(conc.color(),output,Range<int>(NZ0+1,NZ),
                            Range<int>(-1,-2),LX1);
    boil::cart.barrier();
    output.close();
  }
  input.close();

  /* set iint */
  int iint;
  if(use_t_per_plot) {
    iint = time.current_time() / t_per_plot;
  } else {
    if(time.current_time()<time.dt()) {
      iint = 0;
    } else {
      iint = time.current_step() / n_per_plot;
    }
  }

  boil::oout<<"iint= "<<iint<<"\n";
  cht.init();
 
  /*------------+
  |  time loop  |
  +------------*/
#ifndef SETUP_ONLY
  for(time.start(); time.end(); time.increase()) {

    /* new time step */
    conc.new_time_step();
    cht.new_time_step();

    /*----------------------------------------------+
    |  reset body force & source term for enthalpy  |
    +----------------------------------------------*/
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    /* surface tension */
    conc.tension(&xyz, mixed,conc.color());

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step(&f);

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    /* pressure */
    p = 0.0;
    if(multigrid.cycle(multigrid_cycle0,
                       multigrid_cycle1,
                       multigrid_rt,
                       multigrid_rr,
                       multigrid_mi,
                       multigrid_mstale))
      OMS(converged);

    p.exchange();
    ns.project(p);
    press += p;

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        if(pmin>press[i][j][k]) pmin=press[i][j][k];
      }
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        press[i][j][k] -= pmin;
      } else {
        press[i][j][k] = 0.0;
      }
    }

    press.bnd_update();
    press.exchange_all();

    ns.cfl_max();

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    conc.advance_with_extrapolation(false,ResTol(1e-6),uvw,f,
                                    one,&uvw_1,
                                    zero,&uvw_2);

    for_vijk(c,i,j,k) {
      if(c.xc(i)>=(xmax-c.dxc(i))) {
        for_avjk(c,j,k) {
          c[i][j][k]= 1.0;
        }
      }
    }

    c.bnd_update();
    c.exchange_all();
    conc.ancillary();
    conc.totalvol();

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"enthFD");

    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();

    /* front */
    conc.front_minmax( Range<real>(0,LX1) ,Range<real>(-LX1,LX1)
                      ,Range<real>(0, LZ1));

    time.control_dt(ns.cfl_max(), cfl_with, dt);

    /*--------------+
    |  output data  |
    +--------------*/
    bool otpcond;
    if(use_t_per_plot)
      otpcond = time.current_time() / t_per_plot >= real(iint);
    else
      otpcond = time.current_step() / n_per_plot >= real(iint);
    if(otpcond) {
      iint++;
      boil::plot->plot(uvw,c,tpr,press,mdot,mflx,
                      "uvw-c-tpr-press-mdot-mflx",
                       iint);
      std::fstream output;
      std::stringstream ss;
      ss <<"profile-"<<iint<<".txt";
      output.open(ss.str(), std::ios::out);
      boil::output_profile_xz(conc.color(),output,Range<int>(NZ0+1,NZ),
                              Range<int>(-1,-2),LX1);
      boil::cart.barrier();
      output.close();
    }

    /*--------------+
    |  backup data  |
    +--------------*/
    if((time.current_step()) % n_per_backup == 0 ){
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()
      || time.current_time()>tend) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      if(time.current_time()<tend) {
        output.open("run.txt", std::ios::out);
        output << 0 << boil::endl;
        output.close();
      }
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      c.rm("c", ts);
      tpr  .rm("tpr", ts);

      break;
    }
  }
#endif

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}



