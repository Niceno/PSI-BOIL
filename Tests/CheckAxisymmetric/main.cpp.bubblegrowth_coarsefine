#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#define SYM
#define USE_SECOND_ORDER
//#define USE_UNCOND_EXTRP
//#define DISCARD_POINTS
#define CASE 1
/* case 1 = axisymmetric
        2 = cartesian 2D
        3 = cartesian 3D
*/

/******************************************************************************/
int main(int argc, char ** argv) {

#if CASE == 3
    boil::oout<<"3D unsupported."
    boil::oout<<"\n";

    exit(0);
#endif

  boil::timer.start();

  if(argc<3){
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin glevel"<<"\n";

    exit(0);
  }

/******************************************************************************/
/* ------------ input from command line */
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]); /* domain dimensions */ 
  boil::oout<<"glevel= "<<gLevel<<"\n";

/******************************************************************************/
/* ------------ rescaling factors */
  const real xmult = 1e0;
  const real tmult = 1e0;
  const real mmult = xmult*tmult;

/******************************************************************************/
/* ------------ boundary or initial conditions */
  const real tsat0 = 373.15;
  const real tout = tsat0+1.25;

/******************************************************************************/
/* ------------ numerical simulation settings */

  /* total time */
  //const real tend = 0.003;
  const real tend = 0.0012*1.25; /* 12247 for level 2 */

  /* number of backup points */
  const int n_bck = 2;

  /* number of plot points */
  const int n_plot = 25;

  /* dt settings */
  const real surftens_dt_coef = 10.;

  /* cfl limit */
  const real cfl_limit = 0.1;

/* ------------ optional simulation settings */

  /* multigrid */
  const bool multigrid_stop_if_diverging = true;
  //const bool multigrid_stop_if_diverging = false;

  const int multigrid_min_cycles = 1;
  const int multigrid_max_cycles = 20;

  /* vof */
  const CurvMethod curv_method = CurvMethod::HF();
  const TopoMethod topo_method = TopoMethod::Hybrid();
  const CurvMethod wall_curv_method = CurvMethod::none();

  const bool use_fs_interp = false;
  const bool store_pressure_extrap = true;
  const int niter_pressure_extrap = 1000;

  /* enthalpy fd */
  const bool no_solid_acceleration = true;
  //const bool no_solid_acceleration = false;

/******************************************************************************/
/* ------------ material properties */
  const real muv = 1.255e-5;
  const real rhov = 0.597;
  const real cpv = 2030*rhov;
  const real lambdav = 0.025;

  const real mul = 0.28e-3;
  const real rhol = 958.4;
  const real cpl = 4.2159e3*rhol;
  const real lambdal = 679e-3;

  const real sig = 59e-3;
  const real latent = 2.258e6;

/******************************************************************************/
/* ------------ domain dimensions */
  const int NX = 24*gLevel;
#ifdef SYM
  const int NZ = 24*gLevel;
#else
  const int NZ = 48*gLevel;
#endif

  const real LX = 187.5e-6;
  const real LZ = LX;

  const real DX = LX/real(NX);
  const real radius=50.0e-6;

/******************************************************************************/
/* ------------- setup finished */
/******************************************************************************/
/* below this line, NO VALUES AND SETTINGS CAN BE ENTERED! */
/******************************************************************************/

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
#ifndef SYM
  Grid1D gz( Range<real>(-LZ,LZ), NZ, Periodic::no() );
#else
  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
#endif

  /*---------+
  |  domain  |
  +---------*/
#if CASE == 1
  Axisymmetric dfine(gx, gz, DX);
  Axisymmetric d(dfine,Step(2),Step(2));
#elif CASE == 2
  Grid1D gy(DX);
  Domain dfine(gz,gy,gz);
  Domain d(dfine,Step(2),Step(1),Step(2));
#else
  Domain dfine(gz,gz,gz);
  Domain d(dfine,Step(2));
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d);                 // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration

  /* the following variables have to exist on the fine grid: */
  Scalar tpr_f(dfine), q_f  (dfine);           // temperature
  Scalar mdot_f(dfine), mflx_f(dfine);         // phase-change rate

  Vector uvw_f(dfine);
  Scalar c_f(dfine), g_f(dfine), kappa_f(dfine); // concentration
  Scalar f_f(dfine);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
#if CASE == 1
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw_f.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#else
  #ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw_f.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #else
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::imin(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #endif
#endif
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw_f.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
#if CASE < 3
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_f.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw_f.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#else 
  #ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
    uvw_f.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #else
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::jmin(), BndType::outlet() ) );
    uvw_f.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #endif
#endif
    uvw_1(m)=uvw(m).shape();
  }

#if CASE == 1
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c_f.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#else
  #ifdef SYM
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c_f.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #else
  c.bc().add( BndCnd( Dir::imin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::imin(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  #endif
#endif
#ifdef SYM
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c_f.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
#if CASE < 3
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
  c_f.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c_f.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#else
  #ifdef SYM
  c.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  c_f.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #else
  c.bc().add( BndCnd( Dir::jmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::jmin(), BndType::outlet() ) );
  c_f.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  #endif
#endif

  press=c.shape();
  p=c.shape();
  kappa=c.shape();

  f = p.shape();
  g = c.shape();

  kappa_f=c_f.shape();

  f_f = c_f.shape();
  mdot_f = c_f.shape();
  mflx_f = c_f.shape();
  q_f = c_f.shape();
  g_f = c_f.shape();

#if CASE == 1
  tpr_f.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr_f.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), tout ) );
#else
  #ifdef SYM
  tpr_f.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr_f.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), tout ) );
  #else
  tpr_f.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), tout ) );
  tpr_f.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), tout ) );
  #endif
#endif
#ifdef SYM
  tpr_f.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  tpr_f.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), tout ) );
#else
  tpr_f.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), tout ) );
  tpr_f.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), tout ) );
#endif
#if CASE < 3
  tpr_f.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr_f.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) ); 
#else
  #ifdef SYM
  tpr_f.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  tpr_f.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), tout ) );
  #else
  tpr_f.bc().add( BndCnd( Dir::jmin(), BndType::dirichlet(), tout ) );
  tpr_f.bc().add( BndCnd( Dir::jmax(), BndType::dirichlet(), tout ) );
  #endif
#endif

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);

  Matter mixed(liquid, vapor, & c);
  mixed.sigma(sig);
  mixed.latent(latent);

  Matter vapor_f(dfine), liquid_f(dfine);
  vapor_f  .mu    (muv);
  vapor_f  .rho   (rhov);
  vapor_f  .cp    (cpv);  // J/m3
  vapor_f  .lambda(lambdav);
  liquid_f.mu    (mul);
  liquid_f.rho   (rhol);
  liquid_f.cp    (cpl);   // J/m3
  liquid_f.lambda(lambdal);

  Matter mixed_f(liquid_f, vapor_f, & c_f);
  mixed_f.sigma(sig);
  mixed_f.latent(latent);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = surftens_dt_coef*pow(vapor.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
  const int ndt = tend/dt;
  const int n_per_backup = ndt/n_bck;
  const int n_per_plot = ndt/n_plot;

  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  boil::oout<<"main:nparams= "<<n_per_plot<<" "<<n_per_backup<<"\n";
  Times time(ndt, dt);
  time.set_coef_dec(0.75);
  time.set_dt(dt);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solverCGdi = new CG(d, Prec::di());
  Krylov * solverBICG = new BiCGS(d, Prec::di());

  Krylov * solver = solverCGic;

  Krylov * solverCGic_f = new CG(dfine, Prec::ic2());
  Krylov * solverCGdi_f = new CG(dfine, Prec::di());
  Krylov * solverBICG_f = new BiCGS(dfine, Prec::di());

  Krylov * solver_f = solverCGic_f;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
  Vector & uvwvof = uvw_1;
#if CASE > 1
  VOF conc(c, g, kappa, uvwvof, time, solver);
#else
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
#endif
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_wall_curv_method(wall_curv_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  /* solver on the fine grid */
  Vector & uvwvof_f = uvw_f;
#if CASE > 1
  VOF conc_f(c_f, g_f, kappa_f, uvwvof_f, time, solver_f);
#else
  VOFaxisym conc_f(c_f, g_f, kappa_f, uvwvof_f, time, solver_f);
#endif
  conc_f.set_curv_method(curv_method);
  conc_f.set_topo_method(topo_method);
  conc_f.set_wall_curv_method(wall_curv_method);
  conc_f.set_use_interp(use_fs_interp);
  conc_f.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  /* enthalpy equation */
  TIF tsat(tsat0);
  Vector & uvwenth1 = uvw_f;
  Vector & uvwenth2 = uvw_f;

#if CASE > 1
  EnthalpyFD enthFD      (tpr_f, q_f, uvw_f, uvwenth1, uvwenth2, time, solver_f, &mixed_f,
                          conc_f.topo, tsat);
#else
  EnthalpyFDaxisym enthFD(tpr_f, q_f, uvw_f, uvwenth1, uvwenth2, time, solver_f, &mixed_f,
                          conc_f.topo, tsat);
#endif
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  enthFD.set_no_solid_acceleration(no_solid_acceleration);

  /* phase change */
  PhaseChange4 pc(mdot_f, mflx_f, tpr_f, q_f, c_f, g_f , f_f , uvw_f, conc_f.topo,
                  tsat, time, &mixed_f);
#ifdef USE_SECOND_ORDER
  pc.set_second_order_accuracy(true);
#else
  pc.set_second_order_accuracy(false);
#endif
#ifdef USE_UNCOND_EXTRP
  pc.set_unconditional_extrapolation(true);
#else
  pc.set_unconditional_extrapolation(false);
#endif
#ifdef DISCARD_POINTS
  pc.set_discard_points_near_interface(true);
#else
  pc.set_discard_points_near_interface(false);
#endif

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  boil::test_irun();
  boil::set_irun(1);

  int ts;
  /* load variables */
  std::vector<Scalar*> load_scalars = { &press, &c, &tpr_f };
  std::vector<std::string> load_scalar_names = { "press", "c", "tpr" };

  std::vector<Vector*> load_vectors = { &uvw };
  std::vector<std::string> load_vector_names = { "uvw" };

  if(boil::load_backup("time.txt",ts,time,
                       load_scalars, load_scalar_names,
                       load_vectors, load_vector_names)) {
    conc.init();
    boil::prolongate_vf_XZ(conc.color(),conc_f.color(),conc,conc_f);
    conc_f.color_to_vf(conc_f.color(),c_f);
    conc_f.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
    const real xcent=0.0;
    const real ycent=0.0;
    const real zcent=0.0;

#if CASE < 3
    boil::setup_circle_xz(conc.color(), radius, xcent, zcent);
    boil::setup_circle_xz(conc_f.color(), radius, xcent, zcent);
#else
    boil::setup_sphere(conc.color(), radius, xcent, ycent, zcent);
    boil::setup_sphere(conc_f.color(), radius, xcent, ycent, zcent);
#endif
    conc.color().bnd_update();
    conc.color().exchange_all();
    conc_f.color().bnd_update();
    conc_f.color().exchange_all();
#if CASE == 1
    conc.color_to_vf(conc.color(),c);
    conc_f.color_to_vf(conc_f.color(),c_f);
#endif
    for_vijk(c,i,j,k)
      c[i][j][k] = 1.0-c[i][j][k];
    for_vijk(c_f,i,j,k)
      c_f[i][j][k] = 1.0-c_f[i][j][k];

    c.bnd_update();
    c.exchange_all();
    c_f.bnd_update();
    c_f.exchange_all();
    conc.init();
    conc.totalvol();

    boil::prolongate_vf_XZ(conc.color(),conc_f.color(),conc,conc_f);
    conc_f.color_to_vf(conc_f.color(),c_f);
    conc_f.init();

    for_vijk(tpr_f,i,j,k) {
      real dist = pow(tpr_f.xc(i)-xcent,2.0)
#if CASE == 3
                 +pow(tpr_f.yc(j)-ycent,2.0)
#endif
                 +pow(tpr_f.zc(k)-zcent,2.0);

      real radius2=70.0e-6;
      real coef1 =  2.28023719E+05;
      real coef2 = -8.71920915E+09;
      real coef3 = -7.28351952E+14;
      real coef4 =  6.46735617E+19;
      real coef5 = -1.35949950E+24;
      if (dist<=pow(radius,2.0)) {
        tpr_f[i][j][k] = tsat0;
      } else if(dist<=pow(radius2,2.0)) {
        real xi = sqrt(dist) - radius;
        real ttmp = coef5*pow(xi,5.0) + coef4*pow(xi,4.0) + coef3*pow(xi,3.0)
                  + coef2*pow(xi,2.0) + coef1*xi + tsat0;
        tpr_f[i][j][k] = std::min(tout,ttmp);
      } else {
        tpr_f[i][j][k] = tout;
      }
    }
    tpr_f.bnd_update();
    tpr_f.exchange_all();
    boil::plot->plot(uvw,c,conc.color(),press,f,"uvw-c-clr-press-f",0);
    boil::plot->plot(uvw_f,conc_f.color(),tpr_f,mdot_f,f_f,"uvwf-clr-tpr-mdot-f",0);

  }

  /* set iint */
  int iint = 1;
  boil::oout<<"iint= "<<iint<<"\n";

  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update(); /* in fine space */

    /* restrict sources to coarse */
    boil::restrictXZ_sum(f_f,f);
    boil::restrictXZ(g_f,g);

    ns.vol_phase_change(&f);

    /* reset body force */
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    /* surface tension */
    conc.tension(&xyz, mixed,conc.color());

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    p = 0.0;
    if (multigrid.fcycle(ResRat(1e-6))) OMS(converged);
    //pr.solve(ResRat(1e-6));
    p.exchange();
    ns.project(p);
    press += p;

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        if(pmin>press[i][j][k]) pmin=press[i][j][k];
      }
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        press[i][j][k] -= pmin;
      } else {
        press[i][j][k] = 0.0;
      }
    }
    press.bnd_update();
    press.exchange_all();

    ns.cfl_max();

    /* we need to get velocity and geometry in the fine space */
    boil::interpolateXZ(uvw,uvw_f,c,mdot_f,mixed_f);

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    conc.new_time_step();
    conc_f.new_time_step();
    conc.advance_with_extrapolation(true,ResRat(1e-4),uvw,f,
                                    &liquid,&uvw_1);
    //conc.reconstruct_geometry();
    conc.totalvol();

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    /* we need to get geometry in the fine space */
    boil::prolongate_vf_XZ(conc.color(),conc_f.color(),conc,conc_f);
    conc_f.color_to_vf(conc_f.color(),c_f);
    conc_f.ancillary();

    /* in the fine space */
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"enthFD");

    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();

    /* front */
    conc_f.front_minmax();

    time.control_dt(ns.cfl_max(),cfl_limit,dt);

    /*--------------+
    |  output data  |
    +--------------*/
    if(time.current_step() % n_per_plot == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw,c,conc.color(),press,f,"uvw-c-clr-press-f",iint);
      boil::plot->plot(uvw_f,conc_f.color(),tpr_f,mdot_f,f_f,"uvwf-clr-tpr-mdot-f",iint);
      iint++;
    }

    /*--------------+
    |  backup data  |
    +--------------*/
    if(time.current_step() % n_per_backup == 0) {
      boil::save_backup(time.current_step(), 0, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names);
    }

    if(  boil::timer.current_min() > (wmin-12.0)
      || time.current_step()==time.total_steps()) {
      boil::save_backup(time.current_step(), 1, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names);
      boil::rm_backup(ts,
                      load_scalars, load_scalar_names,
                      load_vectors, load_vector_names);

      boil::set_irun(0);
      break;
    }

  }

  boil::oout << "Finished." << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
