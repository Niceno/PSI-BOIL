#include "Include/psi-boil.h"
#include "test_reconstruction.cpp"
#include <fstream>
#define USE_VOF
//#define SYM
#define PSEUDO

/******************************************************************************/
int main(int argc, char * argv[]) {

  if(argc<3){
    boil::oout<<"Two arguments required!"<<"\n";
    boil::oout<<"./Boil wmin glevel"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel=atoi(argv[2]);
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  const real LX =   1.0;
  const int NX = 16*gLevel;
  const real DX = 0.5*LX/real(NX);
#ifdef SYM
  const int NY = NX;
#else
  const int NY = 2*NX;
#endif
  const int NZ = 3;

  /* domain dimensions (given by problem) */
  const real LY =   LX;
#ifdef SYM
  const real LZ =   0.5*LX/real(NX)*real(NZ);
#else
  const real LZ =   LX/real(NX)*real(NZ);
#endif

#ifdef USE_VOF
  const int mSimple = 1;
#else
  const int mSimple = 1;
#endif

  const bool inverted = false;//true;
  const real radius = LX/4.0;

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,0.5*LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#ifdef SYM
  Grid1D gy( Range<real>(0.0,0.5*LY), NY, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#else
  Grid1D gy( Range<real>(-0.5*LY,0.5*LY), NY, Periodic::yes() );
#endif
#ifndef PSEUDO
  Grid1D gz( Range<real>(-0.5*LZ,0.5*LZ), NZ, Periodic::yes() );
#else
  Grid1D gz(DX);
#endif
  /*---------+
  |  domain  |
  +---------*/
#ifdef IBODY
  Body floor("floor.stl");
  Axisymmetric d(gx, gy, DX,&floor,"dom",Decompose::z());
#else
  Axisymmetric d(gx, gy, DX);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);
  Scalar h(d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#endif
#ifndef PSEUDO
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif
    uvw_old(m)=uvw(m).shape();
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef SYM
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#endif
#ifndef PSEUDO
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif

  h = c.shape();
  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();

  Matter air(d), water(d);
  air  .mu    (1.0000e-5);
  air  .rho   (1.2500e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+3);

  Matter mixed(water, air, &c);
  mixed.sigma (0.07);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real um = 1.0;
  const real cfl = 0.05;
  real dxmin = d.dxyz_min();
  const real dt = cfl*dxmin/um;
  const real tend = dt*1000*gLevel;
  const int ndt = tend/dt;
  const int nint = ndt/10;
  Times time(ndt, dt); 
	
  /*--------------------+
  |  initial condition  |
  +--------------------*/
#if 0
  for_m(m)
    if(m!=Comp::v())
      for_avmijk(uvw,m,i,j,k)
        uvw[m][i][j][k]=um/sqrt(2.);
#else
  for_m(m)
    if(m==Comp::w())
      for_avmijk(uvw,m,i,j,k)
        uvw[m][i][j][k]=um;
#endif

  c = 0.0;

  const real xcent = 0.0;
  const real ycent = 0.0;
  const real zcent = 0.0;

  boil::setup_circle_xz(cold,radius,xcent,zcent);
  if(inverted) {
    for_avijk(cold,i,j,k)
      cold[i][j][k] = 1. - cold[i][j][k];
  }
  for_avijk(c,i,j,k) {
    if(d.ibody().off(i,j,k)) {
      cold[i][j][k]=-1;
    }
  }

  cold.bnd_update();
  cold.exchange_all();

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 6
  }
  multigrid.stop_if_diverging(true);

  VOFaxisym conc(c, g, kappa, uvw, time, solver);
  conc.set_curv_method(CurvMethod::HF());  // height function
  conc.set_normal_vector_method_all(NormMethod::ElviraXZ());

  conc.color_to_vf(cold,c);
  conc.ancillary();
  conc.totalvol();

  Scalar adens(d);
  adens = c.shape();
  //Heaviside * heavi = new MarchingCubes(&c,&h,&adens);
  //Heaviside * heavi = new MarchingSquares(Comp::j(),&c,&h,&adens);
  Heaviside * heavi = new MSaxisym(&c,&h,&adens);
  heavi->calculate();
  boil::plot->plot(conc.color(),h,adens,heavi->nodalvals, "c-h-adens-nodal", 0);

  for(time.start(); time.end(); time.increase()) {
    conc.advance();
    heavi->calculate();

    real are(0.0), vol(0.0);
    for_vijk(c,i,j,k) {
      are += adens[i][j][k]*c.dV(i,j,k);
      vol += h[i][j][k]*c.dV(i,j,k);
    }
    boil::cart.sum_real(&are);
    boil::cart.sum_real(&vol);
    real azimuth(1.0);
    real polar(1.);
#ifdef SYM
    polar = 0.5;
#endif
    boil::oout<<"arevol= "<<gLevel<<" "<<are<<" "<<vol<<" | "<<2.*polar*azimuth*radius*radius<<" "<<2./3.*polar*azimuth*radius*radius*radius<<" | "<<are/(2.*polar*azimuth*radius*radius)-1.<<" "<<vol/(2./3.*azimuth*polar*radius*radius*radius)-1.<<boil::endl;

    if(time.current_step() % nint == 0)
      boil::plot->plot(c,h,adens,heavi->nodalvals, "c-h-adens-nodal", time.current_step());
  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
