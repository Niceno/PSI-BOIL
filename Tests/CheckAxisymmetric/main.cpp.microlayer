#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#define INVERTED
//#define USE_PHASE_VEL_EFD
#define USE_SOLID
#define SMALL
#ifdef SMALL
  #define SUPERSMALL
#endif
//#define SETUP_ONLY
#define USE_BOTTOM_DIRICHLET
#define USE_BIG
#define USE_CONVECTIVE_BL
#define USE_PC4

/******************************************************************************/
int main(int argc, char ** argv) {

  boil::timer.start();

  if(argc<5){
    boil::oout<<"Four command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin glevel cangle deltat"<<"\n";

    exit(0);
  }

/******************************************************************************/
/* ------------ input from command line */
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]); /* domain dimensions */
  boil::oout<<"glevel= "<<gLevel<<"\n";

  const real cangle = atof(argv[3]); /* contact angle */
  boil::oout<<"cangle= "<<cangle<<"\n";

  const real deltat = atof(argv[4]); /* superheat */
  boil::oout<<"deltat= "<<deltat<<"\n";

/******************************************************************************/
/* ------------ rescaling factors */
  const real xmult = 1e0;
  const real tmult = 1e0;
  const real mmult = xmult*tmult;

/******************************************************************************/
/* ------------ boundary or initial conditions */
  const real tsat0 = 0.0;
  const real tout = tsat0;

  const real twall = tsat0 + deltat;
  const real tsat0_K = 373.12;

  const real twall0 = twall;
  const real tseed = twall0-0.001;

/******************************************************************************/
/* ------------ values to be directly rescaled */
  real gravity = boil::g; /* m/s2 */
  real R = boil::R;
  
  real qflux=0.0;
  real seedper = 1e-5; /* s */

  /* rescaling */
  gravity *= xmult/tmult/tmult; /* [m/s2] */
  R *= mmult*xmult*xmult/tmult/tmult; /* [kgm2/s2/mol/K] */

  seedper *= tmult;

  qflux *= mmult/tmult/tmult/tmult;     // [kg/s3]

/******************************************************************************/
/* ------------ numerical simulation settings */

  /* total number of steps */
  const int ndt = 10e6; /* inconsequential */

  /* total time */
  const real tend = 0.3e-3 * tmult;

  /* steps per backup */
  const int n_per_backup = 10000;

  /* if yes, plotting each t_per_plot seconds. Else, each n_per_plot steps */
  const bool use_t_per_plot = true;
  const real t_per_plot = tend/100.;
  const int n_per_plot = ndt/100;

  /* dt settings */
  const real surftens_dt_coef = 10.;
  const real initdtcoef = 1./10.;

  /* cfl with and without interfaces */
  const real cfl_with = 0.1; //0.05
  const real cfl_wo   = 0.2;
 
  /* radius of init bubble in terms of dxmin */
  const real R0mult = 20.;

/* ------------ optional simulation settings */

  /* multigrid */
  const bool multigrid_stop_if_diverging = true;
  //const bool multigrid_stop_if_diverging = false;

  const int multigrid_min_cycles = 3;
  const int multigrid_max_cycles = 10+2*gLevel;

  /* vof */
  const CurvMethod curv_method = CurvMethod::HF();
  const CurvMethod wall_curv_method = CurvMethod::HFnormalXZ();
  //const CurvMethod wall_curv_method = CurvMethod::HFmixedXZ();
  const int Nfilm_crit = 4;
  const TopoMethod topo_method = TopoMethod::Hybrid();

  const bool detachment_model = false;
  const bool subgrid_method = true; /* use slic subgrid */
  const bool use_fs_interp = false;
  const bool store_pressure_extrap = false;
  const int niter_pressure_extrap = 1000;

  /* phase change - VOF version */
  const bool near_wall_modelling = true; /* use near wall modelling */
  /* phase change - 4 version */
  const bool use_second_order_accuracy = true;
  const bool discard_points_near_interface = true;
  const bool use_unconditional_extrapolation = false;

/******************************************************************************/
/* ------------ material properties */
  const real Mv = 18.015e-3;
  const real muv = 1.228e-5;
  const real rhov = 0.5974;
  const real cpv = 2034*rhov;
  const real lambdav = 0.024;

  const real mul = 2.82e-4;
  const real rhol = 958;
  const real cpl = 4216*rhol;
  const real lambdal = 0.677;

  const real sig = 0.058;
  const real latent=2256e3;

#ifdef USE_CONVECTIVE_BL
  const real betal = 7.52e-4;
  const real betav = 1./tsat0_K; /* ideal gas approximation */
#else
  const real betal = 0.0;
  const real betav = 0.0;
#endif

  /* heater */
  /* CaF2 */
  const real rhosol = 3180.0;
  const real cpsol = 854*rhosol;
  const real lambdasol = 9.71;

  const real Jal = cpl*(twall-tsat0)/(latent*rhov);
  boil::oout << "Jal= "<<Jal<<boil::endl;

/******************************************************************************/
/* ------------ domain dimensions */
#ifdef SUPERSMALL
  real LX1 = 0.55e-3;
  real LX2 = 0.9e-3;
  real LX3 = 1.2e-3;
#else
  real LX1 = 1.0e-3;
  real LX2 = 1.5e-3;
  real LX3 = 2.0e-3;
#endif

  const int NX1 = 512*gLevel;
  const int NX2 = 150*gLevel;
  const int NX3 = 160*gLevel;

  const real gridrat = real(2*NX3)/real(NX1);

  /* in experiment, ITO: 700 nm, CaF2: 10 mm;
     here, CaF2: 4*DX0 */
  const int NZ0 = 4;

  LX1 *= xmult;
  LX2 *= xmult;
  LX3 *= xmult;

/******************************************************************************/
/* ------------ calculated values */
  const real DX0 = LX1/real(NX1);
  const real DX1 = (LX3-LX2)/real(NX3);

  boil::oout<<"DX: "<<DX0<<" "<<DX1<<boil::endl;

  const real DZ0 = DX0;
  const real DZ1 = DX1;

  int NZ(0);
#ifdef USE_SOLID
  const int NZ1 = NX1 - NZ0;
  NZ += NZ0+NZ1;
#else
  const int NZ1 = NX1;
  NZ += NZ1;
#endif
  const int NZ2 = NX2;
  const int NZ3 = NX3;
#ifndef SMALL
  NZ += NZ2;
  NZ += NZ3;
#endif

  const real LZ0 = -DX0*NZ0;
  const real LZ1 = DX0*NZ1;
  const real LZ2 = LX2 - LX1 + LZ1;
  const real LZ3 = LZ2+DX1*NZ3;

  /* other parameters */
  const real zplant= LZ1/18.; // when bottom of bubble reaches zplant, next seed is set
  const real zmax=0.9*LZ1; /* only liquid beyond 0.9*LZ1 */

  /* heater power */
  real qsrc=qflux/fabs(LZ0);  // [W/m3]
  boil::oout<<"#qsrc= "<<qsrc<<" qflux= "<<qflux<<"\n";

/******************************************************************************/
/* ------------- setup finished */
/******************************************************************************/
/* below this line, NO VALUES AND SETTINGS CAN BE ENTERED! */
/******************************************************************************/

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx1( Range<real>(0.0,LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );
  Grid1D gx2( Range<real>(LX1,LX2),
              Range<real>(DX0,DX1),
              NX2, Periodic::no() );
  Grid1D gx3( Range<real>(LX2,LX3), NX3, Periodic::no() );

  Grid1D gx_small(gx1, gx2, Periodic::no(), BndGrid::symmetry(), BndGrid::wall());
  Grid1D gx_large(gx1, gx2, gx3, Periodic::no(), BndGrid::symmetry(), BndGrid::wall());

  Grid1D gz0( Range<real>(LZ0, 0.0), NZ0, Periodic::no() );
  Grid1D gz1( Range<real>(0.0, LZ1), NZ1, Periodic::no() );
  Grid1D gz2( Range<real>(LZ1,LZ2),
              Range<real>(DZ0,DZ1),
              NZ2, Periodic::no() );
  Grid1D gz3( Range<real>(LZ2,LZ3), NZ3, Periodic::no() );

  Grid1D gzf_small(gz1, gz2, Periodic::no());
  Grid1D gzf_large(gz1, gz2, gz3, Periodic::no());

#ifdef SMALL
  //Grid1D & gx = gx_small;
  Grid1D & gx = gx1;
  //Grid1D & gzf = gzf_small;
  Grid1D & gzf = gz1;
#else
  Grid1D & gx = gx_large;
  Grid1D & gzf = gzf_large;
#endif

  Grid1D gz(gz0, gzf, Periodic::no());

  /*---------+
  |  domain  |
  +---------*/
  Body floor("floor.stl");
#ifdef USE_SOLID
  Axisymmetric d(gx,gz,DX0,&floor);
#else
  Axisymmetric d(gx,gzf,DX0);
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d), uvw_2(d);       // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate
  Scalar auxscalar(d);             // micro-layer film thickness
  Scalar mu_t(d);                  // eddy viscosity

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

    uvw_1(m)=uvw(m).shape();
    uvw_2(m)=uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  mu_t = p.shape();
  kappa = p.shape();
  g = p.shape();
  auxscalar = p.shape();

  /* should avoid spurious flows from the outlet */
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
#ifdef INVERTED
  c.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 1.0 ) );
#else
  c.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 0.0 ) );
#endif
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
#ifdef USE_BOTTOM_DIRICHLET
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), twall ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
#endif
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),tout) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d), heater(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  vapor  .mmass (Mv);
  vapor  .beta  (betav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);
  liquid.mmass (Mv);
  liquid.beta  (betal);

  /* CaF2 */
  heater.rho    (rhosol);
  heater.cp     (cpsol);
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
#ifndef INVERTED
    zero = &liquid;
    one = &vapor;
#endif
  Matter mixed(*one,*zero, &c);
  mixed.sigma(sig);
  mixed.latent(latent);

  /* rescaling */
  vapor.rescale(xmult,tmult,mmult);
  liquid.rescale(xmult,tmult,mmult);
  mixed.rescale(xmult,tmult,mmult);
  heater.rescale(xmult,tmult,mmult);
  
#ifdef USE_CONVECTIVE_BL
  /* natural convection BL thickness */
  real ztconst = boil::convective_boundary_layer_thickness(liquid,
                                                           twall0-tout);
  boil::oout<<"BL thickness: "<<ztconst<<boil::endl;
#endif

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = surftens_dt_coef*pow(vapor.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  Times time(ndt, dt);
  time.set_coef_dec(0.75);
  time.set_dt(dt*initdtcoef);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solverCGdi = new CG(d, Prec::di());
  Krylov * solverBICG = new BiCGS(d, Prec::di());

  Krylov * solver = solverCGic;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
  Vector & uvwvof = uvw_1;
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
 
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  if(subgrid_method) {
#ifdef INVERTED
    conc.set_subgrid_method(SubgridMethod::SLICliquid());
#else
    conc.set_subgrid_method(SubgridMethod::SLICgas());
#endif
  } else {
    conc.set_subgrid_method(SubgridMethod::None());
  }

  /* 1-cangle */
#ifndef INVERTED
  cangle = 180.-cangle;
#endif
  conc.set_cangle(cangle);
  /* liquid-cangle */
#ifndef INVERTED
  cangle = 180.-cangle;
#endif

  if(detachment_model) {
#ifndef INVERTED
      conc.set_wall_curv_method(wall_curv_method,Sign::pos(),cangle,Nfilm_crit);
#else
      conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle,Nfilm_crit);
#endif
  } else {
#ifndef INVERTED
      conc.set_wall_curv_method(wall_curv_method,Sign::pos(),cangle,Nfilm_crit);
#else
      conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle,Nfilm_crit);
#endif 
  }
  
  /* enthalpy equation */
  TIF tsat(tsat0);

#ifdef USE_PHASE_VEL_EFD
  Vector & uvwenth1 = uvw_1;
  Vector & uvwenth2 = uvw_2;
  //Vector & uvwenth2 = uvw;
#else
  Vector & uvwenth1 = uvw;
  Vector & uvwenth2 = uvw;
#endif

#if defined USE_SOLID && !defined USE_BIG 
  /* nucleation site */
  real rseed = 2.0*dxmin;
  #ifdef INVERTED
  Nucleation nucl( &c, &tpr, &q, &time, auxscalar, &mixed, rseed
                 , 0.0e-10, conc.get_cangle());
  #else
  Nucleation nucl( &c, &tpr, &q, &time, auxscalar, &mixed, rseed
                 , 0.0e-10, conc.get_cangle(), Sign::neg());
  #endif
  /* useless microlayer parameter */
  nucl.set_slope(1.0*4.46e-3);
  nucl.set_seed_period(seedper);
#endif

  Matter * sld = NULL;
#ifdef USE_SOLID
  sld = &heater;
#endif
  EnthalpyFDaxisym enthFD(tpr, q, uvw, uvwenth1, uvwenth2, time, solver  , &mixed,
                          conc.topo, tsat,sld);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  /* phase change */
#ifndef USE_PC4
  #ifdef INVERTED
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed, sld);
  #else
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed, sld,Sign::neg());
  #endif
  pc.set_near_wall_modelling(near_wall_modelling);
#else
  #ifdef INVERTED
  PhaseChange4 pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                  tsat, time, &mixed, sld);
  #else
  PhaseChange4 pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                  tsat, time, &mixed, sld,Sign::neg());
  #endif
  pc.set_second_order_accuracy(use_second_order_accuracy);
  pc.set_discard_points_near_interface(discard_points_near_interface);
  pc.set_unconditional_extrapolation(use_unconditional_extrapolation);
#endif

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",   ts);
    press.load("press",   ts);
    c. load("c", ts);
    tpr.  load("tpr", ts);
#ifdef VARIABLE
    (tsat.tif).load("tif",ts);
#endif
#if defined USE_SOLID && !defined USE_BIG
    nucl. load("nucl", ts);
#endif
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
#if defined USE_SOLID && !defined USE_BIG
    /* set allow_replant */
    if( ns.cfl_max()<=cfl_with && time.dt()<=dt) {
      boil::oout<<"Restart: Allow replant.\n";
      for(int nsd=0; nsd<nucl.size(); nsd++){
        nucl.sites[nsd].set_allow_replant(true);
      }
    } else {
      boil::oout<<"Restart: Deny replant for this step.\n";
    }
#endif
    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
#ifndef USE_BIG
    for_vijk(c,i,j,k)
      c[i][j][k] = 1.0;
  #ifndef INVERTED
    for_vijk(c,i,j,k) {
      c[i][j][k] = 1. - c[i][j][k];
    }
  #endif

    /* set seed */
    real zsite=rseed*cos(0.0/180.0*boil::pi);
    nucl.add(Site( 0.000,  0.000, zsite, tseed, zplant));
  #if 1
    /* plant seed from initial step */
    nucl.plant();
    for(int ns=0; ns<nucl.size(); ns++){
      nucl.sites[ns].set_time_seed(0.0);
    }
  #endif
#else
    const real R0 = R0mult*dxmin;
    real radius, zcent, chord;
    const real xcent = 0.0;
    const real V0 = 4./3.*boil::pi*R0*R0*R0;
    boil::droplet_parameters_3D(180.-cangle,V0,radius,zcent,chord);
    auxscalar = 0.0;

    boil::setup_circle_xz(auxscalar,radius,xcent,zcent);
    for_avijk(auxscalar,i,j,k)
      auxscalar[i][j][k] = 1. - auxscalar[i][j][k];

    auxscalar.bnd_update();
    auxscalar.exchange_all();

    conc.color_to_vf(auxscalar,c);
    conc.reconstruct_geometry();
    conc.test_reconstruction(conc.color(),c);
#endif
    c.bnd_update();
    c.exchange_all();
    conc.init();

#ifdef USE_CONVECTIVE_BL
    for_vijk(c,i,j,k) {
      if(tpr.zc(k)<0.0) {
        tpr[i][j][k] = twall0 + tpr.zc(k)/LZ0 * (twall-twall0);
      } else if(conc.color()[i][j][k]<0.5) {
        tpr[i][j][k] = tsat0;
      } else if(tpr.zc(k)<=ztconst) {
        tpr[i][j][k] = twall0 + (tout-twall0)/ztconst * tpr.zc(k);
      } else {
        tpr[i][j][k] = tout;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();
#else
    tpr = twall;
#endif
    boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                    ,"uvw-c-tpr-curv-mdot-press",0);
    
    std::fstream output;
    std::stringstream ss;
    ss <<"profile-"<<0<<".txt";
    output.open(ss.str(), std::ios::out);
    for_avijk(c,i,j,k) {
      auxscalar[i][j][k] = 1.0-std::max(0.0,std::min(1.0,conc.color()[i][j][k]));
    }
    boil::output_profile_xz(auxscalar,output,Range<int>(NZ0+1,NZ));
    boil::cart.barrier();
    output.close();
  }
  input.close();

  /* set iint */
  int iint;
  if(use_t_per_plot) {
    iint = time.current_time() / t_per_plot;
  } else {
    if(time.current_time()<time.dt()) {
      iint = 0;
    } else {
      iint = time.current_step() / n_per_plot;
    }
  }

  boil::oout<<"iint= "<<iint<<"\n";
 
  /*------------+
  |  time loop  |
  +------------*/
#ifndef SETUP_ONLY
  for(time.start(); time.end(); time.increase()) {

    /*----------------------------------------------+
    |  reset body force & source term for enthalpy  |
    +----------------------------------------------*/
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    q=0.0;
    for_vk(tpr,k){
      if((tpr.zc(k)<0.0)){
        for_vij(tpr,i,j){
          q[i][j][k]=qsrc*tpr.dV(i,j,k);
        }
      }
    }

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* gravity force */
    Comp m = Comp::w();
    for_vmijk(xyz,m,i,j,k){
#ifdef INVERTED
      real phil=std::max(0.0,std::min(1.0,c[i][j][k]));
      real phiv=1.0-phil;
#else
      real phiv=std::max(0.0,std::min(1.0,c[i][j][k]));
      real phil=1.0-phil;
#endif
      real deltmp=tpr[i][j][k]-tsat0;
      real rhomix = phil*boil::rho(liquid.rho()->value(),
                                   liquid.beta()->value(),deltmp)
                  + phiv*boil::rho(vapor.rho()->value(),
                                   vapor.beta()->value(),deltmp);
      if(d.ibody().on(m,i,j,k))
        xyz[m][i][j][k] += -gravity * xyz.dV(m,i,j,k) * rhomix;
    }

    /* surface tension */
    conc.tension(&xyz, mixed,conc.color());

    /*--------------------------+
    |  solve momentum equation  |
    +--------------------------*/
    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    const int niter = 50;
    MaxIter mm = MaxIter(niter);
    std::array<MaxIter,3> mi = {mm,mm,mm};

    ResRat rr = ResRat(5e-5);

    p = 0.0;
    if (multigrid.cycle(Cycle::none(),Cycle::F(),rr,mi)) OMS(converged)
    //if (multigrid.wcycle(ResRat(1e-4))) OMS(converged);
    //    //pr.solve(ResRat(1e-6),"Pressure");

    p.exchange();
    ns.project(p);
    press += p;

    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        if(pmin>press[i][j][k]) pmin=press[i][j][k];
      }
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k){
      if(d.ibody().on(i,j,k)){
        press[i][j][k] -= pmin;
      } else {
        press[i][j][k] = 0.0;
      }
    }

    press.bnd_update();
    press.exchange_all();

    ns.cfl_max();

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
#ifdef USE_PHASE_VEL_EFD
    conc.advance_with_extrapolation(false,ResRat(1e-6),uvw,f,
                                    one,&uvw_1,
                                    zero,&uvw_2);
#else
    conc.advance_with_extrapolation(false,ResRat(1e-6),uvw,f,
                                    one,&uvw_1);
#endif

    for_avk(c,k) {
      if(c.zc(k)>=(zmax-c.dzc(k))) {
        for_avij(c,i,j) {
#ifdef INVERTED
          c[i][j][k]= 1.0;
#else
          c[i][j][k]= 0.0;
#endif
        }
      }
    }

    c.bnd_update();
    c.exchange_all();
    conc.ancillary();
    conc.totalvol();

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"enthFD");

    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();

    /* front */
    conc.front_minmax( Range<real>(0,LX3) ,Range<real>(0,LX3)
                      ,Range<real>(0, LZ2));

    time.control_dt(ns.cfl_max(), cfl_with, dt);

    /*--------------+
    |  output data  |
    +--------------*/
    bool otpcond;
    if(use_t_per_plot)
      otpcond = time.current_time() / t_per_plot >= real(iint);
    else
      otpcond = time.current_step() / n_per_plot >= real(iint);
    if(otpcond) {
      iint++;
      boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                      ,"uvw-c-tpr-curv-mdot-press",iint);
      std::fstream output;
      std::stringstream ss;
      ss <<"profile-"<<iint<<".txt";
      output.open(ss.str(), std::ios::out);
      for_avijk(c,i,j,k) {
        auxscalar[i][j][k] = 1.0-std::max(0.0,std::min(1.0,conc.color()[i][j][k]));
      }
      boil::output_profile_xz(auxscalar,output,Range<int>(NZ0+1,NZ));
      boil::cart.barrier();
      output.close();
    }

    /*--------------+
    |  backup data  |
    +--------------*/
    if((time.current_step()) % n_per_backup == 0 ){
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
#ifdef VARIABLE
      (tsat.tif).save("tif",   time.current_step());
#endif
#if defined USE_SOLID && !defined USE_BIG
      nucl .save("nucl",   time.current_step());
#endif
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()
      || time.current_time()>tend) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c.save("c",  time.current_step());
      tpr  .save("tpr",   time.current_step());
#ifdef VARIABLE
      (tsat.tif).save("tif",   time.current_step());
#endif
#if defined USE_SOLID && !defined USE_BIG
      nucl .save("nucl",   time.current_step());
#endif
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      if(time.current_time()<tend) {
        output.open("run.txt", std::ios::out);
        output << 0 << boil::endl;
        output.close();
      }
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      c.rm("c", ts);
      tpr  .rm("tpr", ts);
#ifdef VARIABLE
      (tsat.tif).rm("tif",ts);
#endif
#if defined USE_SOLID && !defined USE_BIG
      nucl .rm("nucl", ts);
#endif
      boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                      ,"uvw-c-tpr-curv-mdot-press",time.current_step());

      break;
    }
  }
#endif

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}



