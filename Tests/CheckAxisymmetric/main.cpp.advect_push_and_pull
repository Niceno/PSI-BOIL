#include "Include/psi-boil.h"
#include "setup_circle.cpp"
#include "l2_scalar_error.cpp"
#include <fstream>
#include <iostream>
#include <fenv.h>
//#define USE_BNDCLR
#define USE_CONTINUOUS

#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#if 0
const int level = 2;
const int AR = 4;

/* computed parameters */
const int NZ = 200/AR*level;
const int NX = AR*NZ;

/* domain dimensions (given by problem) */
const real LX = 1.0;
const real LZ = LX/real(AR);
const real DX = LX/real(NX);

const int mSimple = 1;

const bool inverted = true;
const real A = 1.0;
#endif

/******************************************************************************/
int main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc<3){
    boil::oout<<"Three arguments (gridlevel, cfl, inversion) required!"<<"\n";
    boil::oout<<"./Boil gridlevel cfl-max inversion"<<"\n";
    exit(0);
  }
  const int level = atoi(argv[1]);
  boil::oout<<"glevel= "<<level<<"\n";

  const real cfl_max = atof(argv[2]);
  boil::oout<<"cfl-max= "<<cfl_max<<"\n";

  const bool inverted = atoi(argv[3]);
  boil::oout<<"inversion= "<<inverted<<"\n";

  /* computed parameters */
  const int AR = 4;
  const int NZ = 200/AR*level;
  const int NX = AR*NZ;

  /* domain dimensions (given by problem) */
  const real LX = 1.0;
  const real LZ = LX/real(AR);
  const real DX = LX/real(NX);

  const int mSimple = 1;

  const real A = 1.0;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
  Grid1D gz( Range<real>(-LZ/2.,LZ/2.), NZ, Periodic::no() );

  /*---------+
  |  domain  |
  +---------*/
  Axisymmetric d(gx,gz,DX,"name",Decompose::x());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d), cold2(d); // concentration
  Scalar press  (d), p(d), f  (d);

#ifdef USE_BNDCLR
  Vector bndclr(d), bndclrold(d);
#endif

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_old(m)=uvw(m).shape();
#ifdef USE_BNDCLR
    bndclr(m)    = uvw(m).shape();
    bndclrold(m) = uvw(m).shape();
#endif
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  g=c.shape();
  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();
  cold2=c.shape();

  Matter air(d), water(d);
#if 0
  air  .mu    (1.0000e-3);
  air  .rho   (1.0000e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+0);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.01);
#else
  air  .mu    (1.0000e-5);
  air  .rho   (1.2500e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+3);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.07);
#endif

  real radius = 0.1;
  real x0 = 0.7;
  real z0 = 0.0;
  real xmin = x0-radius;
  real tmax = xmin*xmin/2./A;
  real tmax_delta = tmax*(1.0-cold.dxc(boil::BW)*cold.dxc(boil::BW)/xmin/xmin);
  boil::oout<<"tmax: "<<tmax<<" "<<tmax_delta<<boil::endl;

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real vel_max = A/xmin;
  const real dt  = cfl_max*DX/vel_max;
  const int  ndt = 1e6;
  const int nint = 50*level;
  Times time(ndt,dt);

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  real a = boil::pi/LX;
  Comp m=Comp::u();
  for_avmijk(uvw,m,i,j,k) {
    real xpos = uvw.xc(m,i);
    real zpos = uvw.zc(m,k);
    if(xpos>0.0)
      uvw[m][i][j][k]=(-A)/xpos;
  }
  uvw.exchange();

  cold = 0.0;

  setup_circle_xz(cold,radius,x0,z0);
  cold.bnd_update();
  cold.exchange_all();

  if(inverted)
    for_avijk(cold,i,j,k) {
      cold[i][j][k] = 1.0 - cold[i][j][k];
    }

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 6
  }
  multigrid.stop_if_diverging(true);

#if 0
  p = 0.0;
  if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);
  //pr.solve(ResRat(1e-6));
  p.exchange();
  ns.project(p);
#endif

#ifdef USE_BNDCLR
  VOFaxisym conc(c, g, kappa, uvw, time, solver, &bndclr);
#else
  VOFaxisym conc(c, g, kappa, uvw, time, solver);
#endif
  //conc.set_reconstruction_parameters(1e-5,conc.get_reconstruction_maxiter());
  conc.color_to_vf(cold,c);
  conc.color_to_vf(cold,cold2);
  conc.set_curv_method(0);  // height function
  //conc.set_curv_method(1);  // smoothed VOF

  conc.ancillary();
  conc.totalvol();

  c.bnd_update();
  c.exchange_all();

#if 0 /* divergence freedom of velocity verification */
  real fnew_max(-1.);
  int ii(0), jj(0), kk(0);
  for_vijk(c,i,j,k) {
    real a_w = c.dSx(Sign::neg(),i,j,k);
    real a_e = c.dSx(Sign::pos(),i,j,k);
    real a_s = c.dSy(Sign::neg(),i,j,k);
    real a_n = c.dSy(Sign::pos(),i,j,k);
    real a_b = c.dSz(Sign::neg(),i,j,k);
    real a_t = c.dSz(Sign::pos(),i,j,k);
    real fnew = 0.0;
    fnew += a_w*uvw[Comp::u()][i]  [j]  [k]  ;
    fnew -= a_e*uvw[Comp::u()][i+1][j]  [k]  ;
    fnew += a_s*uvw[Comp::v()][i]  [j]  [k]  ;
    fnew -= a_n*uvw[Comp::v()][i]  [j+1][k]  ;
    fnew += a_b*uvw[Comp::w()][i]  [j]  [k]  ;
    fnew -= a_t*uvw[Comp::w()][i]  [j]  [k+1];
    fnew = fabs(fnew/c.dV(i,j,k));
    if(fnew>=fnew_max) {
      ii = i;
      jj = j;
      kk = k;
      fnew_max = fnew;
      boil::oout<<i<<" "<<j<<" "<<k<<" | "<<a_w<<" "<<a_e<<" "<<a_s<<" "<<a_n<<" "<<a_b<<" "<<a_t
                <<" | "<<uvw[Comp::u()][i]  [j]  [k]<<" "<<uvw[Comp::u()][i+1][j]  [k]<<" "
                <<uvw[Comp::w()][i]  [j]  [k]<<" "<<uvw[Comp::w()][i]  [j]  [k+1]<<" | "
                <<fnew<<" "
                <<uvw[Comp::u()][i][j][k]*cold.dzc(i)*cold.xn(i)-uvw[Comp::u()][i+1][j][k]*cold.dzc(i)*cold.xn(i+1)
                + (uvw[Comp::w()][i][j][k]-uvw[Comp::w()][i][j][k+1])*(cold.xn(i+1)*cold.xn(i+1)-cold.xn(i)*cold.xn(i))*0.5 
                //<<" | "<<cold.dzc(i)*cold.xn(i)<<" "<<cold.dzc(i)*cold.xn(i+1)<<" "<<(cold.xn(i+1)*cold.xn(i+1)-cold.xn(i)*cold.xn(i))*0.5
                <<boil::endl;
    } 
  }
  boil::oout<<ii<<" "<<jj<<" "<<kk<<" "<<fnew_max<<boil::endl;
  exit(0);
#endif

  boil::plot->plot(uvw,c, "uvw-c", 0);

  ns.cfl_max();

  real cmax_linf_linf(-1.0), cmax_l2(0.);
  real cmin_linf_linf(+1.0), cmin_l2(0.);

  bool flag(true);
  int ntot(0);
  real tmax_delta_delta(1e6);
  for(time.start(); time.end(); time.increase()) {
    
    real maxcolor(-1.);
    real mincolor(+2.);
    int maxidx(-1);
    int minidx(-1);
    if(boil::cart.iam()==0) {
      for_vk(c,k) {
        if(c[boil::BW][boil::BW][k] > maxcolor) {
          maxcolor = c[boil::BW][boil::BW][k];
          maxidx = k;
        }
        if(c[boil::BW][boil::BW][k] < mincolor) {
          mincolor = c[boil::BW][boil::BW][k];
          minidx = k;
        }
      }
    }
    boil::cart.max_real(&maxcolor);
    boil::cart.max_int(&maxidx);
    boil::cart.min_real(&mincolor);
    boil::cart.min_int(&minidx);
    boil::oout<<"Minmaxcolor: "<<time.current_time()<<" "<<maxidx<<" "<<maxcolor<<" | "<<minidx<<" "<<mincolor<<boil::endl;
#if 0
    if(tim>2.*tmax_delta) {
      break;
    }
    if(flag && tim > tmax_delta) {
      flag = false;
      for_m(m)
        for_avmijk(uvw,m,i,j,k) {
          uvw[m][i][j][k] = -uvw[m][i][j][k];
        }
    }
#else
    if(flag&&maxcolor>boil::atto) {
      flag = false;
      ntot = time.current_step()-1; 
      tmax_delta_delta = time.current_time()-0.5*time.dt();

      for_m(m)
        for_avmijk(uvw,m,i,j,k) {
          uvw[m][i][j][k] = -uvw[m][i][j][k];
        }
    }
    if(!flag&&time.current_time()>2.*tmax_delta_delta-time.dt()) {
      boil::plot->plot(uvw, c, "uvw-c",  time.current_step());
      break;
    }
#endif

    real tim = time.current_time();
   
    /* dt control */
    if(tim>tmax_delta_delta) {
      tim = 2.*tmax_delta_delta-tim;
    }
    real velmax = 1./sqrt(2./A)/sqrt(tmax-tim);
    real cfl = velmax*time.dt()/cold.dxc(boil::BW);
    time.control_dt(cfl,cfl_max,dt);
    ns.cfl_max();

    conc.advance();
    conc.totalvol();

    if(time.current_step() % nint == 0) {
      boil::plot->plot(uvw, c, "uvw-c",  time.current_step());
    }

    /* evaluate overshoots */
    real cmax_linf(-1.0), cmin_linf(+1.0);
    for_vijk(c,i,j,k) {
      real col = c[i][j][k];
      if(col>1.0) {
        if(col>cmax_linf) {
          cmax_linf = col;
        }
      }
      if(col<0.0) {
        if(col<cmin_linf) {
          cmin_linf = col;
        }
      }
    }
    boil::cart.max_real(&cmax_linf);
    boil::cart.min_real(&cmin_linf);
    cmax_l2 += std::pow( std::max(0.0,cmax_linf-1.0) , 2.0 );
    cmin_l2 += std::pow( std::min(0.0,cmin_linf    ) , 2.0 );
    cmax_linf_linf = std::max(cmax_linf_linf,cmax_linf);
    cmin_linf_linf = std::min(cmin_linf_linf,cmin_linf);
  }

  /* post-process */ 
  cmax_l2 /= real(ndt);
  cmin_l2 /= real(ndt);
  cmax_l2 = sqrt(cmax_l2);
  cmin_l2 = sqrt(cmin_l2);

  boil::oout<<"Errors over time: ";
  boil::oout<<level<<" "<<inverted<<" | "<<cmax_l2<<" "<<cmin_l2<<" | "
            <<fabs(cmax_linf_linf-1.)<<" "<<fabs(cmin_linf_linf)<<boil::endl;

  real toterr = li_scalar_error(cold2,c);
  real toterr2 = l2_scalar_error(cold2,c);

  boil::oout<<"Linf/2 error: ";
  boil::oout<<level<<" "<<inverted<<" "<<toterr<<" "<<toterr2<<boil::endl;

  std::ofstream output;
  output.open( "results_push_pull.txt", std::ios::out | std::ios::app );
  if(!boil::cart.iam()) {
    output<<level<<" "<<cfl_max<<" "<<inverted<<" | "<<cmax_l2<<" "<<cmin_l2<<" | "
          <<fabs(cmax_linf_linf-1.)<<" "<<fabs(cmin_linf_linf)<<" | "<<toterr<<" "<<toterr2<<boil::endl;
  }


  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();
}	
