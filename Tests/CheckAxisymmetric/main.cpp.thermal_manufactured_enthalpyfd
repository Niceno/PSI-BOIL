#include "Include/psi-boil.h"

const int gLevel = 4;
const int AR = 3;
const int NX = 20*gLevel;
const int NZ = AR*NX;

/* domain dimensions (given by problem) */
const real LX = 1.0;
const real LZ = AR*LX;
const real DX = LX/real(NX);
const real tm = 1.0;
int main(int argc, char ** argv) {

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(),Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
#if 1
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall());
             //BndGrid::wall(), BndGrid::wall());
#else
  Grid1D gx( Range<real>(0.0,LX), Range<real>(3.1*DX,0.5*DX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall());
#endif
  Grid1D gz( Range<real>(0,LZ), NZ, Periodic::no() );

  /*---------+
  |  domain  |
  +---------*/
  Body floor("floor.stl");
#if 1
  Axisymmetric d(gx,gz,DX,&floor);
#else
  Grid1D gy(DX);
  Domain d(gx,gy,gz,&floor);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Scalar p  (d), f  (d); // pressure
  Scalar press(d);
  Scalar tpr(d), q  (d);           // temperature
  Scalar tprsol(d), tprdiff(d);
  Vector uvwsol(d), uvwdiff(d);

  Scalar test(d);
  Scalar c(d), cold(d), g(d), kappa(d); // color

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter liquid(d),gas(d);

  liquid.rho(1.0);
  liquid.cp(0.1);
  liquid.lambda(2.0);

  gas.lambda(2.0);
  gas.rho(0.01);
  gas.cp(0.1);

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    //uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
  }

  std::string STR_tm = std::to_string(tm);
  std::string STR_LZ = std::to_string(LZ);
  real a = 2.*boil::pi/LZ;
  real b = boil::pi/LX/2.;
  std::string STR_a = std::to_string(a);
  std::string STR_b = std::to_string(b);
  std::string eq = (STR_tm+"*"+"sin(z*"+STR_a+")");
  boil::oout<<eq<<"\n";
  char *eqTr = new char[eq.length()+1];
  std::strcpy(eqTr, eq.c_str());

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  //tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), 0. ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), eqTr ) );
  //tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), 0.0 ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), 0. ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 0. ) );
  //tpr.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
  //tpr.bc().add( BndCnd( Dir::kmax(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  p.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  //p.bc().add( BndCnd( Dir::imin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  q = p.shape();
  c = q.shape();
  cold = q.shape();
  g = c.shape();
  kappa = c.shape();

  Matter mixed(liquid,gas, &c);
  mixed.sigma(0.1);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int ndt = 1000*gLevel;
  const real dt = 10.*DX;
  Times time(ndt,dt);
  time.print_time(false);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solver = new BiCGS(d, Prec::di());
  //Krylov * solver = new BiCGS(d, Prec::ic2());

  /* color function */
  VOFaxisym conc  (c,  g, kappa, uvw, time, solver);
  //conc.set_use_subgrid(false);
  conc.set_use_subgrid(true);

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_vijk(c,i,j,k) {
    cold[i][j][k] = 1.0;
  }
  cold.bnd_update();
  cold.exchange_all();
  conc.color_to_vf(cold,c);
  conc.reconstruct_geometry();
  conc.test_reconstruction(conc.color(),c);
  conc.ancillary();

  for_avijk(tprsol,i,j,k) {
    real posx = tpr.xc(i);
    real posz = tpr.zc(k);
    //tprsol[i][j][k] = tm*posx*posx/LX/LX*posz*posz/LZ/LZ;
    tprsol[i][j][k] = tm*posx*posx/LX/LX*sin(a*posz);
    //tprsol[i][j][k] = tm*cos(b*posx);
    tpr[i][j][k]=tprsol[i][j][k];
    tprdiff[i][j][k] = tprsol[i][j][k] - tpr[i][j][k];
  }

  boil::plot->plot(*conc.topo.iflag,"flag",0);

  TIF tsat(0.0);
  EnthalpyFDaxisym enthFD(tpr, q, conc.color(), uvw, time, solver, &mixed,conc.topo,tsat,&gas);
  tpr.bnd_update();

#if 0
  for_vk(tpr,k) {
    real posz = tpr.zc(k);
    //boil::oout<<k<<" "<<tpr.zc(k)<<" "<<tpr[tpr.ei()+1][boil::BW][k]<<" "<<tm*posz*posz/LZ/LZ<<boil::endl;
    boil::oout<<k<<" "<<tpr.zc(k)<<" "<<tpr[tpr.ei()+1][boil::BW][k]<<" "<<tm*sin(a*posz)<<boil::endl;
  }
#endif

  //exit(0);
  q=0.0;
  for_vijk(tpr,i,j,k){
    real lam;
    real posx = tpr.xc(i);
    real posz = tpr.zc(k);
    if(d.ibody().on(i,j,k)) {
      lam = liquid.lambda()->value();
    } else {
      lam = gas.lambda()->value();
    }
    //q[i][j][k]=-tpr.dV(i,j,k)*lam*(2./LX/LX*tm*posz*posz/LZ/LZ+posx*posx/LX/LX*2./LZ/LZ*tm);
    //q[i][j][k]=-tpr.dV(i,j,k)*lam*(2./LX/LX*tm*sin(a*posz)-a*a*posx*posx/LX/LX*sin(a*posz)*tm);
    q[i][j][k]=-tpr.dV(i,j,k)*lam*(4./LX/LX*tm*sin(a*posz)-a*a*posx*posx/LX/LX*sin(a*posz)*tm);
    //q[i][j][k]=tpr.dV(i,j,k)*lam*cos(b*posx)*tm*b*b;
  }

  for_vijk(tpr,i,j,k) {
    real lapT = tpr[i+1][j][k]+tpr[i-1][j][k]-4.*tpr[i][j][k]+tpr[i][j][k+1]+tpr[i][j][k-1];
    lapT /= tpr.dzc(k)*tpr.dxc(i);
    lapT *= liquid.lambda()->value()*tpr.dV(i,j,k);
    boil::oout<<i<<" "<<k<<" "<<q[i][j][k]<<" "<<lapT<<boil::endl;
  }

  boil::plot->plot(c,tpr,tprsol,tprdiff,q,"c-tpr-sol-diff-q",0);
  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {
    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    boil::oout<<time.current_step()<<" "<<time.current_time()<<boil::endl;
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-20),"enth");
  }

  for_avijk(tprsol,i,j,k) {
    tprdiff[i][j][k] = tprsol[i][j][k] - tpr[i][j][k];
  }

  boil::plot->plot(c,tpr,tprsol,tprdiff,q,"c-tpr-sol-diff-q",1);

  boil::oout << "Finished!" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
