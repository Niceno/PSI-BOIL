#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#define USE_VOF

#include <fenv.h>
#define SYM
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

/******************************************************************************/
int main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc<=7){
    boil::oout<<"Seven command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin gridlevel cangle0 cangle rho mu sig"<<boil::endl;
    exit(0);
  }

  const int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int gLevel = atoi(argv[2]);
  boil::oout<<"gLevel= "<<gLevel<<"\n";

  real cangle0 = atof(argv[3]);
  boil::oout<<"cangle0= "<<cangle0<<"\n";

  real cangle = atof(argv[4]);
  boil::oout<<"cangle= "<<cangle<<"\n";

  const real rho = atof(argv[5]);
  boil::oout<<"rho= "<<rho<<boil::endl;

  const real mu = atof(argv[6]);
  boil::oout<<"mu= "<<mu<<boil::endl;

  const real sig = atof(argv[7]);
  boil::oout<<"sig= "<<sig<<boil::endl;

  const bool inverted = false;
  const real dtmult = 10.0;
  const int mSimple = 1;

  const real R0 = 1e-3;
  real radius0, zcent0, chord0;
  real radius1, zcent1, chord1;
  const real xcent = 0.0;

  boil::droplet_parameters_2D(cangle0,boil::pi*R0*R0,radius0,zcent0,chord0);
  if(cangle>0) {
    boil::droplet_parameters_2D(cangle,boil::pi*R0*R0,radius1,zcent1,chord1);
  } else {
    radius1 = 2*radius0;
    zcent1 = 0;
    chord1 = 4*radius0;
  }
  boil::oout<<"dropparams0= "<<radius0<<" "<<zcent0<<" "<<chord0<<boil::endl;
  boil::oout<<"dropparams1= "<<radius1<<" "<<zcent1<<" "<<chord1<<boil::endl;
  boil::oout<<"HERE!"<<boil::endl;

  /* computed parameters */
#ifdef SYM
  const int xmult = 1;
#else
  const int xmult = 2;
#endif
  const int NcellsPerRadius = 16*gLevel;
  const int NXmult = 2;
  const int NZmult = 2;
  
  /* domain dimensions (given by problem) */
  const real DZ = radius0/real(NcellsPerRadius);
  real LZ = real(NZmult)*(zcent0+radius0);
  const int NZ = int(LZ/DZ);
  LZ = real(NZ)*DZ;
  real LX = real(NXmult) * ( (zcent1>0) ? radius1 : 0.5*chord1 );
  const int NX = int(xmult*LX/DZ);
  LX = real(NX)*DZ/real(xmult);
  const int NY = 1;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef SYM
  Grid1D gx( Range<real>(0.0,LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#else
  Grid1D gx( Range<real>(-LX,LX), NX, Periodic::no() );
#endif
  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::no() );
  /*---------+
  |  domain  |
  +---------*/
  Grid1D gy(DZ);
  Domain d(gx,gy,gz);

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d),ctest(d); // concentration
  Scalar press  (d), p(d), f  (d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#endif
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_old(m)=uvw(m).shape();
  }

#ifdef SYM
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::imin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#endif
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();
  ctest=c.shape();

  Matter air(d), water(d);
  air  .mu    (1.0000e-5);
  air  .rho   (1.0000e+0);
  water.mu    (mu);
  water.rho   (rho);

  const real rhoinside = inverted ? air.rho()->value() : water.rho()->value();
  const real muinside = inverted ? air.mu()->value() : water.mu()->value();


  const real tmu0 = rhoinside/muinside*radius0*radius0*4.;
  const real tmu1 = rhoinside/muinside*radius1*radius1*4.;
  boil::oout<<"tmu.scale= "<<tmu0<<" "<<tmu1<<boil::endl;

  Matter mixed(water, air, &c);
  mixed.sigma(sig);

  const real usig0 = sqrt(mixed.sigma()->value()/(2.*radius0*rhoinside));
  const real usig1 = sqrt(mixed.sigma()->value()/(2.*radius1*rhoinside));
  boil::oout<<"vel.scale= "<<usig0<<" "<<usig1<<boil::endl;


  const real tsig0 = sqrt(rhoinside*pow(2.*radius0,3.)/mixed.sigma()->value());
  const real tsig1 = sqrt(rhoinside*pow(2.*radius1,3.)/mixed.sigma()->value());
  boil::oout<<"tsig.scale= "<<tsig0<<" "<<tsig1<<boil::endl;

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = dtmult * pow(std::min(air.rho()->value(),water.rho()->value())*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  const real tend = 1000*std::max(tsig0,std::max(tsig1,std::max(tmu0,tmu1)));
  const int ndt = tend/dt;
  const int nint = 10*gLevel;
  boil::oout<<"times= "<<dt<<" "<<tend<<" "<<ndt<<boil::endl;
  Times time(ndt, dt); 
	
  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_m(m)
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=0.0;

  cold = 0.0;

  boil::setup_circle_xz(cold,radius0,xcent,zcent0);
  if(inverted) {
    for_avijk(cold,i,j,k)
      cold[i][j][k] = 1. - cold[i][j][k];
    cangle0 = 180.-cangle0;
    cangle = 180.-cangle;
  }

  cold.bnd_update();
  cold.exchange_all();

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 6
  }
  multigrid.stop_if_diverging(true);

  VOF conc(c, g, kappa, uvw, time, solver);

  for_avijk(cold,i,j,k) {
    c[i][j][k] = cold[i][j][k];
    ctest[i][j][k] = cold[i][j][k];
  }

  conc.totalvol();

  conc.set_curv_method(0);  // height function
  conc.set_cangle(cangle);
  conc.set_normal_vector_method_all(NormMethod::ElviraXZ());
  if(!inverted)
    conc.set_wall_curv_method(WallCurvMethod::HFmixedXZ(),Sign::pos());
  else
    conc.set_wall_curv_method(WallCurvMethod::HFmixedXZ(),Sign::neg());

  conc.ancillary();
  conc.curvature();

  boil::plot->plot(uvw,c,press,kappa, "uvw-c-press-kappa", 0);


  /*------------+
  |  Time loop  |
  +------------*/
  real h0(0.0), h1(0.0), hold(0.0); 
  real mult_wall(1.);
  if(inverted)
    mult_wall = -1.;
  Dir D = Dir::kmin();
  bool kminw(false);
  if(!c.bc().type_decomp(D)&&c.bc().type(D,BndType::wall())) {
    kminw=true;
  }

#if 1
  for(time.start(); time.end(); time.increase()) {

    // store velocity
    for_m(m)
      uvw_old(m) = uvw(m);
    // store color function
    cold = c;

    /* inner loop */
    for(int mloop=0; mloop<mSimple; mloop++) {

      //reset body force
      for_m(m)
        for_avmijk(xyz,m,i,j,k)
          xyz[m][i][j][k]=0.0;

      /* surface tension */
      conc.tension(&xyz, mixed);

      /* essential for moving front */
      ns.discretize();
      pr.discretize();
      pr.coarsen();

      /* momentum */
      ns.new_time_step(uvw_old);
      ns.convection();
      ns.grad(press);
      ns.solve(ResRat(1e-8));

      p=0.0;
      if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);

      ns.project(p);
      press += p;
      press.exchange();

      ns.cfl_max();

      conc.advance(cold);
    }
    conc.totalvol();

    if(time.current_step() % nint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw, c, press,kappa,"uvw-c-press-kappa",  time.current_step());
    }

    /* post-process */
    hold = h0;
    h0 = 0.0;
    h1 = 0.0;
    real dzzt0(0.0);
    for_vijk(c,i,j,k) {
      if(d.ibody().on(i,j,k)) {
        if(d.ibody().off(i,j,k-1) || (k==c.sk() && kminw)) {
          h0 += (mult_wall < 0 ? (1.-c[i][j][k  ]) : c[i][j][k  ]) * c.dxc(i);
          h1 += (mult_wall < 0 ? (1.-c[i][j][k+1]) : c[i][j][k+1]) * c.dxc(i);
          /* this should be the same for all cells! */
          dzzt0 = c.dzt(k);
        }
      }
    }
    boil::cart.sum_real(&h0);
    boil::cart.sum_real(&h1);
    boil::cart.max_real(&dzzt0);

    real velCL = (h0-hold)/time.dt();
    real Ca = mu*velCL/sig;
    real cang = (boil::pi/2. - atan(-(h1-h0)/dzzt0))*180./boil::pi;
    boil::oout<<"Ca= "<<time.current_time()<<" "<<h0<<" "<<hold<<" "<<velCL<<" "<<Ca<<" "<<cang<<boil::endl;

  }
#endif

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
