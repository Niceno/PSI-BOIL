#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#include "microlayer_common.h"

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,LX1), NX1, Periodic::no(), BndGrid::symmetry(), BndGrid::wall() );

  Grid1D gz0( Range<real>(LZ0, 0.0), NZ0, Periodic::no() );
  Grid1D gzf( Range<real>(0.0, LZ1), NZ1, Periodic::no() );

  Grid1D gz(gz0, gzf, Periodic::no());

  /*---------+
  |  domain  |
  +---------*/
  Body floor("floor.stl");
#ifdef USE_SOLID
  Axisymmetric d(gx,gz,DX0,&floor);
#else
  Axisymmetric d(gx,gzf,DX0);
#endif
  const real dxmin = d.dxyz_min();

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d);           // vel
  Vector uvw_1(d), uvw_2(d);       // phasic vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate
  Scalar auxscalar(d);

  /* cavity */
  Scalar p_cav(d), f_cav(d);       // cavity-pressure
  Vector uvw_cav(d);               // cavity-velocity

  Scalar tpr_old(d);               // stored temperature
  Vector uvw_old(d);               // stored velocity

  /*-----------------------------+
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

    uvw_1(m)=uvw(m).shape();
    uvw_2(m)=uvw(m).shape();

    uvw_cav(m)=uvw(m).shape();
    uvw_old(m)=uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();
  kappa = p.shape();
  g = p.shape();
  auxscalar = p.shape();

  f_cav = f.shape();

  /* should avoid spurious flows from the outlet */
  c.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 1.0 ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  tpr.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
#ifdef USE_BOTTOM_DIRICHLET
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), twall ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
#endif
  /* see below */
  //tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),tout) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  p_cav.bc().add( BndCnd( Dir::imin(), BndType::symmetry() ) );
  p_cav.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p_cav.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  p_cav.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), 0.0 ) );
  p_cav.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p_cav.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d), heater(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);  // J/m3
  vapor  .lambda(lambdav);
  vapor  .mmass (Mv);
  vapor  .beta  (betav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);   // J/m3
  liquid.lambda(lambdal);
  liquid.mmass (Mv);
  liquid.beta  (betal);

  /* solid */
  heater.rho    (rhosol);
  heater.cp     (cpsol);
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
  Matter mixed(*one,*zero, &c);
  mixed.sigma(sig);
  mixed.latent(latent);

  /* rescaling */
  vapor.rescale(xmult,tmult,mmult);
  liquid.rescale(xmult,tmult,mmult);
  mixed.rescale(xmult,tmult,mmult);
  heater.rescale(xmult,tmult,mmult);
  
  /* natural convection BL thickness */
#if CASE == 0
  real ztconst;
  if(twall0>tout) {
     ztconst = boil::convective_boundary_layer_thickness(liquid,
                                                         twall0-tout);
  } else {
     ztconst = LZ1;
  }
#elif CASE == 1
  real ztconst = 1e-3;
#endif
  boil::oout<<"BL thickness: "<<ztconst<<boil::endl;

  /* top temperature boundary */
  real ttop = tout;
  if(LZ1<ztconst) {
    ttop = twall0 + (tout-twall0)*LZ1/ztconst;
  }
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(),ttop) );

  tpr_old = tpr.shape();

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const real dt = surftens_dt_coef*pow(vapor.rho()->value()*pow(dxmin,3.0)
                / (2.0*boil::pi*mixed.sigma()->value()),0.5);
  boil::oout<<"main:dxmin= "<<dxmin<<" "<<boil::cart.iam()<<" "<<dt<<"\n";
  Times time(ndt, dt);
  time.set_coef_dec(0.75);
  time.set_dt(dt*initdtcoef);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solverCGdi = new CG(d, Prec::di());
  Krylov * solverBICG = new BiCGS(d, Prec::di());

  Krylov * solver = solverCGic;

  /*-------------------+
  |  define equations  |
  +-------------------*/
  /* momentum equation */
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::forward_euler());
  ns.diffusion_set(TimeScheme::backward_euler());

  /* pressure solver */
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid.min_cycles(multigrid_min_cycles);
  multigrid.max_cycles(multigrid_max_cycles);

  /* color function */
  Vector & uvwvof = uvw_1;
  VOFaxisym conc(c, g, kappa, uvwvof, time, solver);
 
  conc.set_curv_method(curv_method);
  conc.set_topo_method(topo_method);
  conc.set_use_interp(use_fs_interp);
  conc.set_pressure_extrapolation_parameters(store_pressure_extrap,niter_pressure_extrap);

  if(subgrid_method) {
    conc.set_subgrid_method(SubgridMethod::SLICliquid());
  } else {
    conc.set_subgrid_method(SubgridMethod::None());
  }

  conc.set_cangle(cangle);

  if(detachment_model) {
    conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle,Nfilm_crit);
  } else {
    conc.set_wall_curv_method(wall_curv_method,Sign::neg(),cangle,Nfilm_crit);
  }
  
  /* enthalpy equation */
  TIF tsat(tsat0);

#ifdef USE_PHASE_VEL_EFD
  Vector & uvwenth1 = uvw_1;
  Vector & uvwenth2 = uvw_2;
  //Vector & uvwenth2 = uvw;
#else
  Vector & uvwenth1 = uvw;
  Vector & uvwenth2 = uvw;
#endif

#if defined USE_SOLID && !defined USE_BIG 
  /* nucleation site */
  real rseed = 2.0*dxmin;
  Nucleation nucl( &c, &tpr, &q, &time, , &mixed, rseed
                 , 0.0e-10, conc.get_cangle());
  /* useless microlayer parameter */
  nucl.set_slope(1.0*4.46e-3);
  nucl.set_seed_period(seedper);
#endif

  Matter * sld = NULL;
#ifdef USE_SOLID
  sld = &heater;
#endif
  EnthalpyFDaxisym enthFD(tpr, q, uvw, uvwenth1, uvwenth2, time, solver  , &mixed,
                          conc.topo, tsat,sld);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());
  enthFD.set_near_wall_interfacial_resistance(
      Schrage::calculate_heat_transfer_resistance(tsat0_K,rhov,Mv,latent) );

  /* phase change */
#ifndef USE_PC4
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                    tsat, time, &mixed, sld);
  pc.set_near_wall_modelling(near_wall_modelling);
#else
  PhaseChange4 pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                  tsat, time, &mixed, sld);
  pc.set_second_order_accuracy(use_second_order_accuracy);
  pc.set_discard_points_near_interface(discard_points_near_interface);
  pc.set_unconditional_extrapolation(use_unconditional_extrapolation);
  pc.set_near_wall_interfacial_resistance(
      Schrage::calculate_heat_transfer_resistance(tsat0_K,rhov,Mv,latent) );
#endif

  /* cavity pressure */
  CPaxisym       capr(press, f_cav, uvw_cav, time, solver, &liquid,
                      conc.topo,mixed.sigma(),&kappa);

  AC multigrid_cavity( &capr );
  multigrid_cavity.stop_if_diverging(multigrid_stop_if_diverging);
  multigrid_cavity.min_cycles(1);
  multigrid_cavity.max_cycles(5);

  /* model for pressure */
  auto pmodel = [&](const real t) {
    return mixed.rho(0)*mixed.latent()->value()*(t-tsat0)/(tsat0+373.15);
  };

  auto rval = [&](const real t) {
    return 2*mixed.sigma()->value()/pmodel(t);
  };

  /* allowed temperature range */
  const Range<real> tprr(tsat0,twall0);

  /* integral solver */
  real tgamma = twall0;
  IntegralPC ipc(ns,enthFD,pc,capr,multigrid_cavity,tsat,time,
                 f,press,tpr,tpr_old,uvw,uvw_old,uvw_cav,pmodel);
  ipc.set_mg_params(Cycle::Z(),Cycle::F(),ResRat(5e-5),{MaxIter(20),MaxIter(20),MaxIter(20)});

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  boil::test_irun();
  boil::set_irun(1);

  int ts;
  /* load variables */
  std::vector<Scalar*> load_scalars = { &press, &c, &tpr };
  std::vector<std::string> load_scalar_names = { "press", "c", "tpr" };
#ifdef VARIABLE
  load_scalars.push_back(&(tsat.tif));
  load_scalar_names.push_back("tif");
#endif
 
  std::vector<Vector*> load_vectors = { &uvw };
  std::vector<std::string> load_vector_names = { "uvw" };

  std::vector<Nucleation*> load_nucls = {};
  std::vector<std::string> load_nucl_names = {};
#if defined USE_SOLID && !defined USE_BIG
  load_nucls.push_back(&nucl);
  load_nucl_names.push_back("nucl");
#endif

  std::vector<CIPCSL2*> load_cipls = {};
  std::vector<std::string> load_cipl_names = {};

  std::vector<real*> load_values = {&tgamma};

  if(boil::load_backup("time.txt",ts,time,
                       load_scalars, load_scalar_names,
                       load_vectors, load_vector_names,
                       load_nucls, load_nucl_names,
                       load_cipls, load_cipl_names,
                       load_values)) {
#if defined USE_SOLID && !defined USE_BIG
    /* set allow_replant */
    if( ns.cfl_max()<=cfl_with && time.dt()<=dt) {
      boil::oout<<"Restart: Allow replant.\n";
      for(int nsd=0; nsd<nucl.size(); nsd++){
        nucl.sites[nsd].set_allow_replant(true);
      }
    } else {
      boil::oout<<"Restart: Deny replant for this step.\n";
    }
#endif
    conc.init();
  } else {
    boil::oout << "######################" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "#                    #" << boil::endl;
    boil::oout << "######################" << boil::endl;

    /*--------------------+
    |  initial condition  |
    +--------------------*/
#ifndef USE_BIG
    c = 1.0;

    /* set seed */
    real zsite=rseed*cos(0.0/180.0*boil::pi);
    nucl.add(Site( 0.000,  0.000, zsite, tseed, zplant));
  #if 1
    /* plant seed from initial step */
    nucl.plant();
    for(int ns=0; ns<nucl.size(); ns++){
      nucl.sites[ns].set_time_seed(0.0);
    }
  #endif
#else
    const real R0 = R0mult*dxmin;
    real V0, zcent, chord;
    const real xcent = 0.0;
    const real radius = 2.*rval(tgamma); 
    boil::oout<<"Radius= "<<radius<<boil::endl;
    boil::droplet_parameters_3D(180.-cangle,V0,radius,zcent,chord);

    boil::setup_circle_xz(conc.color(),radius,xcent,zcent);
    for_avijk(conc.color(),i,j,k)
      conc.color()[i][j][k] = 1. - conc.color()[i][j][k];

    conc.color().bnd_update();
    conc.color().exchange_all();

    conc.color_to_vf(conc.color(),c);
    conc.reconstruct_geometry();
    conc.test_reconstruction(conc.color(),c);
#endif
    c.bnd_update();
    c.exchange_all();
    conc.init();

    tpr = tout;
#if 0
    for_vijk(c,i,j,k) {
      if(tpr.zc(k)<0.0) {
        tpr[i][j][k] = twall0 + tpr.zc(k)/LZ0 * (twall-twall0);
      } else if(conc.color()[i][j][k]<0.5) {
        tpr[i][j][k] = tsat0;
      } else if(tpr.zc(k)<=ztconst) {
        tpr[i][j][k] = twall0 + (tout-twall0)/ztconst * tpr.zc(k);
      } else {
        tpr[i][j][k] = tout;
      }
    }
    tpr.bnd_update();
    tpr.exchange_all();
#endif

    boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                    ,"uvw-c-tpr-curv-mdot-press",0);
    
    std::fstream output;
    std::stringstream ssp;
    ssp <<"profile-"<<0<<".txt";
    output.open(ssp.str(), std::ios::out);
    for_avijk(c,i,j,k) {
      auxscalar[i][j][k] = 1.0-std::max(0.0,std::min(1.0,conc.color()[i][j][k]));
    }
    boil::output_profile_xz(auxscalar,output,Range<int>(NZ0+1,NZ));
    boil::cart.barrier();
    output.close();

#if 0//def USE_SOLID
    std::stringstream ssb;
    ssb <<"bndtpr-"<<0<<".txt";
    output.open(ssb.str(), std::ios::out);
    boil::output_wall_heat_transfer_xz(tpr,pc.node_tmp(),
                                       heater.lambda()->value(),output,NX1);
    boil::cart.barrier();
    output.close();
#endif
  }

  /* set temperature of interface */
  ipc.set_temperature(tgamma);

  /* set iint */
  int iint;
  if(use_t_per_plot) {
    iint = time.current_time() / t_per_plot;
  } else {
    if(time.current_time()<time.dt()) {
      iint = 0;
    } else {
      iint = time.current_step() / n_per_plot;
    }
  }

  boil::oout<<"iint= "<<iint<<"\n";

  /*------------+
  |  time loop  |
  +------------*/
#ifndef SETUP_ONLY
  for(time.start(); time.end(); time.increase()) {

    /* new time step */
    conc.new_time_step();

    /* store velocity */
    for_m(m)
      uvw_old(m) = uvw(m);

    /* store temperature */
    tpr_old = tpr;

    /*----------------------------------------------+
    |  reset body force & source term for enthalpy  |
    +----------------------------------------------*/
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    q=0.0;
    for_vk(tpr,k) {
      if(tpr.zc(k)<0.0&&tpr.zc(k)>LZheat) {
        for_vij(tpr,i,j) {
          q[i][j][k]=qsrc*tpr.dV(i,j,k);
        }
      }
    }

#if 0
    /* gravity force */
    Comp m = Comp::w();
    for_vmijk(xyz,m,i,j,k) {
      real phil=std::max(0.0,std::min(1.0,c[i][j][k]));
      real phiv=1.0-phil;
      real deltmp=tpr[i][j][k]-tsat0;
      real rhomix = phil*boil::rho(liquid.rho()->value(),
                                   liquid.beta()->value(),deltmp)
                  + phiv*boil::rho(vapor.rho()->value(),
                                   vapor.beta()->value(),deltmp);
      if(d.ibody().on(m,i,j,k))
        xyz[m][i][j][k] += -gravity * xyz.dV(m,i,j,k) * rhomix;
    }
#endif

    /* surface tension */
    if(wall_curv_method==CurvMethod::HFnormalXZ())
      conc.output_cangle_2d(Comp::i(),Comp::k(),Sign::neg());
    conc.tension(&xyz,mixed,conc.color());

    /*------------------+
    |  cavity pressure  |
    +------------------*/
    tgamma = ipc.solve(ResTol(1e-6),0.0,tprr);
    boil::oout<<"Temperature= "<<time.current_time()<<" "<<tgamma<<boil::endl;

    /*----------------------+
    |  corrective pressure  |
    +----------------------*/
    p = 0.0;
    pr.discretize();
    pr.coarsen();
    if(multigrid.cycle(multigrid_cycle0,
                       multigrid_cycle1,
                       multigrid_rr,multigrid_mi))
      OMS(converged);

    p.exchange();
    ns.project(p);

    ns.cfl_max();

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
#ifdef USE_PHASE_VEL_EFD
    conc.advance_with_extrapolation(false,ResRat(1e-6),uvw,f,
                                    one,&uvw_1,
                                    zero,&uvw_2);
#else
    conc.advance_with_extrapolation(false,ResRat(1e-6),uvw,f,
                                    one,&uvw_1);
#endif

    for_avk(c,k) {
      if(c.zc(k)>=(zmax-c.dzc(k))) {
        for_avij(c,i,j) {
          c[i][j][k]= 1.0;
        }
      }
    }

    c.bnd_update();
    c.exchange_all();
    conc.ancillary();
    conc.totalvol();

    /*-------------+
    |  dt control  |
    +-------------*/
    /* minimum color function */
    conc.color_minmax();

    /* front */
    conc.front_minmax(Range<real>(0   ,LX1),
                      Range<real>(-LX1,LX1),
                      Range<real>(0   ,LZ1));

    time.control_dt(ns.cfl_max(), cfl_with, dt);

    /*---------------------+
    |  stopping criterion  |
    +---------------------*/
    if(conc.topo->get_xmaxft()>0.8*LX1 || conc.topo->get_zmaxft()>0.8*LZ1) {
      boil::save_backup(time.current_step(), 1, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names,
                        load_nucls, load_nucl_names);
      boil::rm_backup(ts,
                      load_scalars, load_scalar_names,
                      load_vectors, load_vector_names,
                      load_nucls, load_nucl_names);
      boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                      ,"uvw-c-tpr-curv-mdot-press",time.current_step());

      break;
    }

    /*--------------+
    |  output data  |
    +--------------*/
    bool otpcond;
    if(use_t_per_plot)
      otpcond = time.current_time() / t_per_plot >= real(iint);
    else
      otpcond = time.current_step() / n_per_plot >= real(iint);
    if(otpcond) {
      iint++;
      boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                      ,"uvw-c-tpr-curv-mdot-press",iint);
      std::fstream output;
      std::stringstream ssp;
      ssp <<"profile-"<<iint<<".txt";
      output.open(ssp.str(), std::ios::out);
      for_avijk(c,i,j,k) {
        auxscalar[i][j][k] = 1.0-std::max(0.0,std::min(1.0,conc.color()[i][j][k]));
      }
      boil::output_profile_xz(auxscalar,output,Range<int>(NZ0+1,NZ));
      boil::cart.barrier();
      output.close();

#ifdef USE_SOLID
      std::stringstream ssb;
      ssb <<"bndtpr-"<<iint<<".txt";
      output.open(ssb.str(), std::ios::out);
      boil::output_wall_heat_transfer_xz(tpr,pc.node_tmp(),
                                         heater.lambda()->value(),output,NX1);
      boil::cart.barrier();
      output.close();
#endif
    }

    /*--------------+
    |  backup data  |
    +--------------*/
    if(time.current_step() % n_per_backup == 0) {
      boil::save_backup(time.current_step(), 0, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names,
                        load_nucls, load_nucl_names);
    }
    
    if(  boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()
      || time.current_time()>tend) {
      boil::save_backup(time.current_step(), 1, time,
                        load_scalars, load_scalar_names,
                        load_vectors, load_vector_names,
                        load_nucls, load_nucl_names);
      boil::rm_backup(ts,
                      load_scalars, load_scalar_names,
                      load_vectors, load_vector_names,
                      load_nucls, load_nucl_names);
      boil::plot->plot(uvw,c,tpr,kappa,mdot,press
                      ,"uvw-c-tpr-curv-mdot-press",time.current_step());

      if(time.current_time()<tend) {
        boil::set_irun(0);
      }
      break;
    }
  } /* time loop */
#endif /* setup only */

  boil::oout << "Finished." << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}



