#include "Include/psi-boil.h"
#include "update_step.cpp"
#include "disjoint_pressure.cpp"

//#define STANDARD
//#define USE_VOF
#define USE_UPW
///#define STRETCH

const int level=2;

#ifdef STRETCH
const int NX = 50*level;
const int NZ = 4;

const int AR = 4;
const real mult = 1.2;
real DXi  = 3e-9/real(level);

int NXst  = 15; /* from aspect ratio */
int NXun  = NX - NXst;
real DXf  = DXi * pow(mult,real(NXst-1));

real LXst = DXi * (1.0-pow(mult,real(NXst)))/(1.0-mult);
real LXun = DXf * real(NXun);
real LX   = LXst + LXun;

real DZ = DXi*real(AR);
real LZ = real(NZ)*DZ;

real DXu = sqrt(DXi*DXf);
real thickness = 5e-7;
#else
real DXu = 20e-9/real(level);
real DXf = DXu;
real thickness = 5e-7;

const int NX = 50*level;
const int NZ = 4;
#endif

real LXu = real(NX)*DXu;
real DZu = DXu;
real LZu = real(NZ)*DZu;

const real Tout=101.0+273.15;
const real Tsat=100.0+273.15;

/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc==1){
    boil::oout<<"One command line argument is required!"<<"\n";
    boil::oout<<"./Boil wmin (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  boil::oout<<"Edit cipcsl2_sharpen.cpp!\n";
  boil::oout<<"#if 1 (for 1D)\n";

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef STRETCH
  Grid1D gx_st(Range<real>( 0.0, LXst ),
               Range<real>( DXi, DXf  ),
               NXst, Periodic::no());
  Grid1D gx_un(Range<real>( 0.0, LXun ),
               NXun, Periodic::no());

  Grid1D gx(gx_st, gx_un, Periodic::no());
  Grid1D gz( Range<real>( 0.0,LZ), NZ, Periodic::yes() );
#else
  DXf = DXu;
  Grid1D gx( Range<real>( 0.0,LXu), NX, Periodic::no() );
  Grid1D gz( Range<real>( 0.0,LZu), NZ, Periodic::yes() );
#endif

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gz, gz);

  int iref = d.local_i(1);
  int jref = d.local_j(1);
  int kref = d.local_k(1);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d);
  Scalar step(d), sflag(d); // temperature
  Scalar mdot(d);        // phase-change

  Scalar pcc(d);
  Scalar heaviside(d);
  Scalar deltaT(d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  q = p.shape();

  c.bc().add( BndCnd( Dir::imin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  g = c.shape();
  step = c.shape();
  sflag = c.shape();
  cold = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), Tout ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), Tsat ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  OPR( Tout );

  pcc   = p.shape();
  heaviside = c.shape();

  deltaT.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), 0.0 ) );
  deltaT.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), 0.0 ) );
  deltaT.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  deltaT.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  deltaT.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  deltaT.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
  vapor  .cp    (2030*0.597);
  vapor  .lambda(0.025);
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);
  const real latent=2258.0*1e3;

  const real Mv = 18.015e-3;
  const real pi = atan(1.0) * 4.0;
  const real R  = 8.3144621;
  const real resist = pow(Tsat,1.5)/2.0/vapor.rho()->value()/latent/sqrt(Mv/(2.0*pi*R));

  const real hamaker = 5.0e-20;
  const real pc0 = (Tout/Tsat-1.0)*latent*liquid.rho()->value();
  const real delta0 = pow(hamaker/pc0,1.0/3.0);

  Matter mixed(liquid, vapor,& step); //c=1: full of liquid, c=0: full of vapor
  mixed.sigma(2.3610e-2);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt = 300000*level;
  const int  nint = ndt/20;
  const int  bint = ndt/10;
  const real dt  = 1.0e-8/real(level);
  const real dxmin = d.dxyz_min();
  const real cfl_limit = 0.2;
  Times time(ndt, dt);
  time.print_time(false);
  time.set_coef_dec(0.2);

  OPR(  NX );
  OPR(  dt );
  OPR( ndt );

  for_vijk(c,i,j,k) 
    c[i][j][k] = 0.0;

  for_vijk(c,i,j,k) {
    if(c.xc(i)<thickness-DXf) {
      c[i][j][k]=1.0;
    } else if(c.xc(i)<thickness) { 
      c[i][j][k]=0.7;
    } else {
      c[i][j][k]=0.0;
    }
  }
  c.exchange_all();

  for_avijk(tpr,i,j,k){
    //tpr[i][j][k] = (tpr.xc(i)<thickness ? Tout+(Tsat-Tout)*tpr.xc(i)/thickness : Tsat);
    tpr[i][j][k] = Tsat;
  }

  for_avijk(c,i,j,k){
    step[i][j][k]=c[i][j][k];
  }

  pcc   = 0.0;
  deltaT= 0.0;

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.diffusion_set (TimeScheme::backward_euler());
  ns.convection_set(ConvScheme::upwind());

  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  //multigrid.stop_if_diverging(false);
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(3);

#ifndef USE_VOF
  CIPCSL2 conc  (c,  g, kappa, uvw, time, solver);
  conc.set_globalSharpen();
  conc.set_nredist(1);
  conc.set_itsharpen(32);
#else
  VOF conc  (c,  g, kappa, uvw, time, solver);
#endif

#ifdef USE_UPW
  PhaseChange pc(mdot, tpr, q, c, g, f, step, uvw, time, &mixed, latent, Tsat, NULL, &(conc.sxyz));
#else
  PhaseChange pc(mdot, tpr, q, c, g, f, step, uvw, time, &mixed, latent, Tsat);
#endif

#ifdef STANDARD
  EnthalpyFD enthFD(tpr, q, c, uvw, time, solver, &mixed, Tsat);
#else 
  EnthalpyTIF enthFD(tpr, q, c, uvw, time, solver, &mixed, Tsat, latent, resist, &(pc.M), &pcc);
#endif
  //EnthalpyTIF enthFD(tpr, q, c, uvw, time, solver, &mixed, Tsat);
  //EnthalpyTIF enthFD(tpr, q, c, uvw, time, solver, &mixed, Tsat, latent, resist, NULL, &pcc);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

#ifndef STANDARD
  pc.set_tif(&(enthFD.tif));
  boil::plot->plot(uvw,c,tpr,mdot,enthFD.tif,"uvw-c-tpr-mdot-tif",0);
#else
  boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",0);
#endif

  Heaviside indicator(heaviside, &c);

  /*---------------------------------------------------------------+
  |                     start computation                          |
  +----------------------------------------------------------------*/
#if 1
  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    press.load("press",ts);
#ifndef USE_VOF
    conc. load("conc",ts);
#else
    c.load("conc",ts);
#endif
    tpr.  load("tpr",ts);
#ifndef STANDARD
    (enthFD.tif).load("tif",ts);
#endif
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);

  } 
  input.close();

    boil::oout << "######################" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "######################" << boil::endl;
#endif

  update_step(c, step, sflag);
  int testint = 1;
  /*-------------------+
  |  reset body force  |
  +-------------------*/
  for_m(m)
    for_avmijk(xyz,m,i,j,k)
      xyz[m][i][j][k] = 0.0;

  conc.front_minmax();
  boil::oout<<"x-min-front= "<<time.current_time()<<" "
            <<conc.get_xminft()<<"\n";
  conc.totalvol();

#ifdef USE_VOF
  #ifdef USE_UPW
    conc.calc_sxyz();
  #endif
#endif
  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    boil::oout << "##################" << boil::endl;
    boil::oout << "# TIME:      " << time.current_time() << boil::endl;
    boil::oout << "# TIME STEP: " << time.current_step() << boil::endl;
    boil::oout << "# WTIME:     " << boil::timer.current_min() << boil::endl;
    boil::oout << "##################" << boil::endl;

    /*---------------------------------------+
    |  solve energy equation + phase change  |
    +---------------------------------------*/
    indicator.calculate(); 
    calculate_disjoint_pressure_x(pcc,conc.sxyz,kappa,
                                  mixed.sigma()->value(),hamaker,delta0);
 
#ifndef STANDARD
    enthFD.tint_field(heaviside);
#endif
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"Enthalpy");
#ifndef STANDARD
    pc.initialize();
    pc.cal_massflux();
    real resT(1.0);
    int ctr(0);
    while(resT>1e-3 && ctr<10) {
      enthFD.deltat(deltaT,heaviside,ResRat(1e-16),"T-correction"); 
      resT = 0.0;
      for_avijk(tpr,i,j,k) {
        real del = deltaT[i][j][k];
        if((fabs(del)/tpr[i][j][k])>resT) {
          resT = fabs(del)/tpr[i][j][k];
          tpr[i][j][k] += del;
        }
      }
      pc.cal_massflux();
      boil::cart.max_real(&resT);
      ctr++;
      boil::oout << "dTresidual: "<<time.current_time() << " "<< ctr<< " "<< resT << boil::endl;
    } 
  #if 0
   for_avijk(tpr,i,j,k) {
     if(j==1&&k==1) boil::oout<<" "<<i<<" "<<tpr[i][j][k]<<" "<<deltaT[i][j][k]<<boil::endl;
   }
   exit(0);
  #endif
    //boil::plot->plot(c,tpr,deltaT,pc.M,enthFD.tif,"c-tpr-deltaT-M-tif",time.current_step());
    pc.finalize();
#else
    pc.update();
#endif
#if 1
    ns.vol_phase_change(&f);

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
	xyz[m][i][j][k]=0.0;

    ns.grad(press);
    ns.solve(ResRat(1e-14));
    p = 0.0;
    if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;
    press.exchange();
#endif

#if 0
    /* this part does not work in parallel computation */
    real dltp = press[1][1][1];
    for_vijk(press,i,j,k)
      press[i][j][k] -= dltp;
#endif

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    cold=c;
    if(time.current_step()<5 || time.current_step()>1500*level) conc.advance();
    //if(time.current_step()<5) conc.advance();
    conc.front_minmax();
    boil::oout<<"x-min-front= "<<time.current_time()<<" "
              <<conc.get_xminft()<<"\n";
    conc.totalvol();

    update_step(c, step, sflag);

    pc.modify_vel(uvw,c,cold);

#if 0
    if(time.current_step()== 2) {
    for_vi(c,i) boil::oout<<i<<" "<<c[i][1][1]<<boil::endl;
    exit(0);
    }
#endif
    /*-------------+
    |  dt control  |
    +-------------*/
    real cflmax = ns.cfl_max();
    time.control_dt(cflmax, cfl_limit, dt);

#if 0
    if (time.dt()<1.0e-11) {
      boil::oout<<"Too small dt: "<<dt<<"\n";
      exit(0);
    }
#endif

    if(time.current_step() % (nint)==0 ||time.current_step()==1) {
#ifndef STANDARD
      boil::plot->plot(uvw,c,tpr,mdot,enthFD.tif,"uvw-c-tpr-mdot-tif",time.current_step());
#else
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
#endif
    }

#if 0
    if((time.current_step()==testint) ) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
      testint++;
      if (testint == 5) exit(0);
    }
#endif
#if 1
    /*--------------+
    |  backup data  |
    +--------------*/
    if(((time.current_step()) % (bint)==0) ) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
#ifndef USE_VOF
      conc .save("conc",  time.current_step());
#else
      c.save("conc",  time.current_step());
#endif
      tpr  .save("tpr",   time.current_step());
#ifndef STANDARD
      (enthFD.tif).save("tif",   time.current_step());
#endif
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
#ifndef USE_VOF
      conc .save("conc",  time.current_step());
#else
      c .save("conc",  time.current_step());
#endif    
      tpr  .save("tpr",   time.current_step());
#ifndef STANDARD
      (enthFD.tif).save("tif",   time.current_step());
#endif
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
      conc .rm("conc", ts);
      tpr  .rm("tpr", ts);
#ifndef STANDARD
      (enthFD.tif).rm("tif",ts);
#endif
      exit(0);
    }
#endif
  }

#if 0
  std::ofstream fout;
  fout.open("velocity-u.txt");
  Comp m=Comp::u();
  for_vmi(uvw,m,i) {
       fout << uvw.xc(m,i) << "  " << uvw[m][i][1][1] << "\n";
  }
  fout.close();

  fout.open("color.txt");
  for_vi(c,i) {
       fout << c.xc(i) << "  " << c[i][1][1] << "\n";
  }
  fout.close();

  fout.open("temperature.txt");
  for_vi(tpr,i) {
       fout << tpr.xc(i) << "  " << tpr[i][1][1] << "\n";
  }
  fout.close();

  fout.open("mdot.txt");
  for_vi(tpr,i) {
       fout << mdot.xc(i) << "  " << mdot[i][1][1] << "\n";
  }
  fout.close();
#endif


  boil::timer.stop();
  boil::timer.report();

}	
/*-----------------------------------------------------------------------------+
 '$Id: main-JCP-phaseChange-stefan.cpp,v 1.3 2018/04/30 08:45:18 sato Exp $'/
+-----------------------------------------------------------------------------*/
