#include "Include/psi-boil.h"
#include <fstream>
#define USE_VOF
//#define GHOST
//#define PERIODIC
//#define AVEJ

/* computed parameters */
const int gLevel = 2;
const int NX = 32*gLevel;
const int NY = 4;
const int NZ = 32*gLevel;

/* domain dimensions (given by problem) */
//const real LX =   1.0;
const real LX =   4.0e-3;
const real LZ =   LX;
const real LY =   LX/real(NX)*real(NY);


/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef PERIODIC
  Grid1D gx( Range<real>(-0.5*LX,0.5*LX), NX, Periodic::yes() );
  Grid1D gz( Range<real>(-0.5*LZ,0.5*LZ), NZ, Periodic::yes() );
#else
  Grid1D gx( Range<real>(-0.5*LX,0.5*LX), NX, Periodic::no() );
  Grid1D gz( Range<real>(-0.5*LZ,0.5*LZ), NZ, Periodic::no() );
#endif
  Grid1D gy( Range<real>(-0.5*LY,0.5*LY), NY, Periodic::yes() );
  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar press  (d), p(d), f  (d);


  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
#ifdef PERIODIC
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::wall() ) );
#endif
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  }

#ifdef PERIODIC
  c.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
#else
  c.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::neumann() ) );
#endif
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  press=c.shape();
  p=c.shape();
  kappa=c.shape();

  Matter air(d), water(d);
#if 0
  air  .mu    (1.0000e-3);
  air  .rho   (1.0000e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+0);

  Matter mixed(water, air, &c);
  mixed.sigma (0.01);
#else
  air  .mu    (2.0000e-5);
  air  .rho   (1.2500e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+3);

  Matter mixed(water, air, &c);
  mixed.sigma (0.07);
#endif

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 1.0 * pow(air.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  //const real tend = 20.0;
  const real tend = 0.1;
  const int ndt = tend/dt;
  //const int nint = 100;
  const int nint = 20000;

  Times time(ndt, dt); 
	
#if 1
  boil::oout<<"si= "<<c.si()<<" ei= "<<c.ei()<<"\n";
  boil::oout<<"sj= "<<c.sj()<<" ei= "<<c.ej()<<"\n";
  boil::oout<<"sk= "<<c.sk()<<" ei= "<<c.ek()<<"\n";
#endif
  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_m(m)
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=0.0;

  c = 0.0;

  const real xcent = 0.0;
  const real ycent = 0.0;
  const real zcent = 0.0;

#if 1
  // set theoretical value of single droplet for color function
  const real radius = LX/4.0;
  for_vijk(c,i,j,k){
    int inm,inp,knm,knp;
    if (c.xc(i)>0.0 && c.zc(k)>0.0) {
      inm=i; inp=i+1; knm=k; knp=k+1;
    } else if (c.xc(i)>0.0 && c.zc(k)<0.0) {
      inm=i; inp=i+1; knm=k+1; knp=k; 
    } else if (c.xc(i)<0.0 && c.zc(k)>0.0) {
      inm=i+1; inp=i; knm=k; knp=k+1;
    } else {
      inm=i+1; inp=i; knm=k+1; knp=k;
    }

    // check vertex
    int imm=0, imp=0, ipm=0, ipp=0;

    real dtmp = sqrt(pow(c.xn(inm)-xcent,2.0) + pow(c.zn(knm)-zcent,2.0));
    if (dtmp<=radius) imm=1;

    dtmp = sqrt(pow(c.xn(inm)-xcent,2.0) + pow(c.zn(knp)-zcent,2.0));
    if (dtmp<=radius) imp=1;

    dtmp = sqrt(pow(c.xn(inp)-xcent,2.0) + pow(c.zn(knm)-zcent,2.0));
    if (dtmp<=radius) ipm=1;

    dtmp = sqrt(pow(c.xn(inp)-xcent,2.0) + pow(c.zn(knp)-zcent,2.0));
    if (dtmp<=radius) ipp=1;

    if (imm+imp+ipm+ipp==4) {

      // full of liquid
      c[i][j][k] = 1.0;

    } else if(imm+imp+ipm+ipp==0){

      // full of gas
      c[i][j][k] = 0.0;

    } else if(imm+imp+ipm+ipp==1) {

      // one vertex is in liquid
      real theta1 = asin(fabs(c.zn(knm))/radius);
      real theta2 = acos(fabs(c.xn(inm))/radius);

      if (approx(theta2-theta1,0.0)) {

        //exception
        c[i][j][k]=0.0;

      } else {

        real area = radius*radius*(theta2-theta1)*0.5;
        real a = fabs(c.zn(knm))/(radius*cos(theta1));
        real zz = a*fabs(c.xn(inm));
        area = area - (radius*sin(theta2)-zz)*fabs(c.xn(inm))*0.5
                    - (fabs(c.zn(knm))-zz)
                     *(radius*cos(theta1)-fabs(c.xn(inm)))*0.5;
        c[i][j][k] = area/(fabs(c.dxc(inm))*fabs(c.dzc(knm)));
        //std::cout<<area<<"\n";
        
      }

    } else if (imm+imp+ipm+ipp==3) {

      // one vertex is in gas
      real theta1 = acos(fabs(c.xn(inp))/radius);
      real theta2 = asin(fabs(c.zn(knp))/radius);

      real area = (fabs(c.xn(inp))-radius*cos(theta2))*fabs(c.zn(knp))*0.5
                + (fabs(c.zn(knp))-radius*sin(theta1))*fabs(c.xn(inp))*0.5;
      area -= radius*radius*(theta2-theta1)*0.5;
      area = c.dxc(i)*c.dzc(k)-area;
      c[i][j][k] = area/(c.dxc(i)*c.dzc(k));
      //std::cout<<c[i][j][k]<<"\n";

    } else if (imm+imp+ipm+ipp==2) {

      // two vertices are in gas
      if (ipm==1) {
        // imm and ipm are in liquid
        real theta1 = acos(fabs(c.xn(inp))/radius);
        real theta2 = acos(fabs(c.xn(inm))/radius);

        real area = radius*radius*(theta2-theta1)*0.5;
        real a1 = radius*sin(theta1)/fabs(c.xn(inp));
        area += (fabs(c.xn(inp))-fabs(c.zn(knm))/a1)
               *(radius*sin(theta1)-fabs(c.zn(knm)))*0.5;
        area -= (fabs(c.zn(knm))/a1-fabs(c.xn(inm)))*fabs(c.zn(knm))*0.5;
        area -= (radius*sin(theta2)-fabs(c.zn(knm)))*fabs(c.xn(inm))*0.5;
        c[i][j][k] = area/(c.dxc(i)*c.dzc(k));
        //std::cout<<c[i][j][k]<<"\n";
      } else if (imp==1) {
        // imm and imp are in liquid
        real theta1 = asin(fabs(c.zn(knm))/radius);
        real theta2 = asin(fabs(c.zn(knp))/radius);

        real area = radius*radius*(theta2-theta1)*0.5;
        real a2 = fabs(c.zn(knp))/(radius*cos(theta2));
        area += (radius*cos(theta2)-fabs(c.xn(inm)))
               *(fabs(c.zn(knp))-a2*fabs(c.xn(inm)))*0.5;
        area -= (a2*fabs(c.xn(inm))-fabs(c.zn(knm)))*fabs(c.xn(inm))*0.5;
        area -= (radius*cos(theta1)-fabs(c.xn(inm)))*fabs(c.zn(knm))*0.5;
        c[i][j][k] = area/(c.dxc(i)*c.dzc(k));
      } else {
        std::cout<<"Error!!!\n";
        exit(0);
      }
    }
  }
#endif
#if 0
  /* set donuts */
  real radius1 = 0.25 * LX;
  real radius2 = radius1 + 3.0 * dxmin;
  for_vijk(c,i,j,k) {
    real dist=sqrt(pow(c.xc(i)-xcent,2.0)
                  +pow(c.zc(k)-zcent,2.0));
    if (dist<radius1-dxmin) {
      c[i][j][k]=0.0;
    } else if (dist>radius2+dxmin) {
      c[i][j][k]=0.0;
    } else {
      int mm=40;
      real x0=d.xn(i);
      real y0=d.yn(j);
      real z0=d.zn(k);
      real ddx=d.dxc(i)/real(mm);
      real ddy=d.dyc(j)/real(mm);
      real ddz=d.dzc(k)/real(mm);
      int itmp=0;
      for (int ii=0; ii<mm; ii++){
        for (int jj=0; jj<mm; jj++){
          for (int kk=0; kk<mm; kk++){
            real xxc=x0+0.5*ddx+real(ii)*ddx;
            real yyc=y0+0.5*ddy+real(jj)*ddy;
            real zzc=z0+0.5*ddz+real(kk)*ddz;
            //real dist=sqrt(pow(xxc-xcent,2.0)
            //              +pow(yyc-ycent,2.0)+pow(zzc-zcent,2.0));
            real dist=sqrt(pow(xxc-xcent,2.0)
                          +pow(zzc-zcent,2.0));
            if (dist>radius1 && dist<radius2){
              itmp=itmp+1;
            }
          }
        }
      }
      c[i][j][k]=real(itmp)/real(mm*mm*mm);
    }
  }

#endif

  c.bnd_update();
  c.exchange_all();
  boil::plot->plot(uvw,c,press, "uvw-c-press", 0);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
#ifdef GHOST
  Pressure pr(press, f, uvw, time, solver, &mixed);
#else
  Pressure pr(p, f, uvw, time, solver, &mixed);
#endif

  AC multigrid( &pr );
  multigrid.min_cycles(8);

#ifdef USE_VOF
  VOF conc  (c, g, kappa, uvw, time, solver);
  conc.set_curv_method(0);  // height function
  //conc.set_curv_method(1);  // smoothed VOF
#else
  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
#endif
  conc.totalvol();


  for(time.start(); time.end(); time.increase()) {

    //reset body force
    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;

    /* surface tension */
#ifndef GHOST
    conc.tension(&xyz, mixed);
#endif

    /* essential for moving front */
    ns.discretize();
    pr.discretize();
    pr.coarsen();

    /* momentum */
    ns.new_time_step();
#ifndef GHOST
    ns.grad(press);
#endif
    ns.solve(ResRat(1e-8));
#if 0
    boil::plot->plot(uvw, c, press,"uvw-c-press",  time.current_step());
    boil::plot->plot(xyz, c, press,"xyz-c-press",  time.current_step());
    exit(0);
#endif

#ifdef GHOST
    f = 0.0;
    conc.curvature();
    pr.ghost(c,kappa);
#else
    p=0.0;
#endif

    if (multigrid.vcycle(ResRat(1e-8))) OMS(converged);
    //pr.solve(ResRat(1e-8),"press");

#ifdef AVEJ
    // average pressure in J direction
    for_vik(press,i,k){
      real pj=0.0;
      int  npj=0;
      for_vj(press,j) {
#ifdef GHOST
        pj+=press[i][j][k];
#else
        pj+=p[i][j][k];
#endif
        npj++;
      }
      for_vj(press,j) {
#ifdef GHOST
        press[i][j][k]=pj/real(npj);
#else
        p[i][j][k]=pj/real(npj);
#endif
      }
    }
#endif

#ifdef GHOST
    ns.project_ghost(press,c,kappa);
#else
    ns.project(p);
    press += p;
    press.exchange();
#endif

#ifdef AVEJ
    // average velocity in J direction
    for_m(m) {
      if(m==Comp::u()||m==Comp::w()) {
        for_vmik(uvw,m,i,k){
          real velj=0.0;
          int  nvelj=0;
          for_vmj(uvw,m,j) {
            velj+=uvw[m][i][j][k];
            nvelj++;
          }
          for_vmj(uvw,m,j) {
            uvw[m][i][j][k]=velj/real(nvelj);
          }
        }
      } else {
        for_vmijk(uvw,m,i,j,k){
            uvw[m][i][j][k]=0.0;
        }
      }
    }

#endif

    ns.cfl_max();

    conc.advance();
#ifdef AVEJ
    for_vik(c,i,k){
      real cj=0.0;
      int  ncj=0;
      for_vj(c,j) {
        cj+=c[i][j][k];
        ncj++;
      }
      for_vj(c,j) {
        c[i][j][k]=cj/real(ncj);
      }
    }
#endif
    conc.totalvol();
#ifndef USE_VOF
    boil::oout<<"totalvol: "<<time.current_time()<<" "<< conc.get_clrsum1()<<" "<<conc.get_clrsum2()<<"\n";
#endif

    /* post process */

    // pressure
    real dltp = -1.0e+300;
    for_vi(press,i) {
      if(approx(press.xc(i),gx.xc(gx.ncell()),1.0e-6)) {
        for_vj(press,j) {
          if(approx(press.yc(j),gy.xc(gy.ncell()),1.0e-6)) {
            for_vk(press,k) {
              if(approx(press.zc(k),gz.xc(gz.ncell()),1.0e-6)) {
                dltp = press[i][j][k];
              }
            }
          }
        }
      }
    }
    boil::cart.max_real(&dltp);

    for_vijk(press,i,j,k)
      press[i][j][k] -= dltp;

    int icount=0;
#if 0
    real psum=0.0;
    real perr=0.0;
    const real pexact=mixed.sigma()->value()/radius;
    for_vijk(press,i,j,k)
      if(c[i][j][k]>=0.99){
        psum += press[i][j][k];
        icount ++;
        perr=pow((press[i][j][k]-pexact),2.0);
      }
    boil::cart.sum_real(&psum);
    boil::cart.sum_real(&perr);
    boil::cart.sum_int(&icount);

    perr=perr/(real(icount)*pow(pexact,2.0));
    perr=sqrt(perr);
    boil::oout<<"pressure= "<<time.current_time()<<" "<<psum/real(icount)<<" "
             <<pexact<<" "<<perr<<" "<<icount<<"\n";
#endif

    //velocity
    real umax=0.0, vmax=0.0, wmax=0.0;
    real usum=0.0, vsum=0.0, wsum=0.0;
    icount=0;
    for_vijk(c,i,j,k) {
      real utmp = 0.5*(uvw[Comp::u()][i][j][k]+uvw[Comp::u()][i+1][j][k]);
      real vtmp = 0.5*(uvw[Comp::v()][i][j][k]+uvw[Comp::v()][i][j+1][k]);
      real wtmp = 0.5*(uvw[Comp::w()][i][j][k]+uvw[Comp::w()][i][j][k+1]);
      if (umax<fabs(utmp)) umax=fabs(utmp);
      if (vmax<fabs(vtmp)) vmax=fabs(vtmp);
      if (wmax<fabs(wtmp)) wmax=fabs(wtmp);
      usum += fabs(utmp);
      vsum += fabs(vtmp);
      wsum += fabs(wtmp);
      icount++;
    }
    boil::cart.max_real(&umax);
    boil::cart.max_real(&vmax);
    boil::cart.max_real(&wmax);
    boil::cart.sum_real(&usum);
    boil::cart.sum_real(&vsum);
    boil::cart.sum_real(&wsum);
    boil::cart.sum_int(&icount);
    usum /= real(icount);
    vsum /= real(icount);
    wsum /= real(icount);
    boil::oout<<"velocity= "<<time.current_time()<<" "
             <<umax<<" "<<vmax<<" "<<wmax<<" "
             <<usum<<" "<<vsum<<" "<<wsum<<"\n";

    if(time.current_step() % 100000 == 0) {
      boil::plot->plot(uvw, c, press,"uvw-c-press",  time.current_step());
    }
    if(time.current_step() % nint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw, c, press,"uvw-c-press",  time.current_step());
      boil::plot->plot(xyz, c, kappa,"xyz-c-kappa",  time.current_step());
    }

  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
/*-----------------------------------------------------------------------------+
 '$Id: main-CIPCSL2-1d.cpp,v 1.3 2018/09/26 10:06:18 sato Exp $'/
+-----------------------------------------------------------------------------*/
