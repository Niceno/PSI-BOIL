#include "vof.h"
#define OUTPUT

/******************************************************************************/
void VOF::cal_fs() {
/***************************************************************************//**
*  \brief Calculate free-surface position between cell centers
*     if there is no interface in the cell, 1.0e+300 is stored.
*     output: fsx, fsy, fsz
*******************************************************************************/
  // initialize
  fsx=1.0e+300;
  fsy=1.0e+300;
  fsz=1.0e+300;

  /*-------------------------------+
  |  normal vector at cell center  |
  +-------------------------------*/
  norm_cc(phi);

  for_ijk(i,j,k) {
    real c = phi[i][j][k];

    if ( c < boil::pico) {
      if (phi[i-1][j][k]>1.0-boil::pico) {
        fsx[i][j][k]=phi.xn(i);
      } 
      if (phi[i+1][j][k]>1.0-boil::pico) {
        fsx[i][j][k]=phi.xn(i+1);
      }
      if (phi[i][j-1][k]>1.0-boil::pico) {
        fsy[i][j][k] = phi.yn(j);
      } 
      if (phi[i][j+1][k]>1.0-boil::pico) {
        fsy[i][j][k] = phi.yn(j+1);
      } 
      if (phi[i][j][k-1]>1.0-boil::pico) {
        fsz[i][j][k] = phi.zn(k);
      } 
      if (phi[i][j][k+1]>1.0-boil::pico) {
        fsz[i][j][k] = phi.zn(k+1);
      } 
    } else if (1.0-boil::pico<c) {
      if (phi[i-1][j][k]<boil::pico) {
        fsx[i][j][k]=phi.xn(i);
      }
      if (phi[i+1][j][k]<boil::pico) {
        fsx[i][j][k]=phi.xn(i+1);
      }
      if (phi[i][j-1][k]<boil::pico) {
        fsy[i][j][k] = phi.yn(j);
      }
      if (phi[i][j+1][k]<boil::pico) {
        fsy[i][j][k] = phi.yn(j+1);
      }
      if (phi[i][j][k-1]<boil::pico) {
        fsz[i][j][k] = phi.zn(k);
      }
      if (phi[i][j][k+1]<boil::pico) {
        fsz[i][j][k] = phi.zn(k+1);
      }
    } else {

      // calculate vn1, vn2, vn3: normal vector at face center
      real vn1 = -nx[i][j][k];
      real vn2 = -ny[i][j][k];
      real vn3 = -nz[i][j][k];

      real vm1 = fabs(vn1);
      real vm2 = fabs(vn2);
      real vm3 = fabs(vn3)+boil::pico;
      real qa = 1.0/(vm1+vm2+vm3);
      vm1 *= qa;
      vm2 *= qa;
      vm3 *= qa;
      real alpha = calc_alpha(c, vm1, vm2, vm3);

      real alphax=alpha;
      real alphay=alpha;
      real alphaz=alpha;
      if (vn1<0) alphax = 1.0-alpha;
      if (vn2<0) alphay = 1.0-alpha;
      if (vn3<0) alphaz = 1.0-alpha;

      real xuni = (alphax-vm2*0.5-vm3*0.5)/(vm1+boil::pico);
      real yuni = (alphay-vm1*0.5-vm3*0.5)/(vm2+boil::pico);
      real zuni = (alphaz-vm1*0.5-vm2*0.5)/vm3;

      if (0.0 <= xuni && xuni <= 1.0) {
        fsx[i][j][k] = phi.xn(i) + phi.dxc(i) * xuni;
      }

      if (0.0 <= yuni && yuni <= 1.0) {
        fsx[i][j][k] = phi.yn(j) + phi.dyc(j) * yuni;
      }

      if (0.0 <= zuni && zuni <= 1.0) {
        fsz[i][j][k] = phi.zn(k) + phi.dzc(k) * zuni;
      }
    }
  }

#ifdef OUTPUT
  std::ofstream foutx,fouty,foutz;
  foutx.open("fsx.dat");
  fouty.open("fsy.dat");
  foutz.open("fsz.dat");

  for_ijk(i,j,k) {
    if (fsx[i][j][k]<1.0e+10) {
      foutx<<fsx[i][j][k]<<" "<<phi.yc(j)<<" "<<phi.zc(k)<<"\n";
    }
    if (fsy[i][j][k]<1.0e+10) {
      fouty<<phi.xc(i)<<" "<<fsy[i][j][k]<<" "<<phi.zc(k)<<"\n";
    }
    if (fsz[i][j][k]<1.0e+10) {
      foutz<<phi.xc(i)<<" "<<phi.yc(j)<<" "<<fsz[i][j][k]<<"\n";
    }
  }
  foutx.close();
  fouty.close();
  foutz.close();
#endif

  return;
}
/*-----------------------------------------------------------------------------+
 '$Id: colorcip_curv.cpp,v 1.2 2009/11/12 12:15:48 sato Exp $'/
+-----------------------------------------------------------------------------*/

