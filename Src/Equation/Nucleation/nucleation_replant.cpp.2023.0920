#include "nucleation.h"
#include "header.h"
//#define DEBUG

/***************************************************************************//**
*  plant nucleation site
*******************************************************************************/
void Nucleation::replant () {

#ifdef DEBUG
  boil::oout<<"replant:begin\n";
#endif
  if (bzoning==false) {
    // Call only at initial time step or when restarted.
    // Zoning shortens CPU time for the calculation of
    // - distance from site to a cell (nucleation_distance_from_site.cpp),
    //   which is called from microlayer_d0.cpp in order to calculate 
    //   initial microlayer thickness.
    zoning();
  }
  //std::cout<<"replant:size= "<<id_nearRegion.size()<<"\n";

  real t_current = time->current_time();
  real front_array[6];

  for(int ns=0; ns<size(); ns++){
  //for (int id=0; id<id_nearRegion.size(); id++){  // don't use this
    //int ns=id_nearRegion[id];

    if (pre_heat_sink) {
      // pre_heat_sink approach is used:
      // Continue to give heat sink till sufficient energy is provided to bubble,
      // then plant color function.
      // Note that heat sink at each time step must be small enough to 
      // satisfy Tw > Tsat. This is implemented in heat_sink

      // reset heat sink in this time step
      sites[ns].set_sink_energy(0.0);

      //boil::oout<<"replant:sites[ns].qsink()= "<<ns<<" "<<sites[ns].qsink()<<"\n";

      if (sites[ns].qsink()) {
        // heat sink must be given

        // update qsink
        real energy_bubble = sites[ns].vol_bubble()*rhov*latent;

        if (sites[ns].sum_sink_energy()>=energy_bubble) {
	  // heat sink reached bubble energy

          boil::oout<<"replant:sum_sink_energy()>=energy_bubble\n";
	  boil::oout<<"replant:allow_replant= "<<sites[ns].allow_replant()<<"\n";
          // check if time step is small enough
          /* check answers from outside of class to allow replant */
            if ( sites[ns].allow_replant() ){
              // plant color function
              plant_clr(ns);
              sites[ns].set_time_plant_clr( t_current );
              boil::oout<<"replant:plant_clr\n";

              // reset sum_sink_energy after plant_clr
              sites[ns].set_sum_sink_energy(0.0);

              // exit period for heat sink
              sites[ns].set_qsink(false);

              boil::plot->plot(*cht->topo->clr,"clr",time->current_step());
            }

            /* request outside to allow replant */
            sites[ns].set_req_replant( true );
            //std::cout<<"replant: Pattern1 "<<boil::cart.iam()<<"\n";
        
        } else {
          // heat sink < bubble energy
          heat_sink(ns);
	}

      } else {
        // outside of qsink period

        //boil::oout<<"replant:active()= "<<ns<<" "<<sites[ns].active()<<"\n";
        if (sites[ns].active()) {
          // bubble exists over the site
        } else {
          // bubble does not exist over the site
	  // check if need to start plant or not

          bool bseed=false;              // bseed=true, if replant.
          real tpr_seed = tpr_site(ns);  // seed temperature
          real clr_seed = clr_site(ns);  // color function at seed point
          //boil::oout<<"tpr_seed= "<<tpr_seed<<" Tact "<<sites[ns].active_tpr()<<"\n";

          /*---------------------------------------------------------------+
          |  start heat sink if (1) Tw > Tact,                             |
          |  and (2) seed point is liquid,                                 |
          |  and (3) bottom of previous bubble is higher than zplant()     |
          +---------------------------------------------------------------*/
          bool clr_seed_cond = !in_vapor(clr_seed);

          bool bheight = false;          // bheight=true, if zplant is satisfied.
          if(sites[ns].zplant()<0.0) {   // crude code
            bheight = true;
          } else {
            cht->topo->front_minmax(Range<real>(sites[ns].x()-dxmin,sites[ns].x()+dxmin),
                              Range<real>(sites[ns].y()-dxmin,sites[ns].y()+dxmin),
                              Range<real>(-boil::unreal,boil::unreal),
                              front_array);
            real zft = front_array[4]; /* not optimal solution!!! */
            if(zft>sites[ns].zplant()){
              bheight=true;
            }
          }

          if( clr_seed_cond && tpr_seed > sites[ns].active_tpr() && bheight ) {

            // set flag active()
            sites[ns].set_active(true);
            boil::oout<<"replant:set_active(true) from active()==false\n";

            // time_Tact: time when Tw is supposed to reached Tact (-> start heat sink)
            sites[ns].set_time_Tact( time->current_time() );
            //boil::aout<<"replant:set_time_Tact= "<<sites[ns].time_Tact()<<"\n";

            // if pre-heat-sink is used, set the flag active
            sites[ns].set_qsink(true);
            // calculate heat sink (clr is not modified in this function)
            heat_sink(ns);
          }
        }
      }
#ifndef USE_VOF_NUCL
      /*---------------------------------------+ 
      |  continue replant during seed_period   |
      +---------------------------------------*/
      if( sites[ns].time_plant_clr() < t_current &&
          t_current < (sites[ns].time_plant_clr() + seed_period)) {
        plant_clr(ns);
        boil::oout<<"replant:plant_clr "<<sites[ns].time_plant_clr()<<" "
		<<t_current<<" "<<seed_period<<"\n";
        //std::cout<<"replant: Pattern2 "<<boil::cart.iam()<<"\n";
      }
#endif

    } else {
      // pre_heat_sink approach is not used:
      // plant color function and give heat sink in the same time step
      // This may cause Tw < Tsat, if bubble energy is large,
      // i.e. high vapor density due to high pressure.
      sites[ns].set_qsink(false);
      boil::oout<<"replant: program not written yet!\n";
      exit(0);
    }
  }

  /* for parallelization */
  vf->exchange_all();
  clr->exchange_all();

  if(qsrc){
    qsrc->exchange();

    if (pre_heat_sink) {
      /* sum sink_energy between procs.
       * sink_energy may be divided into sevral decomposed domains,
       * if the range covers several domains. */
      for (int ns=0; ns<size(); ns++){
        real tmp = sites[ns].sink_energy();
        boil::cart.sum_real(&tmp);
        sites[ns].set_sink_energy(tmp);
        //boil::oout<<"replant:sink_energy= "<<tmp<<"\n";
      }
      /* sum energy in time */
      for (int ns=0; ns<size(); ns++){
        real tmp = sites[ns].sum_sink_energy();
        tmp += sites[ns].sink_energy();
        sites[ns].set_sum_sink_energy(tmp);
        //boil::oout<<"replant:sum_sink_energy= "<<tmp<<"\n";
      }
    }
  }

  // necessary for activate flag
  deactivate_sites();
  boil::oout<<"replant:time= "<<t_current<<" active "<<sites[0].active()
            <<" qsink "<<sites[0].qsink()
            <<" sum_sink_energy "<<sites[0].sum_sink_energy()
	    <<" tpr "<<tpr_site(0)<<" clr "<<clr_site(0)<<"\n";

#if 0
    /*-----------------+
    |  check criteria  |
    +-----------------*/

    bool bseed=false;              // bseed=true, if replant.
    real tpr_seed = tpr_site(ns);  // seed temperature
    real clr_seed = clr_site(ns);  // color function at seed point
    real zft;
    //boil::oout<<"nucleation_replant:ns= "<<ns<<" tpr_seed= "<<tpr_seed<<" "<<sites[ns].active_tpr()<<"\n";
    
    bool bheight = false;          // bheight=true, if zplant is satisfied.
    if(sites[ns].zplant()<0.0) {   // crude code
      bheight = true;
    } else {
      cht->topo->front_minmax(Range<real>(sites[ns].x()-dxmin,sites[ns].x()+dxmin),
                              Range<real>(sites[ns].y()-dxmin,sites[ns].y()+dxmin),
                              Range<real>(-boil::unreal,boil::unreal),
                              front_array);
      zft = front_array[4]; /* not optimal solution!!! */

      if(zft>sites[ns].zplant()){
        bheight=true;
      }
    }

    /*---------------------------------------------------------------+
    |  replant if (1) seed temp. is higher than activation temp.     |
    |  and (2) did not replant in the last time step                 |
    |  and (3) seed point is liquid  (time_seed affect cutneck)      |
    |  and (4) bottom of previous bubble is higher than zplant()     |
    |  and (5) avoid replant immediately after cutneck.              |
    +---------------------------------------------------------------*/
    bool clr_seed_cond = !in_vapor(clr_seed);
    //boil::oout<<"clr_seed,clr_seed_cond= "<<clr_seed<<" "<<clr_seed_cond<<"\n";
    if( tpr_seed > sites[ns].active_tpr() && 
        sites[ns].seed_prev()==false &&
        clr_seed_cond &&
        bheight &&
        //t_current > (sites[ns].time_cutneck() + period_prevent_replant) ) {
        t_current > (sites[ns].time_plant_clr() + period_prevent_replant) ) {

      /* check answers from outside of class to allow replant */
      if ( sites[ns].allow_replant() ){
        sites[ns].set_time_plant_clr( t_current );
        bseed=true;
        //boil::oout<<"replant:ns,x,y= "<<t_current<<" "<<ns<<" "
        //          <<sites[ns].x()<<" "<<sites[ns].y()<<"\n";
      }

      /* request outside to allow replant */
      sites[ns].set_req_replant( true );
      //std::cout<<"replant: Pattern1 "<<boil::cart.iam()<<"\n";

    } else {
      sites[ns].set_req_replant( false );
      //std::cout<<"replant: Pattern2 "<<boil::cart.iam()<<"\n";
    }

#ifndef USE_VOF_NUCL
    /*---------------------------------------+ 
    |  continue replant during seed_period   |
    +---------------------------------------*/
    if( t_current < (sites[ns].time_plant_clr() + seed_period)) {
      bseed=true;
      sites[ns].set_req_replant( true );
      //std::cout<<"replant: Pattern2 "<<boil::cart.iam()<<"\n";
    }
#endif

    sites[ns].set_seed(bseed);
    //sites[ns].set_seed_prev(bseed);

    if (size()==1) {
      boil::oout<<"replant:printAll "<<ns<<" "<<t_current<<" "
        <<bseed<<" "<<tpr_seed<<" "<<sites[ns].active_tpr()<<" "
        <<clr_seed<<" "<<sites[ns].time_plant_clr()<<" "
        <<sites[ns].allow_replant()<<" "<<sites[ns].req_replant()<<" "
        <<sites[ns].seed_prev()<<"\n"; 
    }
    //boil::oout<<"nucleation_replant:ns= "<<ns<<" bseed= "<<bseed<<"\n";
  }

  /*----------------------+
  |  copy bseed to dummy  |
  +----------------------*/
  for(int nsd=0; nsd<dsize(); nsd++){
    int ns=dsites[nsd].father();
    bool bseed = sites[ns].seed();
    dsites[nsd].set_seed(bseed);
  }

  /*----------+
  |  replant  |
  +----------*/
  /* genuine sites */
  //for(int ns=0; ns<size(); ns++){
  for (int id=0; id<id_nearRegion.size(); id++){
    int ns=id_nearRegion[id];
    if (sites[ns].seed() ) {
      sites[ns].set_active(true);
      plant_clr(ns);
      heat_sink(ns,!sites[ns].seed_prev());
    }
    sites[ns].set_seed_prev(sites[ns].seed());
  }

  /* dummy sites */
  //for(int nsd=0; nsd<dsize(); nsd++){
  for (int idd=0; idd<idd_nearRegion.size(); idd++){
    int nsd=idd_nearRegion[idd];
    if (dsites[nsd].seed() ) {
      dsites[nsd].set_active(true);
      //plant_dummy_site(nsd);  // coment out 2023.0913
    }
  }

  vf->exchange_all();
  clr->exchange_all();  // add 2023.0913

  deactivate_sites();

#if 0
  boil::plot->plot(*cht->topo->clr, 
                   "clr-before",  time->current_step());
  exit(0);
#endif

  /* used by microlayer: first, update at walls must be called */
  // need to update heavi
  // Note: clr doesn't change due to heavi->calculate()
  heavi->calculate();
  //update_at_walls(conc.color(),conc.topo->fs);

#if 0
  boil::plot->plot(*cht->topo->clr, 
                   "clr-after",  time->current_step());
  exit(0); 
#endif

  // if microlayer is defined, dmicro will be set here
  // heavi->surface will be used to calculate area_vapor in upkeep_after_seeding
  //std::cout<<"replant:size= "<<id_nearRegion.size()<<"\n";
  //exit(0);
  upkeep_after_seeding();
#if 0
  boil::plot->plot(*cht->topo->clr, 
                   "clr-after",  time->current_step());
  exit(0);
#endif
#endif

#ifdef DEBUG
  boil::oout<<"replant:end\n";
#endif
  return;
}
