#include "SZLFEPartitionedZoneHeaderWriter.h"
#include "ThirdPartyHeadersBegin.h"
#include <boost/assign.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "AltTecUtil.h"
#include "ItemSetIterator.h"
#include "writeValueArray.h"
namespace tecplot { namespace ___3931 { SZLFEPartitionedZoneHeaderWriter::SZLFEPartitionedZoneHeaderWriter( ItemSetIterator&                  varIter, ___4634                       zone, ___4634                       ___341, ___37&                       ___36, ___2238<int32_t> const& partitionFileNums, UInt64Array const&                partitionHeaderFilePositions, UInt32Array const&                partitionNumCells, UInt32Array const&                partitionNumNodes, VarZoneMinMaxArray const&         varPartitionMinMaxes) : ZoneHeaderWriterAbstract(varIter, zone, ___341, ___36) , m_partitionFileNums(partitionFileNums) , m_partitionHeaderFilePositions(partitionHeaderFilePositions) , m_partitionNumCells(partitionNumCells) , m_partitionNumNodes(partitionNumNodes) , m_varPartitionMinMaxes(varPartitionMinMaxes) {} SZLFEPartitionedZoneHeaderWriter::~SZLFEPartitionedZoneHeaderWriter() {} uint64_t SZLFEPartitionedZoneHeaderWriter::sizeInFile(bool ___2000) const { uint64_t ___3356 = zoneHeaderTagsSizeInFile(6, ___2000); size_t numPartitions = static_cast<size_t>(___2335.zoneGetNumPartitions(___2675 + 1)); ___3356 += arraySizeInFile<int32_t, false>(numPartitions, ___2000); ___3356 += 2 * arraySizeInFile<uint32_t, false>(numPartitions, ___2000); ___3356 += arraySizeInFile<uint64_t, true  >(numPartitions, ___2000); m_varIter.reset(); while (m_varIter.hasNext()) { ___4350 const datasetVar = m_varIter.next(); FieldDataType_e ___1361 = const_cast<___37&>(___2335).___921(___2675 + 1, datasetVar + 1); switch (___1361) { case FieldDataType_Float: ___3356 += arraySizeInFile<std::pair<float, float>, false >(numPartitions, ___2000); break; case FieldDataType_Double: ___3356 += arraySizeInFile<std::pair<double, double>, false >(numPartitions, ___2000); break; case FieldDataType_Int32: ___3356 += arraySizeInFile<std::pair<int32_t, int32_t>, false >(numPartitions, ___2000); break; case FieldDataType_Int16: ___3356 += arraySizeInFile<std::pair<int16_t, int16_t>, false >(numPartitions, ___2000); break; case FieldDataType_Byte: case ___1363: ___3356 += arraySizeInFile<std::pair<uint8_t, uint8_t>, false >(numPartitions, ___2000); break; default: ___476(___1303); break; } } return ___3356; } ___372 SZLFEPartitionedZoneHeaderWriter::write(FileWriterInterface& fileWriter) const { REQUIRE(fileWriter.___2039()); ___4634 numPartitions = ___2335.zoneGetNumPartitions(___2675 + 1); ___372 ___2037 = ___4224; try { ___3943 ___3942 = boost::assign::map_list_of<uint16_t, uint64_t> (NUM_PARTITIONS_TAG, uint64_t(numPartitions)) (PARTITION_FILE_NUM_TAG, ___330) (PARTITION_FILE_LOC_TAG, ___330) (PARTITION_NUM_CELLS_TAG, ___330) (PARTITION_NUM_NODES_TAG, ___330) (VAR_PARTITION_MIN_MAX_TAG, ___330); ___1391 headerFileLoc = fileWriter.fileLoc(); ___2037 = ___4563(fileWriter, ___3942); ___4634 const fileZone = ___2675 - m_baseZone; if (___2037) { ___3942[PARTITION_FILE_NUM_TAG] = fileWriter.fileLoc();
___2037 = ___4561<int32_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_FILE_NUM_DESCRIPTION).c_str(), fileZone, numPartitions, &m_partitionFileNums[0]); } if (___2037) { ___3942[PARTITION_FILE_LOC_TAG] = fileWriter.fileLoc(); ___2037 = ___4561<uint64_t, true, 0>(fileWriter, appendZoneSuffix(PARTITION_FILE_LOC_DESCRIPTION).c_str(), fileZone, numPartitions, &m_partitionHeaderFilePositions[0]); } if (___2037) { ___3942[PARTITION_NUM_CELLS_TAG] = fileWriter.fileLoc(); ___2037 = ___4561<uint32_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_NUM_CELLS_DESCRIPTION).c_str(), fileZone, numPartitions, &m_partitionNumCells[0]); } if (___2037) { ___3942[PARTITION_NUM_NODES_TAG] = fileWriter.fileLoc(); ___2037 = ___4561<uint32_t, false, 0>(fileWriter, appendZoneSuffix(PARTITION_NUM_NODES_DESCRIPTION).c_str(), fileZone, numPartitions, &m_partitionNumNodes[0]); } if (___2037) { ___3942[VAR_PARTITION_MIN_MAX_TAG] = fileWriter.fileLoc(); m_varIter.reset(); ___4350 const baseVar = m_varIter.baseItem(); while (___2037 && m_varIter.hasNext()) { ___4350 const datasetVar = m_varIter.next(); ___4350 const fileVar = datasetVar - baseVar; FieldDataType_e ___1361 = const_cast<___37&>(___2335).___921(___2675 + 1, datasetVar + 1); switch (___1361) { case FieldDataType_Float: ___2037 = ___2037 && ___4526<float>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Double: ___2037 = ___2037 && ___4526<double>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Int32: ___2037 = ___2037 && ___4526<int32_t>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Int16: ___2037 = ___2037 && ___4526<int16_t>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; case FieldDataType_Byte: case ___1363: ___2037 = ___2037 && ___4526<uint8_t>(fileWriter, VAR_PARTITION_MIN_MAX_DESCRIPTION "ForVar", fileVar, numPartitions, &m_varPartitionMinMaxes[fileVar][0], ___944 / 2); break; default: ___476(___1303); break; } } } ___1391 endFileLoc = fileWriter.fileLoc(); ___2037 = ___2037 && fileWriter.___3457(headerFileLoc) && ___4563(fileWriter, ___3942) && fileWriter.___3457(endFileLoc); } catch(std::bad_alloc const&) { ___2037 = ___1184("Out of memory while writing zone %d header.", ___2675 + 1); } catch(...) { ___2037 = ___1184("Unrecoverable error while writing zone %d header.", ___2675 + 1); } return ___4224; } }}
