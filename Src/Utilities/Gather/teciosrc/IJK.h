 #pragma once
#include "basicTypes.h"
#include "CodeContract.h"
#include "LightweightVector.h"
namespace tecplot { namespace ___3931 { class ___1842 { private: static ___81 const BAD_VALUE = BAD_ANY_INDEX; union { ___81 m_iValue; ___81 m_numFENodes; }; union { ___81 m_jValue; ___81 m_numFECells; }; union { ___81 m_kValue; ___81 m_numFECorners; }; ___81 m_ijValue; public: ___1842(___81 ___1839, ___81 ___2111, ___81 ___2156) : m_iValue(___1839), m_jValue(___2111), m_kValue(___2156), m_ijValue(___1839 * ___2111) { } ___1842(___1842 const& ___1841) : m_iValue(___1841.m_iValue), m_jValue(___1841.m_jValue), m_kValue(___1841.m_kValue), m_ijValue(___1841.m_ijValue) { } ___1842() : m_iValue(BAD_VALUE), m_jValue(BAD_VALUE), m_kValue(BAD_VALUE) {} bool ___2065(void) const { REQUIRE(IMPLICATION(m_iValue == BAD_VALUE, *this==BAD_VALUE)); REQUIRE(IMPLICATION(m_iValue != BAD_VALUE, m_iValue*m_jValue == m_ijValue)); return m_iValue != BAD_VALUE; } void invalidate(void) { m_iValue = m_jValue = m_kValue = m_ijValue = BAD_VALUE; } ___81 i(void) const { return m_iValue; } ___81 ___2103(void) const { return m_jValue; } ___81 ___2132(void) const { return m_kValue; } void setI(___81 ___1839) { m_iValue   = ___1839; m_ijValue = m_jValue*m_iValue; } void setJ(___81 ___2111) { m_jValue   = ___2111; m_ijValue = m_jValue*m_iValue; } void ___3495(___81 ___2156) { m_kValue = ___2156; } ___463 ___1666(void) const { REQUIRE(m_numFECells <= MAX_NUM_CELLS); return ___463(m_numFECells); } ___680 ___1667(void) const { REQUIRE(m_numFECorners <= MAX_NUM_CELL_CORNERS); return ___680(m_numFECorners); } ___2716 ___1668(void) const { REQUIRE(m_numFENodes <= MAX_NUM_NODES); return ___2716(m_numFENodes); } void setFENumCells(___81 ___2779) { m_numFECells = ___2779; } void ___3483(___680 ___2787) { m_numFECorners = ___2787; } void setFENumNodes(___81 ___2819) { m_numFENodes = ___2819; } void setIJK(___1842 const& ___1841) { REQUIRE(___1841>=0); m_iValue=___1841.i(); m_jValue=___1841.___2103(); m_kValue=___1841.___2132(); } void operator=(___81 const ___4296) { m_iValue=___4296; m_jValue=___4296; m_kValue=___4296; m_ijValue=___4296*___4296; } void operator=(___1842 const& ___1841) { m_iValue = ___1841.m_iValue; m_jValue = ___1841.m_jValue; m_kValue = ___1841.m_kValue; m_ijValue = ___1841.m_ijValue; } bool operator==(___81 const ___4296) const { return m_iValue==___4296 && m_jValue==___4296 && m_kValue==___4296; } bool operator==(___1842 const& ___1841) const { return m_iValue==___1841.m_iValue && m_jValue==___1841.m_jValue && m_kValue==___1841.m_kValue; } bool operator!=(___81 const ___4296) const { return m_iValue!=___4296 || m_jValue!=___4296 || m_kValue!=___4296; } bool operator!=(___1842 const& ___1841) const { return m_iValue!=___1841.m_iValue || m_jValue!=___1841.m_jValue || m_kValue!=___1841.m_kValue; } bool operator>(___81 const ___4296) const { return m_iValue>___4296 && m_jValue>___4296 && m_kValue>___4296; } bool operator>(___1842 const& ___1841) const { return m_iValue>___1841.m_iValue && m_jValue>___1841.m_jValue && m_kValue>___1841.m_kValue; } bool operator>=(___81 const ___4296) const { return m_iValue>=___4296 && m_jValue>=___4296 && m_kValue>=___4296; } bool operator>=(___1842 const& ___1841) const { return m_iValue>=___1841.m_iValue && m_jValue>=___1841.m_jValue && m_kValue>=___1841.m_kValue; }
bool operator<(___81 const ___4296) const { return m_iValue<___4296 && m_jValue<___4296 && m_kValue<___4296; } bool operator<(___1842 const& ___1841) const { return m_iValue<___1841.m_iValue && m_jValue<___1841.m_jValue && m_kValue<___1841.m_kValue; } bool operator<=(___81 const ___4296) const { return m_iValue<=___4296 && m_jValue<=___4296 && m_kValue<=___4296; } bool operator<=(___1842 const& ___1841) const { return m_iValue<=___1841.m_iValue && m_jValue<=___1841.m_jValue && m_kValue<=___1841.m_kValue; } ___1842 operator+(___81 const ___4296) const { return ___1842(m_iValue+___4296, m_jValue+___4296, m_kValue+___4296); } ___1842 operator+(___1842 const& ___1841) const { return ___1842(m_iValue+___1841.m_iValue, m_jValue+___1841.m_jValue, m_kValue+___1841.m_kValue); } ___1842 operator-(___81 const ___4296) const { ___1842 ___3356(m_iValue-___4296, m_jValue-___4296, m_kValue-___4296); ENSURE(___3356<=*this); return ___3356; } ___1842 operator-(___1842 const& ___1841) const { ___1842 ___3356(m_iValue-___1841.m_iValue, m_jValue-___1841.m_jValue, m_kValue-___1841.m_kValue); ENSURE(___3356<=*this); return ___3356; } ___1842 operator*(___81 const ___4296) const { return ___1842(m_iValue*___4296, m_jValue*___4296, m_kValue*___4296); } ___1842 operator*(___1842 const& ___1841) const { return ___1842(m_iValue*___1841.m_iValue, m_jValue*___1841.m_jValue, m_kValue*___1841.m_kValue); } ___1842 operator/(___81 const ___4296) const { return ___1842(m_iValue/___4296, m_jValue/___4296, m_kValue/___4296); } ___1842 operator/(___1842 const& ___1841) const { return ___1842(m_iValue/___1841.m_iValue, m_jValue/___1841.m_jValue, m_kValue/___1841.m_kValue); } ___1842 operator%(___81 const ___4296) const { return ___1842(m_iValue%___4296, m_jValue%___4296, m_kValue%___4296); } ___1842 operator%(___1842 const& ___1841) const { return ___1842(m_iValue%___1841.m_iValue, m_jValue%___1841.m_jValue, m_kValue%___1841.m_kValue); } ___1842& operator+=(___1842 const& ___1841) { m_iValue += ___1841.m_iValue; m_jValue += ___1841.m_jValue; m_kValue += ___1841.m_kValue; m_ijValue = m_iValue*m_jValue; return *this; } ___1842& operator-=(___1842 const& ___1841) { m_iValue -= ___1841.m_iValue; m_jValue -= ___1841.m_jValue; m_kValue -= ___1841.m_kValue; m_ijValue = m_iValue*m_jValue; return *this; } ___1842 minOp(___81 const ___4296) const { return ___1842(std::min(m_iValue, ___4296), std::min(m_jValue, ___4296), std::min(m_kValue, ___4296)); } ___1842 minOp(___1842 const& ___1841) const { return ___1842(std::min(m_iValue, ___1841.m_iValue), std::min(m_jValue, ___1841.m_jValue), std::min(m_kValue, ___1841.m_kValue)); } ___1842 maxOp(___81 const ___4296) const { return ___1842(std::max(m_iValue, ___4296), std::max(m_jValue, ___4296), std::max(m_kValue, ___4296)); } ___1842 maxOp(___1842 const& ___1841) const { return ___1842(std::max(m_iValue, ___1841.m_iValue), std::max(m_jValue, ___1841.m_jValue), std::max(m_kValue, ___1841.m_kValue)); } ___1842 getCellIJK(void) const { ___1842 const ___3356 = maxOp(2)-1; return ___3356; } ___81 ___459(void) const { return std::max(m_iValue,___81(2))-1; } ___81 ___464(void) const { return std::max(m_jValue,___81(2))-1; } ___81 ___465(void) const { return std::max(m_kValue,___81(2))-1; } ___81 blockSize(void) const { return m_ijValue*m_kValue; } ___2716 ___1766(void) const { return ___2716(blockSize()); } ___463 getNumContiguousCells(void) const { return ___463(getCellIJK().blockSize()); }
___463 getNumPaddedCells(void) const { return ___463(i()*___2103()*___465()); } inline ___81 iFromOffset(___81 itemOffset) const { REQUIRE(itemOffset < blockSize()); return itemOffset % m_iValue; } inline ___81 jFromOffset(___81 itemOffset) const { REQUIRE(itemOffset < blockSize()); return ( itemOffset / m_iValue ) % m_jValue; } inline ___81 kFromOffset(___81 itemOffset) const { REQUIRE(itemOffset < blockSize()); return ( itemOffset / m_iValue ) / m_jValue; } ___1842 ijkAtOffset(___81 itemOffset) const { REQUIRE(itemOffset<blockSize()); if (itemOffset < ___2180 && m_ijValue < ___2180) { int32_t const ijValue32 = static_cast<int32_t>(m_ijValue); int32_t const iValue32  = static_cast<int32_t>(m_iValue); int32_t itemOffset32    = static_cast<int32_t>(itemOffset); int32_t const kk32 = itemOffset32 / ijValue32; itemOffset32 -= kk32 * ijValue32; int32_t const jj32 = itemOffset32 / iValue32; ___81 const ___2111 = jj32; ___81 const ___1839 = itemOffset32 - jj32 * iValue32; ___81 const ___2156 = kk32; return ___1842(___1839, ___2111, ___2156); } else { ___81 const ___1839 = iFromOffset(itemOffset); ___81 const ___2111 = jFromOffset(itemOffset); ___81 const ___2156 = kFromOffset(itemOffset); return ___1842(___1839, ___2111, ___2156); } } ___81 offsetAtIJK(___1842 const& ___1841) const { REQUIRE(___1841>=0 && ___1841<*this); ___81 ___2863 = ___1841.m_iValue + m_iValue*(___1841.m_jValue + m_jValue*___1841.m_kValue); ENSURE(___2863<blockSize()); return ___2863; } }; inline bool operator!=(___81 const ___4296, ___1842 const& ___1841) { return ___1841 != ___4296; } inline bool operator==(___81 const ___4296, ___1842 const& ___1841) { return ___1841 == ___4296; } inline bool operator> (___81 const ___4296, ___1842 const& ___1841) { return ___1841 <  ___4296; } inline bool operator>=(___81 const ___4296, ___1842 const& ___1841) { return ___1841 <= ___4296; } inline bool operator< (___81 const ___4296, ___1842 const& ___1841) { return ___1841 >  ___4296; } inline bool operator<=(___81 const ___4296, ___1842 const& ___1841) { return ___1841 >= ___4296; } inline ___81 ___1875(___1842 const& ___1878, ___1842 const& ___1850) { REQUIRE(0<=___1878 && ___1878<=___1850); ___1842 ijkSpan = ___1850-___1878+1; return ijkSpan.___1766(); } inline ___81 maxComponent(___1842 const& ___1841) { ___81 maxComp = std::max(___1841.i(), ___1841.___2103()); if ( maxComp < ___1841.___2132() ) maxComp = ___1841.___2132(); return maxComp; }
 #ifdef LWV_SPECIALIZE_PLAIN_DATA_VECTORS
template<> class ___2238<___1842> : public ___3092<___1842> {};
 #endif
}}
