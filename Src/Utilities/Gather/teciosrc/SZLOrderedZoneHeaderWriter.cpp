#include "SZLOrderedZoneHeaderWriter.h"
#include "ThirdPartyHeadersBegin.h"
#include <boost/assign.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "AltTecUtil.h"
#include "fileStuff.h"
#include "IJKZoneInfo.h"
#include "ItemSetIterator.h"
#include "writeValueArray.h"
namespace tecplot { namespace ___3931 { SZLOrderedZoneHeaderWriter::SZLOrderedZoneHeaderWriter( ItemSetIterator&    varIter, ___4634         zone, ___4634         ___341, ___37&         ___36, ___1879 const&  ijkZoneInfo, ___1390 const& varFileLocs) : ZoneHeaderWriterAbstract(varIter, zone, ___341, ___36) , m_ijkZoneInfo(ijkZoneInfo) , ___2671(varFileLocs) {} SZLOrderedZoneHeaderWriter::~SZLOrderedZoneHeaderWriter() {} uint64_t SZLOrderedZoneHeaderWriter::sizeInFile(bool ___2000) const { uint64_t ___3356 = zoneHeaderTagsSizeInFile(3, ___2000); size_t numVarsToWrite = static_cast<size_t>(m_varIter.___2810()); ___3356 += arraySizeInFile<uint64_t, true  >(numVarsToWrite, ___2000); return ___3356; } ___372 SZLOrderedZoneHeaderWriter::write(FileWriterInterface& fileWriter) const { REQUIRE(fileWriter.___2039()); ___4350 const numVarsToWrite = m_varIter.___2810(); REQUIRE(___2671.size() == uint64_t(numVarsToWrite)); ___372 ___2037 = ___4224; try { ___3943 ___3942 = boost::assign::map_list_of<uint16_t, uint64_t> (___2782, uint64_t(m_ijkZoneInfo.getNumCszs())) (___2822, uint64_t(m_ijkZoneInfo.getNumNszs())) (___4340, 0); ___1391 headerFileLoc = fileWriter.fileLoc(); ___2037 = ___4563(fileWriter, ___3942); if (___2037) { ___3942[___4340] = fileWriter.fileLoc(); ___2037 = ___4561<uint64_t, true, 0>(fileWriter, appendZoneSuffix(VAR_FILE_LOC_DESCRIPTION).c_str(), ___2675 - m_baseZone, numVarsToWrite, &___2671[0]); } ___1391 endFileLoc = fileWriter.fileLoc(); ___2037 = ___2037 && fileWriter.___3457(headerFileLoc) && ___4563(fileWriter, ___3942) && fileWriter.___3457(endFileLoc); } catch(std::bad_alloc const&) { ___2037 = ___1184("Out of memory while writing zone %d header.", ___2675 + 1); } catch(...) { ___2037 = ___1184("Unrecoverable error while writing zone %d header.", ___2675 + 1); } ENSURE(VALID_BOOLEAN(___2037)); return ___2037; } }}
