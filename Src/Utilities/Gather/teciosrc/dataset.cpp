#include "stdafx.h"
#include "MASTER.h"
 #define DATASETMODULE
#include "GLOBAL.h"
#include "CodeContract.h"
#include "TASSERT.h"
#include "Q_UNICODE.h"
#include "CHARTYPE.h"
#include "STRUTIL.h"
#include "AUXDATA.h"
#include "ARRLIST.h"
#include "STRLIST.h"
#include "ALLOC.h"
#include "SET.h"
#include "DATASET.h"
#include "FILESTREAM.h"
#include "DATASET0.h"
#include "stringformat.h"
#include <float.h>
___372 ___4679( void*      ___2096, ___90 ___492) { ___4681** ZoneSpecRef = (___4681**)___2096; REQUIRE(VALID_REF(ZoneSpecRef)); REQUIRE(VALID_REF(*ZoneSpecRef) || *ZoneSpecRef == NULL); ___4276(___492); if (*ZoneSpecRef != NULL) { delete *ZoneSpecRef; *ZoneSpecRef = NULL; } ENSURE(*ZoneSpecRef == NULL); return ___4224; } ___4681::___4681() { ___2973   = ___333; ___3784     = ___3786; ___3639 = 0.0; ___2828           = -1; ___2829           = -1; ___2830           = -1; ___2803      = -1; ___2797 = -1; ___2798 = -1; ___4234                         = ___4702; ___2062                    = ___1303; ___4645.___3172 = ___2706; ___4645.___2025 = ___4224; ___230                      = NULL; ___419             = ___4224; ___1438                 = ___1288; ___228 = ___4224; tecplotFileZoneVersion = 0; } ___4681::___4681(___4681 const& ___2886) : ___2683(___2886.___2683) , ___2973(___2886.___2973) , ___3784(___2886.___3784) , ___3639(___2886.___3639) , ___2828(___2886.___2828) , ___2829(___2886.___2829) , ___2830(___2886.___2830) , ___2803(___2886.___2803) , ___2797(___2886.___2797) , ___2798(___2886.___2798) , ___4234(___2886.___4234) , ___2062(___2886.___2062) , ___4645(___2886.___4645) , ___230(___2886.___230 ? ___234(___2886.___230,___1303) : NULL) , ___419(___2886.___419) , ___1438(___2886.___1438) , ___228(___2886.___228) , tecplotFileZoneVersion(___2886.tecplotFileZoneVersion) { ___3856(___2683, ___2356); } ___4681& ___4681::operator=(___4681 const& ___3390) { if (this != &___3390) { ___2683         = ___3390.___2683; ___2973   = ___3390.___2973; ___3784     = ___3390.___3784; ___3639 = ___3390.___3639; ___2828           = ___3390.___2828; ___2829           = ___3390.___2829; ___2830           = ___3390.___2830; ___2803      = ___3390.___2803; ___2797 = ___3390.___2797; ___2798 = ___3390.___2798; ___4234                   = ___3390.___4234; ___2062              = ___3390.___2062; ___4645           = ___3390.___4645; ___230                = ___3390.___230 ? ___234(___3390.___230,___1303) : NULL; ___419       = ___3390.___419; ___1438                 = ___3390.___1438; ___228 = ___3390.___228; tecplotFileZoneVersion = ___3390.tecplotFileZoneVersion; ___3856(___2683, ___2356); } return *this; } ___4681::~___4681() { if (___230 != NULL) ___236(&___230); } ___2225 ___4681::numIPts() const { return ___2828; } ___2225 ___4681::numJPts() const { return ___2829; } ___2225 ___4681::numKPts() const { return ___2830; } ___2225 ___4681::numNodesPerFace() const { return ___4234 == ___4696 ? 2 : 0; } ___2225 ___4681::___2802() const { return ___2803; } ___2225 ___4681::numFaceBndryFaces() const
{ return ___2797; } ___2225 ___4681::numFaceBndryItems() const { return ___2798; } void ___4681::assignMetrics( ___2225  numIPts, ___2225  numJPts, ___2225  numKPts) { ___2828 = numIPts; ___2829 = numJPts; ___2830 = numKPts; if (numIPts != 0 || numJPts != 0) { switch (___4234) { case ___4694:    ___2830 = 2; break; case ___4700:   ___2830 = 3; break; case ___4698:       ___2830 = 4; break; case ___4699:      ___2830 = 4; break; case ___4693:      ___2830 = 8; break; case ___4696:    ___2830 = numKPts; break; case ___4697: ___2830 = numKPts; break; case ___4702:      ___2830 = numKPts; break; default : ___476(___1303); break; } } else { ___2830 = 0; } ___2803      = 0; ___2797 = 0; ___2798 = 0; } void ___4681::assignMetrics( ___2225  numIPts, ___2225  numJPts, ___2225  numKPts, ___2225  ___2802, ___2225  numFaceBndryFaces, ___2225  numFaceBndryItems) { ___2828           = numIPts; ___2829           = numJPts; ___2830           = numKPts; ___2803      = ___2802; ___2797 = numFaceBndryFaces; ___2798 = numFaceBndryItems; } ___2225 ___4666(___134 ASSERT_ONLY(___4665), ___2225    ___691, ___2225    ___3352, ___90   ___492) { ___2225 ___3357; REQUIRE(ArrayListIsValid(___4665)); REQUIRE((___3352 == 0 && ___691 == 0) || ___3352 > ___691); REQUIRE(___691 <= ___2380); ___4276(___492); if (___3352 <= ___2380) { if (___3352 != 0 && ___691 == 0) { ___3357 = ___3352; } else { const ___2225 DEFAULT_CAPACITY = 32; ___2225       BlockSize = MAX(DEFAULT_CAPACITY, ___691 / 2); if (___3352 == 0) ___3357 = DEFAULT_CAPACITY; else ___3357 = ((___3352 - 1) / BlockSize + 1) * BlockSize; if (___3357 > ___2380) ___3357 = ___2380; } } else ___3357 = 0; ENSURE(___3357 == 0 || ___3357 >= ___3352); ENSURE(___3357 <= ___2380); return ___3357; } ___4681* ___1801( ___134 zoneSpecList, ___1170   zone) { REQUIRE(VALID_REF(zoneSpecList)); REQUIRE(0 <= zone && zone < ___101(zoneSpecList)); return static_cast<___4681*>(___133(zoneSpecList,zone)); } ___3788* ___1771( ___134 strandInfoList, ___1170   ___3783) { REQUIRE(VALID_REF(strandInfoList)); REQUIRE(0 <= ___3783 && ___3783 < ___101(strandInfoList)); return static_cast<___3788*>(___133(strandInfoList,___3783)); }
