#include "FECellSubzoneCompressor.h"
#include "ThirdPartyHeadersBegin.h"
#include <algorithm>
#include "ThirdPartyHeadersEnd.h"
#include "gatherOffsets.h"
namespace tecplot { namespace ___3931 { ___1337::___1337() {} ___1337::~___1337() {} void ___1337::___534( ___2727 ___2721, ___1348 const& ___1347, ___2088::SubzoneOffset_t ___467) { m_numCellsInSubzone = ___1347.___2780(___467); ___680 const ___2787 = ___1347.___1765(); m_numRefPartitions = static_cast<uint16_t>(___1347.getNumReferencedPartitions()); PartitionArray const& referencedPartitions = ___1347.getReferencedPartitions(); m_numRefNszs = 0; m_refPtnNszSet.clear(); uint32_t count = 0; ___2088::___2978 const* first = (m_numRefPartitions > 0 ? &referencedPartitions[0] : NULL); ASSERT_ONLY(___2088::___2978 const* last = (m_numRefPartitions > 0 ? &referencedPartitions[m_numRefPartitions - 1] + 1 : NULL)); for (___2088::ItemOffset_t cszOffset = 0; cszOffset < m_numCellsInSubzone; cszOffset++) { ___2088 const ___686(___2088::UNKNOWN_PARTITION, ___467, cszOffset); ___463 const ___447 = ___1347.___4606(___686); for (___680 ___679 = 0; ___679 < ___2787; ___679++) { ___2716 const datasetNode = ___2721->___1761(___447 + 1, ___679 + 1) - 1; ___2088 const szCoordOfNode = ___1347.___3922(datasetNode); m_szCoordinateArray[count] = szCoordOfNode; ___2088::___2978 ___2975 = ___2088::INVALID_PARTITION; if (first) { ___2975 = szCoordOfNode.___2975(); ASSERT_ONLY(___2088::___2978 const* current = std::lower_bound(first, last, ___2975)); ___476(*current == ___2975); } ___2088::SubzoneOffset_t const ___2755 = szCoordOfNode.subzoneOffset(); PartitionSubzone ptnNsz(___2975, ___2755); m_ptnNszReferences[cszOffset * ___2787 + ___679] = ptnNsz; m_refPtnNszSet.insert(ptnNsz); count++; } } m_numRefNszs = uint16_t(m_refPtnNszSet.size()); ___2088::SubzoneOffset_t refPtnNszIndex = 0; for (PartitionSubzoneSet::const_iterator iter = m_refPtnNszSet.begin(); iter != m_refPtnNszSet.end(); ++iter) { m_refPtnNszArray[refPtnNszIndex] = *iter; m_refPtnArray[refPtnNszIndex] = iter->first; m_refNszArray[refPtnNszIndex] = iter->second; ++refPtnNszIndex; } ___476(refPtnNszIndex == m_numRefNszs); std::sort(&m_refPtnNszArray[0], &m_refPtnNszArray[m_numRefNszs]); if (m_numRefPartitions > 0) { if (m_numRefPartitions <= MAX_REFS_FOR_2_BIT_COMPRESSION) gather2BitOffsets(&m_refPtn2BitOffsets[0], &m_refPtnArray[0], (uint16_t)(m_numRefNszs), &referencedPartitions[0], m_numRefPartitions); else if (m_numRefPartitions <= MAX_REFS_FOR_4_BIT_COMPRESSION) gather4BitOffsets(&m_refPtn4BitOffsets[0], &m_refPtnArray[0], (uint16_t)(m_numRefNszs), &referencedPartitions[0], m_numRefPartitions); else if ( m_numRefPartitions <= MAX_REFS_FOR_8_BIT_COMPRESSION ) gatherOffsets(&m_refPtn8BitOffsets[0], &m_refPtnArray[0], (uint16_t)(m_numRefNszs), &referencedPartitions[0], m_numRefPartitions); else gatherOffsets(&m_refPtn16BitOffsets[0], &m_refPtnArray[0], (uint16_t)(m_numRefNszs), &referencedPartitions[0], m_numRefPartitions);
} size_t ___2793 = m_numCellsInSubzone * ___2787; if (m_numRefNszs <= MAX_REFS_FOR_2_BIT_COMPRESSION) gather2BitOffsets(&m_refNsz2BitOffsets[0], &m_ptnNszReferences[0], (uint16_t)(___2793), &m_refPtnNszArray[0], m_numRefNszs); else if (m_numRefNszs <= MAX_REFS_FOR_4_BIT_COMPRESSION) gather4BitOffsets(&m_refNsz4BitOffsets[0], &m_ptnNszReferences[0], (uint16_t)(___2793), &m_refPtnNszArray[0], m_numRefNszs); else if ( m_numRefNszs <= MAX_REFS_FOR_8_BIT_COMPRESSION ) gatherOffsets(&m_refNsz8BitOffsets[0], &m_ptnNszReferences[0], (uint16_t)(___2793), &m_refPtnNszArray[0], m_numRefNszs); else gatherOffsets(&m_refNsz16BitOffsets[0], &m_ptnNszReferences[0], (uint16_t)(___2793), &m_refPtnNszArray[0], m_numRefNszs); for (size_t ___1839 = 0; ___1839 < ___2793; ++___1839) { ___2088::ItemOffset_t const ___2863 = m_szCoordinateArray[___1839].itemOffset(); ___476(___2863 <= uint8_t(-1)); m_nszOffsets[___1839] = uint8_t(___2863); } } ___2088::ItemOffset_t ___1337::___2780() const { return m_numCellsInSubzone; } uint16_t ___1337::numRefNszs() const { return m_numRefNszs; } uint16_t ___1337::numRefPartitions() const { return m_numRefPartitions; } PartitionSubzone const* ___1337::refPtnNszs() const { return &m_refPtnNszArray[0]; } uint32_t const* ___1337::___3317() const { return &m_refNszArray[0]; } uint8_t const* ___1337::refPtn2BitOffsets() const { if (m_numRefPartitions > MAX_REFS_FOR_2_BIT_COMPRESSION) throw ("2-bit array requested for node map compression requiring > 2 bits."); return &m_refPtn2BitOffsets[0]; } uint8_t const* ___1337::refPtn4BitOffsets() const { if (m_numRefPartitions <= MAX_REFS_FOR_2_BIT_COMPRESSION) throw ("4-bit array requested for node map compression requiring only 2 bits."); else if (m_numRefPartitions > MAX_REFS_FOR_4_BIT_COMPRESSION) throw ("4-bit array requested for node map compression requiring > 4 bits."); return &m_refPtn4BitOffsets[0]; } uint8_t const* ___1337::refPtn8BitOffsets() const { if (m_numRefPartitions <= MAX_REFS_FOR_4_BIT_COMPRESSION) throw ("8-bit array requested for node map compression requiring only 4 bits."); else if (m_numRefPartitions > MAX_REFS_FOR_8_BIT_COMPRESSION) throw ("8-bit array requested for node map compression requiring > 8 bits."); return &m_refPtn8BitOffsets[0]; } uint16_t const* ___1337::refPtn16BitOffsets() const { if ( m_numRefPartitions <= MAX_REFS_FOR_8_BIT_COMPRESSION ) throw ("16-bit array requested for node map compression requiring < 16 bits."); return &m_refPtn16BitOffsets[0]; } uint8_t const* ___1337::refNsz2BitOffsets() const { if (m_numRefNszs > MAX_REFS_FOR_2_BIT_COMPRESSION) throw ("2-bit array requested for node map compression requiring > 2 bits."); return &m_refNsz2BitOffsets[0]; } uint8_t const* ___1337::___3319() const { if (m_numRefNszs <= MAX_REFS_FOR_2_BIT_COMPRESSION) throw ("4-bit array requested for node map compression requiring only 2 bits.");
else if (m_numRefNszs > MAX_REFS_FOR_4_BIT_COMPRESSION) throw ("4-bit array requested for node map compression requiring > 4 bits."); return &m_refNsz4BitOffsets[0]; } uint8_t const* ___1337::___3320() const { if (m_numRefNszs <= MAX_REFS_FOR_4_BIT_COMPRESSION) throw ("8-bit array requested for node map compression requiring only 4 bits."); else if (m_numRefNszs > MAX_REFS_FOR_8_BIT_COMPRESSION) throw ("8-bit array requested for node map compression requiring > 8 bits."); return &m_refNsz8BitOffsets[0]; } uint16_t const* ___1337::___3318() const { if ( m_numRefNszs <= MAX_REFS_FOR_8_BIT_COMPRESSION ) throw ("16-bit array requested for node map compression requiring < 16 bits."); return &m_refNsz16BitOffsets[0]; } uint8_t const* ___1337::___2762() const { return &m_nszOffsets[0]; } }}
