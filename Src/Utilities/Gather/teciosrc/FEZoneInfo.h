 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <algorithm>
#include <utility>
#include <vector>
#include <boost/shared_ptr.hpp>
#include <boost/unordered_map.hpp>
#include <boost/unordered_set.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "FESubzonePartitionerInterface.h"
#include "fileStuff.h"
#include "SzlFileLoader.h"
namespace tecplot { namespace ___3931 { class ___1348 { UNCOPYABLE_CLASS(___1348); public: ___1348( ___463                                      ___2779, ___2716                                      ___2819, ___680                                    ___2787, boost::shared_ptr<FESubzonePartitionerInterface> subzonePartitioner, ___2088::___2978                         ___2975 = ___2088::UNKNOWN_PARTITION, ___463                                      numGhostCells = 0, ___2716                                      numGhostNodes = 0) : m_numCells(___2779) , m_numNodes(___2819) , m_numCorners(___2787) , m_subzonePartitioner(subzonePartitioner) , m_partition(___2975) , m_numGhostCells(numGhostCells) , m_numGhostNodes(numGhostNodes) , m_numReferencedPartitions(0) {} ~___1348() {} typedef boost::unordered_map<___2088::SubzoneOffset_t, boost::unordered_set<PartitionSubzone> > NeighborCszRefMap; typedef boost::unordered_map<___2088::SubzoneOffset_t, std::vector<___2477> > NszMinMaxMap; static ___2088::SubzoneOffset_t calcNumSubzones(___81 ___2810) { REQUIRE(___2810>0); REQUIRE(___2088::MAX_ITEM_OFFSET+1==DEFAULT_SUBZONE_MAX_FE_SIZE); ___2088::SubzoneOffset_t const numSubzones = ___2088::SubzoneOffset_t( 1 + ( (___2810-1) >> ___2088::ItemOffsetBitSize ) ); ENSURE(numSubzones > 0 && numSubzones <= ___2810); return numSubzones; } ___2088::___2978 getPartition() const { return m_partition; } ___463   ___1764() const { return m_numCells; } ___2716   ___1766() const { return m_numNodes; } ___680 ___1765() const { return m_numCorners; } ___463   getNumGhostCells() const { return m_numGhostCells; } ___2716   getNumGhostNodes() const { return m_numGhostNodes; } inline ___2088::SubzoneOffset_t ___2781() const { ___2088::SubzoneOffset_t const ___2781 = m_subzonePartitioner->___2781(); ENSURE(___2781 == 0 || ___2781 == calcNumSubzones(m_numCells - m_numGhostCells)); return ___2781; } ___2088::ItemOffset_t ___2780(___2088::SubzoneOffset_t ___467) const { return m_subzonePartitioner->___2780(___467); } ___463 ___4606(___2088 szCoordinate) const { return m_subzonePartitioner->___4606(szCoordinate); } inline ___2088::SubzoneOffset_t ___2821() const { ___2088::SubzoneOffset_t const ___2821 = m_subzonePartitioner->___2821(); ENSURE(___2821 == 0 || ___2821 == calcNumSubzones(m_numNodes - m_numGhostNodes)); return ___2821; } ___2088::ItemOffset_t ___2820(___2088::SubzoneOffset_t ___2732) const { return m_subzonePartitioner->___2820(___2732);} ___2716 ___4655(___2088 szCoordinate) const { return m_subzonePartitioner->___4655(szCoordinate); } void addNeighborNodeCoordinate(___2716 ___4654, ___2088 szCoordinate) { m_subzonePartitioner->setNodeSubzoneCoordinate(___4654, szCoordinate); }
inline void addNeighborCszInfo( tecplot::___2088::___2978 neighbor, std::vector<___2716> const& nodes, std::vector<boost::unordered_set<___2088::SubzoneOffset_t> > const& cellSubzones, std::vector<std::vector<___2477> > const& varMinMaxes) { REQUIRE(getPartition() != ___2088::INVALID_PARTITION); REQUIRE(neighbor != getPartition()); REQUIRE(!nodes.empty()); REQUIRE(nodes.size() == cellSubzones.size()); REQUIRE(cellSubzones.size() == varMinMaxes.size()); if (m_numReferencedPartitions == 0) { m_numReferencedPartitions = 2; m_referencedPartitions.alloc(m_numReferencedPartitions); m_referencedPartitions[0] = getPartition(); m_referencedPartitions[1] = neighbor; } else { std::set<tecplot::___2088::___2978> partitions(m_referencedPartitions.begin(), m_referencedPartitions.end(m_numReferencedPartitions)); if (partitions.insert(neighbor).second) { ++m_numReferencedPartitions; m_referencedPartitions.___935(); m_referencedPartitions.alloc(m_numReferencedPartitions); int i = 0; for (std::set<tecplot::___2088::___2978>::iterator ___2975 = partitions.begin(); ___2975 != partitions.end(); ++___2975) { m_referencedPartitions[i++] = *___2975; } } } for(size_t i = 0; i < nodes.size(); ++i) { ___2088 szCoordinate = ___3922(nodes[i]); ___2088::SubzoneOffset_t ___2755 = szCoordinate.subzoneOffset(); for (boost::unordered_set<___2088::SubzoneOffset_t>::const_iterator ___467 = cellSubzones[i].begin(); ___467 != cellSubzones[i].end(); ++___467) { m_neighborCszRefs[___2755].insert(PartitionSubzone(neighbor, *___467)); } std::vector<___2477>& minMaxes = m_nszMinMaxes[___2755]; if (minMaxes.empty()) minMaxes.resize(varMinMaxes[i].size()); for(size_t ___2103 = 0; ___2103 < varMinMaxes[i].size(); ++___2103) minMaxes[___2103].include(varMinMaxes[i][___2103]); } } inline void addNeighborCszRef(___2088::SubzoneOffset_t ___2755, ___2088 cellCoordinate) { m_neighborCszRefs[___2755].insert(PartitionSubzone(cellCoordinate.___2975(), cellCoordinate.subzoneOffset())); } NeighborCszRefMap const& getNeighborCszRefs() const { return m_neighborCszRefs; } NszMinMaxMap const& getNszMinMaxes() const { return m_nszMinMaxes; } inline void resetNeighborInfo() { m_neighborCszRefs.clear(); m_nszMinMaxes.clear(); m_numReferencedPartitions = 0; m_referencedPartitions.___935(); } inline ___2088 ___3922(___2716 ___4654) const { REQUIRE(0 <= ___4654 && ___4654 < m_numNodes); return m_subzonePartitioner->___3922(___4654); } inline ___2088 szCoordinateAtZoneCell(___2716 zoneCell) const { REQUIRE(0 <= zoneCell && zoneCell < m_numCells); return m_subzonePartitioner->szCoordinateAtZoneCell(zoneCell); } inline void addReferencedPartitions(std::set<tecplot::___2088::___2978> const& partitionSet) { REQUIRE(getPartition() != ___2088::INVALID_PARTITION); REQUIRE(!partitionSet.empty()); std::set<tecplot::___2088::___2978> partitions(partitionSet); for(tecplot::___2088::___2978 i = 0; i < m_numReferencedPartitions; ++i)
partitions.insert(m_referencedPartitions[i]); partitions.insert(getPartition()); if (m_numReferencedPartitions != static_cast<tecplot::___2088::___2978>(partitions.size())) { m_referencedPartitions.___935(); m_referencedPartitions.alloc((uint64_t)partitions.size()); int i = 0; for (std::set<tecplot::___2088::___2978>::iterator ___2975 = partitions.begin(); ___2975 != partitions.end(); ++___2975) { m_referencedPartitions[i] = *___2975; ++i; } m_numReferencedPartitions = i; } } tecplot::___2088::___2978 getNumReferencedPartitions() const { return m_numReferencedPartitions; } PartitionArray const& getReferencedPartitions() const { return m_referencedPartitions; } private: ___463 const                                m_numCells; ___2716 const                                m_numNodes; ___680 const                              m_numCorners; boost::shared_ptr<FESubzonePartitionerInterface> m_subzonePartitioner; ___2088::___2978                         m_partition; ___463 const                                m_numGhostCells; ___2716 const                                m_numGhostNodes; NeighborCszRefMap                                m_neighborCszRefs; NszMinMaxMap                                     m_nszMinMaxes; tecplot::___2088::___2978                m_numReferencedPartitions; PartitionArray                                   m_referencedPartitions; }; }}
