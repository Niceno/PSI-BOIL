 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <limits>
#include <vector>
#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "MASTER.h"
#include "GLOBAL.h"
#include "CodeContract.h"
#include "fileio.h"
namespace tecplot { namespace tecioszl { struct ___1360 { static double const GHOST_VALUE; typedef boost::shared_ptr<___1360> Ptr; FieldDataType_e ___2457; size_t ___2666; ValueLocation_e ___2667; ___1360(); virtual ~___1360(); virtual void ___3502(size_t index, double ___4312) = 0; virtual double ___1778(size_t index) = 0; virtual void appendValue(double ___4312) = 0; virtual void reserveValues(size_t count) = 0; virtual void assignValues(size_t count, double ___4312) = 0; virtual void* getRawPointer() = 0; virtual size_t storedValueCount() = 0; void ___1757(double& minVal, double& maxVal) const; void ___3497(double minVal, double maxVal); virtual void writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const = 0; virtual uint64_t sizeInFile(bool ___4478) const = 0; virtual void readFromFile(tecplot::___3931::___1397& inputFile, bool readASCII) = 0; static Ptr makePtr(tecplot::___3931::___1397& inputFile, bool readASCII); protected: void updateMinMax(double ___4312); double m_minValue; double m_maxValue; }; template <typename T> class TypedFieldData : public ___1360 { public: TypedFieldData(); void ___3502(size_t index, double ___4312); double ___1778(size_t index); void appendValue(double ___4312); void reserveValues(size_t count); void assignValues(size_t count, double ___4312); void* getRawPointer(); size_t storedValueCount(); virtual void writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const; virtual uint64_t sizeInFile(bool ___4478) const; virtual void readFromFile(tecplot::___3931::___1397& inputFile, bool readASCII); private: std::vector<T> ___2669; }; class TypedFieldDataFactory { public: boost::shared_ptr<___1360> make(FieldDataType_e type); }; template <typename T> inline TypedFieldData<T>::TypedFieldData() { } template <typename T> inline void TypedFieldData<T>::___3502(size_t index, double ___4312) { ___2669[index] = static_cast<T>(___4312); updateMinMax(___4312); } template <typename T> inline double TypedFieldData<T>::___1778(size_t index) { return static_cast<double>(___2669[index]); } template <typename T> inline void TypedFieldData<T>::appendValue(double ___4312) { ___2669.push_back(static_cast<T>(___4312)); updateMinMax(___4312); } template <typename T> inline void TypedFieldData<T>::reserveValues(size_t count) { ___2669.reserve(count); } template <typename T> inline void TypedFieldData<T>::assignValues(size_t count, double ___4312) { ___2669.assign(count, static_cast<T>(___4312)); updateMinMax(___4312); } template <typename T> inline void* TypedFieldData<T>::getRawPointer() { if (___2669.empty()) return NULL; return (reinterpret_cast<void*>(&___2669[0])); } template <typename T> inline size_t TypedFieldData<T>::storedValueCount() { return ___2669.size(); } inline boost::shared_ptr<___1360> TypedFieldDataFactory::make(FieldDataType_e type) { boost::shared_ptr<___1360> ___3356; switch(type) { case FieldDataType_Float:
___3356 = boost::make_shared<TypedFieldData<float> >(); break; case FieldDataType_Double: ___3356 = boost::make_shared<TypedFieldData<double> >(); break; case FieldDataType_Int32: ___3356 = boost::make_shared<TypedFieldData<int32_t> >(); break; case FieldDataType_Int16: ___3356 = boost::make_shared<TypedFieldData<int16_t> >(); break; case FieldDataType_Byte: case ___1363: ___3356 = boost::make_shared<TypedFieldData<uint8_t> >(); break; default: ___476(___1303); ___3356 = boost::make_shared<TypedFieldData<float> >(); break; } ___3356->___2457 = type; return ___3356; } template <typename T> inline void TypedFieldData<T>::writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const { tecplot::tecioszl::writeScalar(outputFile, (uint32_t)___2457, ___4478); tecplot::tecioszl::writeScalar(outputFile, (uint64_t)___2666, ___4478); tecplot::tecioszl::writeScalar(outputFile, (uint32_t)___2667, ___4478); tecplot::tecioszl::writeScalar(outputFile, m_minValue, ___4478); tecplot::tecioszl::writeScalar(outputFile, m_maxValue, ___4478); tecplot::tecioszl::writeVector(outputFile, ___2669, ___4478); } template <typename T> uint64_t TypedFieldData<T>::sizeInFile(bool ___4478) const { return tecplot::tecioszl::scalarSizeInFile((uint32_t)___2457, ___4478) + tecplot::tecioszl::scalarSizeInFile((uint64_t)___2666, ___4478) + tecplot::tecioszl::scalarSizeInFile((uint32_t)___2667, ___4478) + tecplot::tecioszl::scalarSizeInFile(m_minValue, ___4478) + tecplot::tecioszl::scalarSizeInFile(m_maxValue, ___4478) + tecplot::tecioszl::vectorSizeInFile(___2669, ___4478); } template <typename T> inline void TypedFieldData<T>::readFromFile(tecplot::___3931::___1397& inputFile, bool readASCII) { tecplot::tecioszl::readScalar(inputFile, ___2666, readASCII); uint32_t tempValueLocation; tecplot::tecioszl::readScalar(inputFile, tempValueLocation, readASCII); ___2667 = static_cast<ValueLocation_e>(tempValueLocation); tecplot::tecioszl::readScalar(inputFile, m_minValue, readASCII); tecplot::tecioszl::readScalar(inputFile, m_maxValue, readASCII); tecplot::tecioszl::readVector(inputFile, ___2669, readASCII); } inline void padCCValuesIfNecessary(___1360& ___1349, ___2225 iMax, ___2225 jMax, ___2225 kMax) { ___2225 storedValueCount = checked_numeric_cast<___2225>(___1349.storedValueCount()); if (iMax > 1 && (jMax > 1 || kMax > 1) && storedValueCount % iMax == (iMax - 1)) { ___1349.appendValue(___1360::GHOST_VALUE); ++storedValueCount; } if (jMax > 1 && kMax > 1 && storedValueCount % ((int64_t)iMax * jMax) == ((int64_t)iMax * (jMax - 1))) { for (___2225 ___1839 = 0; ___1839 < iMax; ++___1839) ___1349.appendValue(___1360::GHOST_VALUE); } } }}
