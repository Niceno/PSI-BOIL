 #pragma once
#include "MASTER.h"
#include "GLOBAL.h"
#include "basicTypes.h"
#include "fileStuff.h"
#include "FileWriterInterface.h"
#include "LightweightVector.h"
#include "stringformat.h"
inline void getBitIndexAndOffset(size_t& ind, size_t& ___2863, size_t ___2083) { ind = ___2083 / 8; ___2863 = ___2083 - ind * 8; } template <typename T> inline void setBit(T& uInt8Array, size_t ___2083) { size_t ind; size_t ___2863; getBitIndexAndOffset(ind, ___2863, ___2083); uInt8Array[ind] |= 1 << ___2863; } template <typename T> inline void clearBit(T& uInt8Array, size_t ___2083) { size_t ind; size_t ___2863; getBitIndexAndOffset(ind, ___2863, ___2083); uInt8Array[ind] &= ~(1 << ___2863); } template <typename T> inline uint8_t bitValue(T const& uInt8Array, size_t ___2083) { size_t ind; size_t ___2863; getBitIndexAndOffset(ind, ___2863, ___2083); return (uInt8Array[ind] & (1 << ___2863)); } template <typename T> inline bool inBitSet(T const& uInt8Array, size_t ___2083) { size_t ind; size_t ___2863; getBitIndexAndOffset(ind, ___2863, ___2083); return ((uInt8Array[ind] & (uint8_t(0x1) << ___2863)) != 0); } template <typename T> inline void addToBitSet(T& uInt8Array, size_t ___2083) { size_t ind; size_t ___2863; getBitIndexAndOffset(ind, ___2863, ___2083); uInt8Array[ind] |= (uint8_t(0x1) << ___2863); } template <typename T> inline void removeFromBitSet(T& uInt8Array, size_t ___2083) { size_t ind; size_t ___2863; getBitIndexAndOffset(ind, ___2863, ___2083); uInt8Array[ind] &= (uint8_t(0xFF) - (uint8_t(0x1) << ___2863)); } namespace tecplot { namespace ___3931 { ___81 const ___2743 = BAD_ANY_INDEX; static size_t const ___944 = 10; template <typename T, bool ___2023, int base> ___372 encodeAsciiValue(char *str, int ___418, T const& ___4296); template <typename T, bool ___2023, int base> ___372 ___4561(FileWriterInterface& file, char const*          ___970, ___81           ___1249, size_t               ___2795, T const*             ___4297, size_t               ___4332 = ___944); template <typename OutType> ___372 ___4526(FileWriterInterface&        file, char const*                 ___970, ___81                  ___1249, size_t                      ___2795, ___2477 const*               ___4297, size_t                      ___4332 = ___944 / 2); template <typename T, bool ___2023, int base> ___372 writeValue( FileWriterInterface& file, char const*          ___970, T const&             ___4296) { return ___4561<T, ___2023, base>(file, ___970, ___2743, 1, &___4296); } inline ___372 ___4542( FileWriterInterface& file, char const*          ___970, char const*          ___4296) { ___372 ___2037 = ___4224; REQUIRE(file.___2039()); REQUIRE(VALID_REF(___970) && strlen(___970) < ___206); REQUIRE(VALID_REF(___4296)); if (file.___2000()) ___2037 = (file.fprintf("%*s  %s\r\n", -___206, ___970, ___4296) > 0); else ___2037 = (file.fwrite(___4296, 1, strlen(___4296)) == strlen(___4296)); ENSURE(VALID_BOOLEAN(___2037)); return ___2037; } template <typename T, bool ___2023> uint64_t arrayValueSizeInFile(bool ___2000); template <typename T, bool ___2023>
uint64_t arraySizeInFile(size_t ___2795, bool ___2000); template <typename T, bool ___2023> uint64_t valueSizeInFile(bool ___2000); }}
