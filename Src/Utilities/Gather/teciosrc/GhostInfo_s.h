 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <algorithm>
#include <iterator>
#include <sstream>
#include <stdexcept>
#include <vector>
#include <boost/unordered_set.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "basicTypes.h"
#include "fileio.h"
struct GhostInfo_s { std::vector<int64_t> m_items; std::vector<int32_t> m_neighbors; std::vector<int64_t> m_neighborItems; GhostInfo_s() {} GhostInfo_s(std::vector<int32_t> const& ___2097) { throwIfDuplicateItems(___2097); std::copy(___2097.begin(), ___2097.end(), std::back_inserter(m_items)); m_neighbors.assign(___2097.size(), 0); m_neighborItems.assign(___2097.size(), 0); } GhostInfo_s(std::vector<int64_t> const& ___2097) : m_items(___2097) { throwIfDuplicateItems(___2097); m_neighbors.assign(___2097.size(), 0); m_neighborItems.assign(___2097.size(), 0); } GhostInfo_s( std::vector<int32_t> const& ___2097, std::vector<int32_t> const& neighbors, std::vector<int32_t> const& neighborItems) : m_neighbors(neighbors) { throwIfDuplicateItems(___2097); std::copy(___2097.begin(), ___2097.end(), std::back_inserter(m_items)); std::copy(neighborItems.begin(), neighborItems.end(), std::back_inserter(m_neighborItems)); } GhostInfo_s( std::vector<int64_t> const& ___2097, std::vector<int32_t> const& neighbors, std::vector<int64_t> const& neighborItems) : m_items(___2097) , m_neighbors(neighbors) , m_neighborItems(neighborItems) { throwIfDuplicateItems(___2097); } template <typename T> void throwIfDuplicateItems(std::vector<T> const& ___2097) { boost::unordered_set<T> ___2098; for(size_t i = 0; i < ___2097.size(); ++i) { if (!___2098.insert(___2097[i]).second) { size_t ___2103 = 0; for(___2103 = 0; ___2103 < i; ++___2103) if (___2097[___2103] == ___2097[i]) break; ___476(___2103 < i); std::ostringstream ___2890; ___2890 << "Duplicate item " << ___2097[i] << " detected at position " << i + 1 << "; duplicates item at position " << ___2103 + 1; throw std::runtime_error(___2890.str().c_str()); } } } bool empty() const { return m_items.empty(); } void writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const { tecplot::tecioszl::writeVector(outputFile, m_items, ___4478); tecplot::tecioszl::writeVector(outputFile, m_neighbors, ___4478); tecplot::tecioszl::writeVector(outputFile, m_neighborItems, ___4478); } uint64_t sizeInFile(bool ___4478) const { return tecplot::tecioszl::vectorSizeInFile(m_items, ___4478) + tecplot::tecioszl::vectorSizeInFile(m_neighbors, ___4478) + tecplot::tecioszl::vectorSizeInFile(m_neighborItems, ___4478); } GhostInfo_s(tecplot::___3931::___1397& inputFile, bool readASCII) { tecplot::tecioszl::readVector(inputFile, m_items, readASCII); tecplot::tecioszl::readVector(inputFile, m_neighbors, readASCII); tecplot::tecioszl::readVector(inputFile, m_neighborItems, readASCII); } };
