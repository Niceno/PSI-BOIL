 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <map>
#include <set>
#include <stdexcept>
#include <string>
#include <boost/shared_ptr.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "basicTypes.h"
#include "fileio.h"
#include "Geom_s.h"
#include "IJK.h"
#include "SzlFileLoader.h"
#include "Text_s.h"
#include "Zone_s.h"
namespace tecplot { namespace tecioszl { class ___3968 { public: class Error : public std::runtime_error { public: explicit Error(std::string const& ___2430) : runtime_error(___2430) {} }; ___3968(); ___3968( std::string const& ___4175, std::string const& ___4348, int32_t            defaultVarType); virtual ~___3968(); void ___19( char    const* ___4688, int32_t const  ___4690, int64_t const  ___1907, int64_t const  ___2114, int64_t const  ___2159, double  const  ___3638, int32_t const  ___3783, int32_t const  ___2972, int64_t const  ___2800, int32_t const  ___1282, int64_t const  ___4190, int64_t const  ___2784, int64_t const  ___4186, int32_t const* varTypes, int32_t const* ___2980, int32_t const* ___4324, int32_t const* ___3549, int32_t const  ___3547); void renumberZones(std::vector<int32_t> const& zoneNumbers); void dropLastZone(); void setPartitionOwners(std::vector<int> const& partitionOwners); template <typename T> void addFEZonePartition( int32_t                     zone, int32_t                     ___2975, int64_t                     ___2819, int64_t                     ___2779, std::vector<T>       const& gnodes, std::vector<int32_t> const& gnpartitions, std::vector<T>       const& gnpnodes, std::vector<T>       const& gcells); void addIJKZonePartition( int32_t zone, int32_t ___2975, int64_t iMin, int64_t jMin, int64_t kMin, int64_t iMax, int64_t jMax, int64_t kMax); void ___8(std::string const& ___2683, std::string const& ___4312); void ___20(int32_t zone, std::string const& ___2683, std::string const& ___4312); void ___18(int32_t ___4334, std::string const& ___2683, std::string const& ___4312); void ___6(std::vector<std::string> const& ___2171); void ___9( double ___4572, double ___4589, double ___4713, CoordSys_e ___3157, ___372 ___2002, ___1170 zone, ___514 color, ___514 ___1409, ___372 ___2020, GeomType_e ___1649, LinePattern_e ___2261, double ___2984, double ___2287, uint16_t ___2791, ArrowheadStyle_e arrowheadStyle, ArrowheadAttachment_e arrowheadAttachment, double arrowheadSize, double arrowheadAngle, Scope_e ___3440, Clipping_e ___493, ___2225 ___2833, ___2225 const* ___2835, float const* ___4570, float const* ___4587, float const* ___4710, char const* ___2325); void ___9(tecioszl::___1554 const& ___1553); void ___16( double ___4572, double ___4589, double ___4711, CoordSys_e ___3157, ___372 ___2002, ___1170 zone, Font_e ___1441, Units_e ___1450, double ___1448, TextBox_e ___410, double ___408, double ___406, ___514 ___402, ___514 ___404, double ___56, TextAnchor_e ___38, double ___2285, ___514 ___4078, Scope_e ___3440, Clipping_e ___493, char const* ___4040, char const* ___2325); void ___16(tecioszl::Text const& ___4040);
void ___429(___2225 count, void const* data, bool ___2011); void ___431(___2225 count, int32_t const* ___2721); template <typename T> void ___430(Zone_s* zonePtr, T const* faceConnections); void copyConnectivity(___3968 const& ___2886); int32_t ___2841() const; int32_t ___2844() const; int32_t numZonePartitions(int32_t zone) const; std::string ___1392() const; void ___4164(bool checkConnectivity) const; void clear(int32_t numZonesToRetain, int32_t const* zonesToRetain); bool empty(); std::string const& ___4175() const { return ___2647; } std::vector<std::string> const& variableNames() const { return ___2672; } int32_t defaultVarType() const { return m_defaultVarType; } std::set<___3491> zoneSet() const; std::set<___3491> unflushedZoneSet() const; bool ___894() const; Zone_s* zonePtr(___3931::___4634 ___4656  ) const; ___3931::___4634 baseZoneForVar(___3931::___4634 ___4656, ___3931::___4350 ___4366) const; Zone_s* zonePtrForVar(___3931::___4634 ___4656, ___3931::___4350 ___4366) const; ___3931::___4634 baseZoneForConnectivity(___3931::___4634 ___4656) const; Zone_s* zonePtrForConnectivity(___3931::___4634 ___4656) const; boost::shared_ptr<AuxData_s> const& dataSetAuxData() const { return ___2397; } std::vector<boost::shared_ptr<AuxData_s> > const& varAuxData() const { return ___2670; } std::vector<___1554> const& geoms() const { return ___2463; } std::vector<Text> const& texts() const { return ___2638; } std::vector<std::vector<std::string> > const& customLabels() const { return ___2396; } bool validZoneNum(___3931::___4634 ___4656) const { return zonePtr(___4656) != NULL; } bool validPartitionNum(___3931::___4634 ___4656, ___3931::___4634 partitionNum) const; void flattenSinglePartitionZones(); ___3931::___1391 sizeInFile(bool ___4478) const; void writeToFile(___3931::FileWriterInterface& outputFile, ___3931::___1391 fileLoc, bool ___4478) const; ___3968(___3931::___1397& inputFile, bool readASCII); private: Zone_s* getAndCheckZonePtr(int32_t zone) const; void updateBaseZoneForVarCache() const; void updateBaseZoneForConnectivityCache() const; std::string ___2647; std::vector<std::string> ___2672; int32_t m_defaultVarType; ___3931::___4634 m_nextZoneIndex; ___3931::___4634 m_lastZoneFlushedToDisk; Zone_s::ZoneMap m_zoneMap; boost::shared_ptr<AuxData_s> ___2397; std::vector<boost::shared_ptr<AuxData_s> > ___2670; std::vector<___1554> ___2463; std::vector<Text> ___2638; std::vector<std::vector<std::string> > ___2396; mutable std::vector<std::vector<___3931::___4634> > m_baseZoneForVar; mutable std::vector<___3931::___4634> m_baseZoneForConnectivity; }; }}
