#include "SZLOrderedPartitionWriter.h"
#include "ThirdPartyHeadersBegin.h"
#include <sstream>
#include "ThirdPartyHeadersEnd.h"
#include "writeValueArray.h"
namespace tecplot { namespace ___3931 { class ItemSetIterator; SZLOrderedPartitionWriter::SZLOrderedPartitionWriter( ItemSetIterator&                     varIter, ___4634                          zone, ___4634                          ASSERT_ONLY(___341), ___2088::___2978             ___2975, std::vector<___372> const&        ___4562, ___372                            ___4497, ___37&                          ___36, boost::shared_ptr<___1879 const> zoneInfo) : SZLOrderedZoneWriter(varIter, static_cast<___4634>(___2975), 0, ___4562, ___4497, ___36, zoneInfo) { REQUIRE(0 <= ___341 && ___341 <= zone); std::ostringstream labelStream; labelStream << "partitionNumForZone" << zone + 1 << "*"; std::ostringstream suffixStream; suffixStream << "ForZone" << zone + 1 << "Partition"; m_headerWriter.setMarkerAndLabels("partitionMarker*", SZPLT_PARTITION_MARKER, labelStream.str(), suffixStream.str()); setZoneNumberLabel(labelStream.str()); } SZLOrderedPartitionWriter::~SZLOrderedPartitionWriter() {} ___2477 SZLOrderedPartitionWriter::varMinMax(___4350 ___4334) { ___2477 minMax = ___4707::varMinMax(___4334); ___1879::NszMinMaxMap const& nszMinMaxMap = m_ijkZoneInfo->getNszMinMaxes(); for (___1879::NszMinMaxMap::const_iterator it = nszMinMaxMap.begin(); it != nszMinMaxMap.end(); ++it) minMax.include(it->second[___4334]); return minMax; } } }
