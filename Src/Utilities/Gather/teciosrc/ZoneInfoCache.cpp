#include "ZoneInfoCache.h"
#include "ThirdPartyHeadersBegin.h"
#include <boost/foreach.hpp>
#include <boost/make_shared.hpp>
#include <boost/ref.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "FEZoneInfo.h"
#include "IJKZoneInfo.h"
#include "ItemSetIterator.h"
#include "ORBFESubzonePartitioner.h"
#include "NoOpFESubzonePartitioner.h"
#include "PartitionTecUtilDecorator.h"
#include "zoneUtil.h"
namespace tecplot { namespace ___3931 { ZoneInfoCache::ZoneInfoCache( ___37*               ___36, ___1842 const&                maxIJKSubzoneSize, ___2088::ItemOffset_t feSubzoneSize) : ___2335(___36) , m_maxIJKSubzoneSize(maxIJKSubzoneSize) , m_feSubzoneSize(feSubzoneSize) {} template<typename ZoneInfoType> void ZoneInfoCache::storeForSharedZones( boost::unordered_map<___4634, boost::shared_ptr<ZoneInfoType> >& zoneInfos, boost::shared_ptr<ZoneInfoType>                                      zoneInfo, ___4634                                                          zone) { ___3499 sharedZoneSet = ___2335->___543(zone + 1); if (sharedZoneSet) { for (___3491 sharedZone = ___2335->___3489(sharedZoneSet, zone + 1); sharedZone != 0; sharedZone = ___2335->___3489(sharedZoneSet, sharedZone)) { zoneInfos[static_cast<___4634>(sharedZone - 1)] = zoneInfo; } ___2335->___3482(&sharedZoneSet); } } template <typename ZoneInfoType> void ZoneInfoCache::storeForSharedPartitions( boost::unordered_map<___4634, boost::unordered_map<___4634, boost::shared_ptr<ZoneInfoType> > >& zoneInfos, boost::shared_ptr<ZoneInfoType> zoneInfo, ___4634 zone, ___4634 ___2975) { ___3499 sharedZoneSet = ___2335->___543(zone + 1); if (sharedZoneSet) { for (___3491 sharedZone = ___2335->___3489(sharedZoneSet, zone + 1); sharedZone != ___4037; sharedZone = ___2335->___3489(sharedZoneSet, sharedZone)) { zoneInfos[static_cast<___4634>(sharedZone - 1)][___2975] = zoneInfo; } ___2335->___3482(&sharedZoneSet); } } boost::shared_ptr<___1879> ZoneInfoCache::getIJKZoneInfo(___4634 zone) { REQUIRE(___4639(*___2335, zone) && !zoneIsPartitioned(*___2335, zone)); boost::shared_ptr<___1879> zoneInfo = m_ijkZoneInfos[zone]; if (!zoneInfo) { ___1842 ___4631; ___2335->___4613(zone + 1, ___4631); zoneInfo = boost::make_shared<___1879>(___4631, m_maxIJKSubzoneSize, DEFAULT_MINIMIZE_IJK_NUM_SUBZONES); m_ijkZoneInfos[zone] = zoneInfo; storeForSharedZones(m_ijkZoneInfos, zoneInfo, zone); } zoneInfo->resetNeighborInfo(); return zoneInfo; } boost::shared_ptr<___1879> ZoneInfoCache::getIJKZonePartitionInfo( ___4634 zone, ___4634 ___2975) { REQUIRE(0 <= zone && ___2335->___4636(zone + 1)); REQUIRE(___4639(*___2335, zone) && zoneIsPartitioned(*___2335, zone)); REQUIRE(0 <= ___2975 && ___2975 < ___2335->zoneGetNumPartitions(zone + 1)); boost::shared_ptr<___1879> zoneInfo = m_ijkZonePartitionInfos[zone][___2975]; if (!zoneInfo) { ___1842 ___1841; ___2335->zonePartitionGetIJK(zone + 1, ___2975 + 1, ___1841); ___1842 partitionOffset; ___2335->zonePartitionGetIJKOffset(zone + 1, ___2975 + 1, partitionOffset); ___1842 partitionMaxCorner = ___1841 + partitionOffset; ___1842 ___4630; ___2335->___4613(zone + 1, ___4630); zoneInfo = boost::make_shared<___1879>
(___1841, m_maxIJKSubzoneSize, ___2975, true, partitionMaxCorner.i() == ___4630.i(), partitionMaxCorner.___2103() == ___4630.___2103(), partitionMaxCorner.___2132() == ___4630.___2132()); m_ijkZonePartitionInfos[zone][___2975] = zoneInfo; storeForSharedPartitions(m_ijkZonePartitionInfos, zoneInfo, zone, ___2975); } zoneInfo->resetNeighborInfo(); return zoneInfo; } boost::shared_ptr<___1348> ZoneInfoCache::getFEZoneInfo(___4634 zone) { REQUIRE(0 <= zone && ___2335->___4636(zone + 1)); REQUIRE(!___4639(*___2335, zone) && !___4641(*___2335, zone) && !zoneIsPartitioned(*___2335, zone)); boost::shared_ptr<___1348> zoneInfo = m_feZoneInfos[zone]; if (!zoneInfo) { ___1842 ___1841; ___2335->___4613(zone + 1, ___1841); ___463 ___2779 = static_cast<___463>(___1841.___2103()); ___2716 ___2819 = static_cast<___2716>(___1841.i()); ___680 ___2787 = static_cast<___680>(___1841.___2132()); boost::shared_ptr<FESubzonePartitionerInterface> partitioner; if (___3892(___2335->___4618(zone + 1))) partitioner = boost::make_shared<OrbFESubzonePartitioner>(boost::ref(*___2335), zone, m_feSubzoneSize); else partitioner = boost::make_shared<NoOpFESubzonePartitioner>(boost::ref(*___2335), zone); zoneInfo = boost::make_shared<___1348>(___2779, ___2819, ___2787, partitioner, static_cast<___2088::___2978>(zone)); m_feZoneInfos[zone] = zoneInfo; storeForSharedZones(m_feZoneInfos, zoneInfo, zone); } zoneInfo->resetNeighborInfo(); return zoneInfo; } boost::shared_ptr<___1348> ZoneInfoCache::getFEZonePartitionInfo( ___4634 zone, ___4634 ___2975, PartitionTecUtilDecorator& partitionTecUtilDecorator) { REQUIRE(0 <= zone && ___2335->___4636(zone + 1)); REQUIRE(!___4639(*___2335, zone) && !___4641(*___2335, zone) && zoneIsPartitioned(*___2335, zone)); REQUIRE(0 <= ___2975 && ___2975 < ___2335->zoneGetNumPartitions(zone + 1)); boost::shared_ptr<___1348> zoneInfo = m_feZonePartitionInfos[zone][___2975]; if (!zoneInfo) { ___1842 ___1841; ___2335->zonePartitionGetIJK(zone + 1, ___2975 + 1, ___1841); ___463 ___2779 = static_cast<___463>(___1841.___2103()); ___2716 ___2819 = static_cast<___2716>(___1841.i()); ___680 ___2787 = static_cast<___680>(___1841.___2132()); ___463 numGhostCells = 0; GhostInfo_pa ghostCellInfo = ___2335->zonePartitionGhostCellInfoGetRef(zone + 1, ___2975 + 1); if (ghostCellInfo) numGhostCells = static_cast<___463>(___2335->ghostInfoGetNumItemsByRef(ghostCellInfo)); ___2716 numGhostNodes = 0; GhostInfo_pa ghostNodeInfo = ___2335->zonePartitionGhostNodeInfoGetRef(zone + 1, ___2975 + 1); if (ghostNodeInfo) numGhostNodes = static_cast<___463>(___2335->ghostInfoGetNumItemsByRef(ghostNodeInfo)); boost::shared_ptr<FESubzonePartitionerInterface> partitioner = boost::make_shared<OrbFESubzonePartitioner>(boost::ref(partitionTecUtilDecorator), ___2975, m_feSubzoneSize); zoneInfo = boost::make_shared<___1348>(___2779, ___2819, ___2787, partitioner, ___2975, numGhostCells, numGhostNodes);
m_feZonePartitionInfos[zone][___2975] = zoneInfo; storeForSharedPartitions(m_feZonePartitionInfos, zoneInfo, zone, ___2975); } zoneInfo->resetNeighborInfo(); return zoneInfo; } void ZoneInfoCache::remove(___4634 zone) { m_ijkZoneInfos.erase(zone); m_feZoneInfos.erase(zone); m_ijkZonePartitionInfos.erase(zone); m_feZonePartitionInfos.erase(zone); } void ZoneInfoCache::clear() { m_ijkZoneInfos.clear(); m_feZoneInfos.clear(); m_ijkZonePartitionInfos.clear(); m_feZonePartitionInfos.clear(); } template <typename MapType> void shareZoneInfosInMap(___3499 zonesToWrite, MapType& map, ___37& tecUtil) { REQUIRE(VALID_REF(zonesToWrite)); if (!map.empty()) { ___3499 cachedZoneSet = tecUtil.setAlloc(___1303); BOOST_FOREACH(typename MapType::value_type const& zoneIndexAndZoneInfoPair, map) tecUtil.setAddMember(cachedZoneSet, zoneIndexAndZoneInfoPair.first + 1, ___1303); ___3491 zone; for (zone = tecUtil.___3489(zonesToWrite, ___4037); zone != ___4037; zone = tecUtil.___3489(zonesToWrite, zone)) { ___4634 sharedZone = (___4634)tecUtil.___542(cachedZoneSet, (___4634)zone); if (sharedZone != ___4033) map[(___4634)zone - 1] = map[sharedZone - 1]; } tecUtil.___3482(&cachedZoneSet); } } template <typename MapType> void shareZonePartitionInfosInMap(___3499 zonesToWrite, MapType& map, ___37& tecUtil) { if (!map.empty()) { ___3499 cachedZoneSet = tecUtil.setAlloc(___1303); BOOST_FOREACH(typename MapType::value_type const& valuePair, map) tecUtil.setAddMember(cachedZoneSet, valuePair.first + 1, ___1303); ___3491 zone; for (zone = tecUtil.___3489(zonesToWrite, ___4037); zone != ___4037; zone = tecUtil.___3489(zonesToWrite, zone)) { ___4634 sharedZone = (___4634)tecUtil.___542(cachedZoneSet, (___4634)zone); if (sharedZone != ___4033) { typename MapType::mapped_type const& partitionMap = map[sharedZone - 1]; BOOST_FOREACH(typename MapType::mapped_type::value_type const& partitionInfoPair, partitionMap) map[(___4634)zone - 1][partitionInfoPair.first] = map[sharedZone - 1][partitionInfoPair.first]; } } tecUtil.___3482(&cachedZoneSet); } } void ZoneInfoCache::replaceDataSource(___37* ___36, ___3499 zonesToWrite) { ___2335 = ___36; if (zonesToWrite) { shareZoneInfosInMap(zonesToWrite, m_ijkZoneInfos, *___2335); shareZoneInfosInMap(zonesToWrite, m_feZoneInfos, *___2335); shareZonePartitionInfosInMap(zonesToWrite, m_ijkZonePartitionInfos, *___2335); shareZonePartitionInfosInMap(zonesToWrite, m_feZonePartitionInfos, *___2335); } } }}
