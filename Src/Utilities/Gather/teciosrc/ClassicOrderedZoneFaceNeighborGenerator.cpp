#include "ClassicOrderedZoneFaceNeighborGenerator.h"
#include "AltTecUtil.h"
namespace tecplot { namespace ___3931 { ClassicOrderedZoneFaceNeighborGenerator::ClassicOrderedZoneFaceNeighborGenerator(___37& ___36) : FaceNeighborGeneratorAbstract(___36) {} namespace { inline int ___2881(___1842 const& ___1841) { return (___1841.i() > 1 ? 1 : 0) + (___1841.___2103() > 1 ? 1 : 0) + (___1841.___2132() > 1 ? 1 : 0); } } ___372 ClassicOrderedZoneFaceNeighborGenerator::gatherUserFaceNeighbors( std::vector<int32_t>& userFaceNeighbors, ___4634 zone) const { REQUIRE(zone >= 0); ___1290 ___1272 = ___2335.___837(zone + 1); ___3499 ___1151 = 0; ___372 ___2037 = ___2335.___4612(&___1151); if (___2037) { ___1842 ___1841; ___2335.___4613(zone + 1, ___1841); if (___2881(___1841) == 3) { int32_t const iMinFace = 1; int32_t const iMaxFace = 2; int32_t const jMinFace = 3; int32_t const jMaxFace = 4; int32_t const kMinFace = 5; int32_t const kMaxFace = 6; for(int32_t ___2103 = 0; ___2103 < static_cast<int32_t>(___1841.___2103()); ++___2103) { for(int32_t ___2132 = 0; ___2132 < static_cast<int32_t>(___1841.___2132()); ++___2132) { ___476((___2132 * ___1841.___2103() + ___2103) * ___1841.i() + 1 < std::numeric_limits<int32_t>::max()); int32_t iMinCell = static_cast<int32_t>((___2132 * ___1841.___2103() + ___2103) * ___1841.i() + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, iMinCell, iMinFace); ___476(iMinCell + ___1841.i() - 2 < std::numeric_limits<int32_t>::max()); int32_t iMaxCell = static_cast<int32_t>(iMinCell + ___1841.i() - 2); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, iMaxCell, iMaxFace); } } for(int32_t i = 0; i < static_cast<int32_t>(___1841.i()); ++i) { for(int32_t ___2132 = 0; ___2132 < static_cast<int32_t>(___1841.___2132()); ++___2132) { ___476(___2132 * ___1841.i() * ___1841.___2103() + 1 < std::numeric_limits<int32_t>::max()); int32_t jMinCell = static_cast<int32_t>(___2132 * ___1841.i() * ___1841.___2103() + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, jMinCell, jMinFace); ___476(jMinCell + (___1841.___2103() - 2) * ___1841.i() < std::numeric_limits<int32_t>::max()); int32_t jMaxCell = static_cast<int32_t>(jMinCell + (___1841.___2103() - 2) * ___1841.i()); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, jMaxCell, jMaxFace); } } for(int32_t i = 0; i < static_cast<int32_t>(___1841.i()); ++i) { for(int32_t ___2103 = 0; ___2103 < static_cast<int32_t>(___1841.___2103()); ++___2103) { ___476(___2103 * ___1841.i() + i + 1 < std::numeric_limits<int32_t>::max()); int32_t kMinCell = static_cast<int32_t>(___2103 * ___1841.i() + i + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, kMinCell, kMinFace); ___476(kMinCell + (___1841.___2132() - 2) * ___1841.i() * ___1841.___2103() < std::numeric_limits<int32_t>::max()); int32_t kMaxCell = static_cast<int32_t>(kMinCell + (___1841.___2132() - 2) * ___1841.i() * ___1841.___2103()); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, kMaxCell, kMaxFace); } } } else if (___2881(___1841) == 2) { int64_t dim1; int64_t dim2; if (___1841.i() > 1) { dim1 = ___1841.i(); if (___1841.___2103() > 1) dim2 = ___1841.___2103(); else dim2 = ___1841.___2132();
} else { dim1 = ___1841.___2103(); dim2 = ___1841.___2132(); } for(int64_t i = 0; i < dim1; ++i) { ___476(i + 1 < std::numeric_limits<int32_t>::max()); int32_t minCell = static_cast<int32_t>(i + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, minCell, 1); ___476(minCell + (dim2 - 2) * dim1 < std::numeric_limits<int32_t>::max()); int32_t maxCell = minCell + static_cast<int32_t>((dim2 - 2) * dim1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, maxCell, 3); } for(int64_t ___2103 = 0; ___2103 < dim2; ++___2103) { ___476(___2103 * dim1 + 1 < std::numeric_limits<int32_t>::max()); int32_t minCell = static_cast<int32_t>(___2103 * dim1 + 1); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, minCell, 4); ___476(minCell + dim1 - 2 < std::numeric_limits<int32_t>::max()); int32_t maxCell = minCell + static_cast<int32_t>(dim1 - 2); appendUserFaceNeighborsForCellFace(userFaceNeighbors, ___1272, ___1151, zone, maxCell, 2); } } ___2335.___3482(&___1151); } return ___2037; } }}
