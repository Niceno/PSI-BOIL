#include "SzlFileLoader.h"
#include "IJKZoneInfo.h"
namespace tecplot { namespace ___3931 { ___1842 const ___1879::ijkCornerOffset[NUM_IJK_CELL_CORNERS] = { ___1842(0, 0, 0), ___1842(1, 0, 0), ___1842(1, 1, 0), ___1842(0, 1, 0), ___1842(0, 0, 1), ___1842(1, 0, 1), ___1842(1, 1, 1), ___1842(0, 1, 1) }; ___1842 const ___1879::ijkFaceNeighborOffset[NUM_IJK_CELL_FACES] = { ___1842((___81)-1, (___81)0, (___81)0), ___1842((___81)1, (___81)0, (___81)0), ___1842((___81)0, (___81)-1, (___81)0), ___1842((___81)0, (___81)1, (___81)0), ___1842((___81)0, (___81)0, (___81)-1), ___1842((___81)0, (___81)0, (___81)1) }; ___372 ___1879::getNodeSubzonesInRange( ___1842 const& nodeIJKStart, ___1842 const& nodeIJKEnd, ___3267<___2088::SubzoneAddress>& refNszAddresses) const { REQUIRE(nodeIJKStart <= nodeIJKEnd); REQUIRE(refNszAddresses.empty()); ___372 ___2037 = ___4224; try { refNszAddresses.reserve(NUM_IJK_CELL_CORNERS); refNszAddresses.___3501(NUM_IJK_CELL_CORNERS); ___2088::SubzoneAddress* ___1119 = &refNszAddresses[0]; ___1119[0] = nodeAddressAtNodeIJK(nodeIJKStart).subzoneAddress(); ___1119[1] = nodeAddressAtNodeIJK(___1842(nodeIJKEnd.i(), nodeIJKStart.___2103(), nodeIJKStart.___2132())).subzoneAddress(); ___1119[2] = nodeAddressAtNodeIJK(___1842(nodeIJKStart.i(), nodeIJKEnd.___2103(), nodeIJKStart.___2132())).subzoneAddress(); ___1119[3] = nodeAddressAtNodeIJK(___1842(nodeIJKEnd.i(), nodeIJKEnd.___2103(), nodeIJKStart.___2132())).subzoneAddress(); ___1119[4] = nodeAddressAtNodeIJK(___1842(nodeIJKStart.i(), nodeIJKStart.___2103(), nodeIJKEnd.___2132())).subzoneAddress(); ___1119[5] = nodeAddressAtNodeIJK(___1842(nodeIJKEnd.i(), nodeIJKStart.___2103(), nodeIJKEnd.___2132())).subzoneAddress(); ___1119[6] = nodeAddressAtNodeIJK(___1842(nodeIJKStart.i(), nodeIJKEnd.___2103(), nodeIJKEnd.___2132())).subzoneAddress(); ___1119[7] = nodeAddressAtNodeIJK(nodeIJKEnd).subzoneAddress(); ___680 numRefNszs; if (___1119[0] != ___1119[1]) { ___476(___1119[2] != ___1119[3] && ___1119[4] != ___1119[5] && ___1119[6] != ___1119[7]); if (___1119[0] != ___1119[2]) { ___476(___1119[1] != ___1119[3] && ___1119[4] != ___1119[6] && ___1119[5] != ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); numRefNszs = 8; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3] && ___1119[3] < ___1119[4] && ___1119[4] < ___1119[5] && ___1119[5] < ___1119[6] && ___1119[6] < ___1119[7]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); numRefNszs = 4; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3]); } } else { ___476(___1119[1] == ___1119[3] && ___1119[4] == ___1119[6] && ___1119[5] == ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); ___1119[2] = ___1119[4]; ___1119[3] = ___1119[5]; numRefNszs = 4; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); numRefNszs = 2; ___476(___1119[0] < ___1119[1]); } } } else { ___476(___1119[2] == ___1119[3] && ___1119[4] == ___1119[5] && ___1119[6] == ___1119[7]); if (___1119[0] != ___1119[2]) { ___476(___1119[1] != ___1119[3] && ___1119[4] != ___1119[6] && ___1119[5] != ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); ___1119[1] = ___1119[2];
___1119[2] = ___1119[4]; ___1119[3] = ___1119[6]; numRefNszs = 4; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); ___1119[1] = ___1119[2]; numRefNszs = 2; ___476(___1119[0] < ___1119[1]); } } else { ___476(___1119[1] == ___1119[3] && ___1119[4] == ___1119[6] && ___1119[5] == ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); ___1119[1] = ___1119[4]; numRefNszs = 2; ___476(___1119[0] < ___1119[1]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); numRefNszs = 1; } } } ___476(numRefNszs > 0); refNszAddresses.___3501(numRefNszs); } catch (...) { ___2037 = ___1184("Out of memory getting referenced node subzones for a cell subzone in ordered zone"); } ENSURE(VALID_BOOLEAN(___2037)); ENSURE(IMPLICATION(___2037, !refNszAddresses.empty())); ENSURE(IMPLICATION(___2037, isSorted(refNszAddresses.begin(), refNszAddresses.end()))); ENSURE(IMPLICATION(___2037, validNszAddress(refNszAddresses[refNszAddresses.size()-1]))); return ___2037; } ___372 ___1879::getCszReferencedNszs( ___2088::SubzoneAddress            cszAddress, ___3267<___2088::SubzoneAddress>& refNszAddresses) const { REQUIRE(validCszAddress(cszAddress)); REQUIRE(refNszAddresses.empty()); ___1842 const nodeIJKStart = ___688(cszAddress.subzoneOffset()); ___1842 const nodeIJKEnd = (___687(cszAddress.subzoneOffset()) + 1).minOp(___2197()); ___372 ___2037 = getNodeSubzonesInRange(nodeIJKStart, nodeIJKEnd, refNszAddresses); ENSURE(VALID_BOOLEAN(___2037)); ENSURE(IMPLICATION(___2037, !refNszAddresses.empty())); ENSURE(IMPLICATION(___2037, isSorted(refNszAddresses.begin(), refNszAddresses.end()))); ENSURE(IMPLICATION(___2037, validNszAddress(refNszAddresses[refNszAddresses.size()-1]))); return ___2037; } ___372 ___1879::getCellSubzonesInRange( ___1842 const& cellIJKStart, ___1842 const& cellIJKEnd, ___3267<___2088::SubzoneAddress>& refCszAddresses) const { REQUIRE(cellIJKStart <= cellIJKEnd); REQUIRE(refCszAddresses.empty()); ___372 ___2037 = ___4224; try { refCszAddresses.reserve(NUM_IJK_CELL_CORNERS); refCszAddresses.___3501(NUM_IJK_CELL_CORNERS); ___2088::SubzoneAddress* ___1119 = &refCszAddresses[0]; ___1119[0] = cellAddressAtCellIJK(cellIJKStart).subzoneAddress(); ___1119[1] = cellAddressAtCellIJK(___1842(cellIJKEnd.i(), cellIJKStart.___2103(), cellIJKStart.___2132())).subzoneAddress(); ___1119[2] = cellAddressAtCellIJK(___1842(cellIJKStart.i(), cellIJKEnd.___2103(), cellIJKStart.___2132())).subzoneAddress(); ___1119[3] = cellAddressAtCellIJK(___1842(cellIJKEnd.i(), cellIJKEnd.___2103(), cellIJKStart.___2132())).subzoneAddress(); ___1119[4] = cellAddressAtCellIJK(___1842(cellIJKStart.i(), cellIJKStart.___2103(), cellIJKEnd.___2132())).subzoneAddress(); ___1119[5] = cellAddressAtCellIJK(___1842(cellIJKEnd.i(), cellIJKStart.___2103(), cellIJKEnd.___2132())).subzoneAddress(); ___1119[6] = cellAddressAtCellIJK(___1842(cellIJKStart.i(), cellIJKEnd.___2103(), cellIJKEnd.___2132())).subzoneAddress(); ___1119[7] = cellAddressAtCellIJK(cellIJKEnd).subzoneAddress(); ___680 numRefCszs; if (___1119[0] != ___1119[1]) { ___476(___1119[2] != ___1119[3] && ___1119[4] != ___1119[5] && ___1119[6] != ___1119[7]);
if (___1119[0] != ___1119[2]) { ___476(___1119[1] != ___1119[3] && ___1119[4] != ___1119[6] && ___1119[5] != ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); numRefCszs = 8; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3] && ___1119[3] < ___1119[4] && ___1119[4] < ___1119[5] && ___1119[5] < ___1119[6] && ___1119[6] < ___1119[7]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); numRefCszs = 4; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3]); } } else { ___476(___1119[1] == ___1119[3] && ___1119[4] == ___1119[6] && ___1119[5] == ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); ___1119[2] = ___1119[4]; ___1119[3] = ___1119[5]; numRefCszs = 4; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); numRefCszs = 2; ___476(___1119[0] < ___1119[1]); } } } else { ___476(___1119[2] == ___1119[3] && ___1119[4] == ___1119[5] && ___1119[6] == ___1119[7]); if (___1119[0] != ___1119[2]) { ___476(___1119[1] != ___1119[3] && ___1119[4] != ___1119[6] && ___1119[5] != ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); ___1119[1] = ___1119[2]; ___1119[2] = ___1119[4]; ___1119[3] = ___1119[6]; numRefCszs = 4; ___476(___1119[0] < ___1119[1] && ___1119[1] < ___1119[2] && ___1119[2] < ___1119[3]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); ___1119[1] = ___1119[2]; numRefCszs = 2; ___476(___1119[0] < ___1119[1]); } } else { ___476(___1119[1] == ___1119[3] && ___1119[4] == ___1119[6] && ___1119[5] == ___1119[7]); if (___1119[0] != ___1119[4]) { ___476(___1119[1] != ___1119[5] && ___1119[2] != ___1119[6] && ___1119[3] != ___1119[7]); ___1119[1] = ___1119[4]; numRefCszs = 2; ___476(___1119[0] < ___1119[1]); } else { ___476(___1119[1] == ___1119[5] && ___1119[2] == ___1119[6] && ___1119[3] == ___1119[7]); numRefCszs = 1; } } } ___476(numRefCszs > 0); refCszAddresses.___3501(numRefCszs); } catch (...) { ___2037 = ___1184("Out of memory getting referenced cell subzones for a cell subzone in ordered zone"); } ENSURE(VALID_BOOLEAN(___2037)); ENSURE(IMPLICATION(___2037, !refCszAddresses.empty())); ENSURE(IMPLICATION(___2037, isSorted(refCszAddresses.begin(), refCszAddresses.end()))); ENSURE(IMPLICATION(___2037, validCszAddress(refCszAddresses[refCszAddresses.size()-1]))); return ___2037; } ___372 ___1879::getNszReferencedCszs( ___2088::SubzoneAddress            nszAddress, ___3267<___2088::SubzoneAddress>& refCszAddresses) const { REQUIRE(validNszAddress(nszAddress)); REQUIRE(refCszAddresses.empty()); ___1842 const cellIJKStart = ___2759(nszAddress.subzoneOffset()).maxOp(1)-1; ___1842 const cellIJKEnd = ___2758(nszAddress.subzoneOffset()).minOp(m_cszInfo.ijkLastIndex()); ___372 ___2037 = getCellSubzonesInRange(cellIJKStart, cellIJKEnd, refCszAddresses); ENSURE(VALID_BOOLEAN(___2037)); ENSURE(IMPLICATION(___2037, !refCszAddresses.empty())); ENSURE(IMPLICATION(___2037, isSorted(refCszAddresses.begin(), refCszAddresses.end()))); ENSURE(IMPLICATION(___2037, validCszAddress(refCszAddresses[refCszAddresses.size()-1]))); return ___2037; } ___463 ___1879::getCellsAroundNodeIJK( ___1842 const& nodeIJK, ___3267<___2088>& adjacentCells) const
{ adjacentCells.reserve(NUM_IJK_CELL_CORNERS); adjacentCells.___3501(NUM_IJK_CELL_CORNERS); ___1842 const cellIJKm = nodeIJK.maxOp(1) - 1; ___1842 const cellIJKp = nodeIJK.minOp(m_cszInfo.ijkLastIndex()); ___463 numAdjCells; adjacentCells[0] = m_cszInfo.itemAddressAtItemIJK(cellIJKm); if (cellIJKm.i() != cellIJKp.i()) { adjacentCells[1] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKp.i(), cellIJKm.___2103(), cellIJKm.___2132())); if (cellIJKm.___2103() != cellIJKp.___2103()) { adjacentCells[2] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKm.i(), cellIJKp.___2103(), cellIJKm.___2132())); adjacentCells[3] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKp.i(), cellIJKp.___2103(), cellIJKm.___2132())); if (cellIJKm.___2132() != cellIJKp.___2132()) { adjacentCells[4] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKm.i(), cellIJKm.___2103(), cellIJKp.___2132())); adjacentCells[5] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKp.i(), cellIJKm.___2103(), cellIJKp.___2132())); adjacentCells[6] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKm.i(), cellIJKp.___2103(), cellIJKp.___2132())); adjacentCells[7] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 8; } else { ___476(cellIJKp == ___1842(cellIJKp.i(), cellIJKp.___2103(), cellIJKm.___2132())); numAdjCells = 4; } } else { if (cellIJKm.___2132() != cellIJKp.___2132()) { adjacentCells[2] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKm.i(), cellIJKm.___2103(), cellIJKp.___2132())); ___476(cellIJKp == ___1842(cellIJKp.i(), cellIJKm.___2103(), cellIJKp.___2132())); adjacentCells[3] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 4; } else { ___476(cellIJKp == ___1842(cellIJKp.i(), cellIJKm.___2103(), cellIJKm.___2132())); numAdjCells = 2; } } } else { if (cellIJKm.___2103() != cellIJKp.___2103()) { adjacentCells[1] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKm.i(), cellIJKp.___2103(), cellIJKm.___2132())); if (cellIJKm.___2132() != cellIJKp.___2132()) { adjacentCells[2] = m_cszInfo.itemAddressAtItemIJK(___1842(cellIJKm.i(), cellIJKm.___2103(), cellIJKp.___2132())); ___476(cellIJKp == ___1842(cellIJKm.i(), cellIJKp.___2103(), cellIJKp.___2132())); adjacentCells[3] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 4; } else { ___476(cellIJKp == ___1842(cellIJKm.i(), cellIJKp.___2103(), cellIJKm.___2132())); numAdjCells = 2; } } else { if (cellIJKm.___2132() != cellIJKp.___2132()) { ___476(cellIJKp == ___1842(cellIJKm.i(), cellIJKm.___2103(), cellIJKp.___2132())); adjacentCells[1] = m_cszInfo.itemAddressAtItemIJK(cellIJKp); numAdjCells = 2; } else { ___476(cellIJKp == cellIJKm); numAdjCells = 1; } } } adjacentCells.___3501(numAdjCells); ENSURE(numAdjCells > 0 && numAdjCells <= NUM_IJK_CELL_CORNERS);
 #ifndef NO_ASSERTS
for (___463 adjCell = 0; adjCell < numAdjCells; adjCell++) { ENSURE(validCellAddress(adjacentCells[adjCell])); if (adjCell > 0) { ___463 const adjCellIndexM = m_cszInfo.itemIndexAtItemAddress(adjacentCells[adjCell - 1]); ___463 const adjCellIndexP = m_cszInfo.itemIndexAtItemAddress(adjacentCells[adjCell]); ENSURE(adjCellIndexM < adjCellIndexP); } }
 #endif
return numAdjCells; } }}
