#include "FieldData.h"
#include <float.h>
#include <algorithm>
namespace tecplot { namespace ___3931 { ___1350::___1350( ___37* tecUtil, ___1170  zone, ___1170  ___4334, bool        writable, bool        ___962) : m_tecUtil(tecUtil) , m_fieldData(0) , m_rawDataPtr(0) , m_getFieldValue(0) , m_setFieldValue(0) , ___2457(___1367) , ___2667(___4327) , ___2666(0) , m_allocated(false) { REQUIRE(VALID_REF(tecUtil)); REQUIRE(m_tecUtil->___894()); REQUIRE(zone > 0 && m_tecUtil->___4636(zone)); REQUIRE(___4334  > 0 && m_tecUtil->___4351(___4334)); REQUIRE(IMPLICATION(___962, !writable)); bool ___2037 = true; if (___962) { ___476(!writable); m_fieldData  = m_tecUtil->___914(zone, ___4334); m_rawDataPtr = NULL; if (!m_fieldData) ___2037 = false; } else { if (writable) { m_fieldData = m_tecUtil->___922(zone, ___4334); if (m_fieldData) m_tecUtil->___923(zone, ___4334, &m_rawDataPtr, &___2457); else ___2037 = false; } else { m_fieldData = m_tecUtil->___915(zone, ___4334); if (m_fieldData) m_tecUtil->___917(zone, ___4334, &m_rawDataPtr, &___2457); else ___2037 = false; } } if (___2037) { if (m_rawDataPtr != NULL) { m_getFieldValue = NULL; m_setFieldValue = NULL; } else { m_getFieldValue = m_tecUtil->___925(m_fieldData); if (writable) m_setFieldValue = m_tecUtil->___926(m_fieldData); else m_setFieldValue = NULL; ___2457 = m_tecUtil->___918(m_fieldData); } if (___962) { ValueLocation_e ___4324 = m_tecUtil->___908(zone, ___4334); if (___4324 == ___4326) ___2667 = ___4328; else ___2667 = ___4326; } else { ___2667 = m_tecUtil->___908(zone, ___4334); } ___1842 ___1841; m_tecUtil->___4613(zone, ___1841); if (m_tecUtil->___4638(zone)) { if (___2667 == ___4326) ___2666 = ___1841.___2103(); else ___2666 = ___1841.i(); } else { if (___2667 == ___4326) { ___2225 finalNumIPts = ___1841.i(); ___2225 finalNumJPts = ___1841.___2103(); ___2225 finalNumKPts = ___1841.___2132(); if (___1841.___2132() > 1) finalNumKPts--; else if (___1841.___2103() > 1) finalNumJPts--; else if (___1841.i() > 1) finalNumIPts--; ___2666 = (finalNumIPts * finalNumJPts * finalNumKPts); } else { ___2666 = (___1841.i() * ___1841.___2103() * ___1841.___2132()); } } } if (!___2037) { *this = ___1350(); } ENSURE(IMPLICATION(___2037, ___2065())); } void ___1350::allocate( FieldDataType_e ___1361, ValueLocation_e ___4324, ___2225 ___4323) { size_t        Size = 1; REQUIRE(VALID_ENUM(___1361, FieldDataType_e)); REQUIRE(VALID_ENUM(___4324, ValueLocation_e)); REQUIRE(___4323 > 0); switch (___1361) { case FieldDataType_Float: Size = ___2666 * sizeof(float); break; case FieldDataType_Double: Size = ___2666 * sizeof(double); break; case FieldDataType_Int32: Size = ___2666 * sizeof(long); break; case FieldDataType_Int16:
Size = ___2666 * sizeof(short); break; case FieldDataType_Byte: Size = (size_t)___2666; break; case ___1363: Size = (size_t)numBytesForNumBits(___2666); break; default: ___476(___1303); break; } m_rawDataPtr = malloc(Size); m_fieldData = NULL; m_getFieldValue = NULL; m_setFieldValue = NULL; if (m_rawDataPtr) { ___2457 = ___1361; ___2667 = ___4324; ___2666 = ___4323; m_allocated = true; } else { *this = ___1350(); } } void ___1350::___1757(double* minVal, double* maxVal) const { REQUIRE(___2065()); REQUIRE(VALID_REF(minVal)); REQUIRE(VALID_REF(maxVal)); m_tecUtil->___910(m_fieldData, minVal, maxVal); } }}
