#include "stdafx.h"
#include "MASTER.h"
 #define ARRLISTMODULE
#include "GLOBAL.h"
#include "CodeContract.h"
#include "ALLOC.h"
#include "ARRLIST.h"
static void CopyArrayItems(char*       TargetArray, ___2225   TargetOffset, char*       SourceArray, ___2225   SourceOffset, ___2225   ___682, int32_t ___2100) { REQUIRE(VALID_REF(TargetArray)); REQUIRE(TargetOffset >= 0); REQUIRE(VALID_REF(SourceArray)); REQUIRE(SourceOffset >= 0); REQUIRE(&TargetArray[TargetOffset] != &SourceArray[SourceOffset]); REQUIRE(___682 >= 1); REQUIRE(1 <= ___2100 && ___2100 <= static_cast<int32_t>(sizeof(ArrayListItem_u))); void* TargetPtr = &TargetArray[TargetOffset * ___2100]; void* SourcePtr = &SourceArray[SourceOffset * ___2100]; memmove(TargetPtr, SourcePtr, static_cast<size_t>(___682) * ___2100); } static ___2225 AdjustCapacityRequest(___134 ASSERT_ONLY(___94), ___2225    ___691, ___2225    ___3352, ___90   ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE((___3352 == 0 && ___691 == 0) || ___3352 > ___691); ___4276(___492); ___2225 ___3357; if (___3352 != 0 && ___691 == 0) { ___3357 = ___3352; } else { ___2225 const DEFAULT_CAPACITY = 32; ___2225       BlockSize = MAX(DEFAULT_CAPACITY, ___691 / 2); if (___3352 == 0) ___3357 = DEFAULT_CAPACITY; else ___3357 = ((___3352 - 1) / BlockSize + 1) * BlockSize; } ENSURE(___3357 == 0 || ___3357 >= ___3352); return ___3357; } static int32_t GetElementSize(ArrayListType_e ___4234) { REQUIRE(VALID_ENUM(___4234, ArrayListType_e)); int32_t ___3357; switch (___4234) { case ArrayListType_UInt8: ___3357 = static_cast<int32_t>(sizeof(uint8_t)); break; case ArrayListType_UInt16: ___3357 = static_cast<int32_t>(sizeof(uint16_t)); break; case ArrayListType_UInt32: ___3357 = static_cast<int32_t>(sizeof(uint32_t)); break; case ArrayListType_UInt64: ___3357 = static_cast<int32_t>(sizeof(uint64_t)); break; case ArrayListType_Int64: ___3357 = static_cast<int32_t>(sizeof(int64_t)); break; case ArrayListType_Char: ___3357 = static_cast<int32_t>(sizeof(char)); break; case ArrayListType_Short: ___3357 = static_cast<int32_t>(sizeof(short)); break; case ArrayListType_Int: ___3357 = static_cast<int32_t>(sizeof(int)); break; case ArrayListType_Long: ___3357 = static_cast<int32_t>(sizeof(long)); break; case ArrayListType_Float: ___3357 = static_cast<int32_t>(sizeof(float)); break; case ArrayListType_Double: ___3357 = static_cast<int32_t>(sizeof(double)); break; case ArrayListType_LgIndex: ___3357 = static_cast<int32_t>(sizeof(___2225)); break; case ArrayListType_EntIndex: ___3357 = static_cast<int32_t>(sizeof(___1170)); break; case ArrayListType_SmInteger: ___3357 = static_cast<int32_t>(sizeof(int32_t)); break; case ArrayListType_Boolean: ___3357 = static_cast<int32_t>(sizeof(___372)); break; case ArrayListType_ArbParam: ___3357 = static_cast<int32_t>(sizeof(___90)); break; case ArrayListType_UInt8Ptr: ___3357 = static_cast<int32_t>(sizeof(uint8_t*)); break; case ArrayListType_UInt16Ptr: ___3357 = static_cast<int32_t>(sizeof(uint16_t*)); break; case ArrayListType_UInt32Ptr:
___3357 = static_cast<int32_t>(sizeof(uint32_t*)); break; case ArrayListType_UInt64Ptr: ___3357 = static_cast<int32_t>(sizeof(uint64_t*)); break; case ArrayListType_Int64Ptr: ___3357 = static_cast<int32_t>(sizeof(int64_t*)); break; case ArrayListType_CharPtr: ___3357 = static_cast<int32_t>(sizeof(char*)); break; case ArrayListType_ShortPtr: ___3357 = static_cast<int32_t>(sizeof(short*)); break; case ArrayListType_IntPtr: ___3357 = static_cast<int32_t>(sizeof(int*)); break; case ArrayListType_LongPtr: ___3357 = static_cast<int32_t>(sizeof(long*)); break; case ArrayListType_FloatPtr: ___3357 = static_cast<int32_t>(sizeof(float*)); break; case ArrayListType_DoublePtr: ___3357 = static_cast<int32_t>(sizeof(double*)); break; case ArrayListType_LgIndexPtr: ___3357 = static_cast<int32_t>(sizeof(___2225*)); break; case ArrayListType_EntIndexPtr: ___3357 = static_cast<int32_t>(sizeof(___1170*)); break; case ArrayListType_SmIntegerPtr: ___3357 = static_cast<int32_t>(sizeof(int32_t*)); break; case ArrayListType_BooleanPtr: ___3357 = static_cast<int32_t>(sizeof(___372*)); break; case ArrayListType_ArbParamPtr: ___3357 = static_cast<int32_t>(sizeof(___90*)); break; case ArrayListType_VoidPtr: ___3357 = static_cast<int32_t>(sizeof(void*)); break; case ArrayListType_FunctionPtr: ___3357 = static_cast<int32_t>(sizeof(void (*)())); break; case ArrayListType_Any: ___3357 = static_cast<int32_t>(sizeof(ArrayListItem_u)); break; default: ___3357 = 0; ___476(___1303); break; } ENSURE(1 <= ___3357 && ___3357 <= static_cast<int32_t>(sizeof(ArrayListItem_u))); return ___3357; } static void DestroyItems(___134               ___94, ___2225                  ___2095, int32_t                ___2100, ___2225                  ___682, ArrayListItemDestructor_pf ___2092, ___90                 ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); REQUIRE(1 <= ___682 && ___2095 + ___682 <= ___94->___682); REQUIRE(VALID_FN_REF(___2092)); for (___2225 ___1924 = 0; ___1924 < ___682; ___1924++) { ___2225 ___2094 = (___1924 + ___2095) * ___2100; ASSERT_ONLY(___372 CHECK_DoContinue =) ___2092(static_cast<void*>(&___94->Array[___2094]), ___492); ___476(CHECK_DoContinue); } } static ___372 DuplicateItems(char*                      TargetArray, ___2225                  TargetItemOffset, char*                      SourceArray, ___2225                  SourceItemOffset, int32_t                ___2100, ___2225                  ___682, ArrayListItemDuplicator_pf ___2093, ___90                 ___492) { REQUIRE(VALID_REF(TargetArray)); REQUIRE(TargetItemOffset >= 0); REQUIRE(VALID_REF(SourceArray)); REQUIRE(SourceItemOffset >= 0); REQUIRE(1 <= ___2100 && ___2100 <= (int32_t)sizeof(ArrayListItem_u)); REQUIRE(___682 >= 1); REQUIRE(VALID_FN_REF(___2093)); ___372 ___2038 = ___4224; for (___2225 ___1924 = 0; ___1924 < ___682 && ___2038; ___1924++) { ___2225 TargetItemIndex = (___1924 + TargetItemOffset) * ___2100;
___2225 SourceItemIndex = (___1924 + SourceItemOffset) * ___2100; ___2038 = ___2093(static_cast<void*>(&TargetArray[TargetItemIndex]), static_cast<void*>(&SourceArray[SourceItemIndex]), ___492); } ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___372 ArrayListIsValid(___134 ___94) { ___372 ___2066 = (VALID_REF(___94) && VALID_ENUM(___94->___4234, ArrayListType_e) && (1 <= ___94->___2100 && ___94->___2100 <= static_cast<int32_t>(sizeof(ArrayListItem_u))) && (0 <= ___94->___682 && ___94->___682 <= ___94->___437)); ENSURE(VALID_BOOLEAN(___2066)); return ___2066; } ArrayListType_e ArrayListGetType(___134 ___94) { REQUIRE(ArrayListIsValid(___94)); ArrayListType_e ___3357 = ___94->___4234; ENSURE(VALID_ENUM(___3357, ArrayListType_e)); return ___3357; } ___372 ArrayListEnlargeCapacity(___134 ___94, ___2225    ___3352) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(IMPLICATION(___3352 == 0, ___94->___437 == 0)); ___372 ___2038; if (___3352 == 0 || ___3352 > ___94->___437) { ___2225 AdjustedCapacity = ___94->___438(___94, ___94->___437, ___3352, ___94->___439); ___476(AdjustedCapacity == 0 || AdjustedCapacity >= ___3352); char* EnlargedArray = NULL; ___2038 = (AdjustedCapacity != 0); if (___2038) { EnlargedArray = ___23(AdjustedCapacity * ___94->___2100, char, "array list"); if (EnlargedArray == NULL) { if (___3352 != 0) AdjustedCapacity = ___3352; else AdjustedCapacity = 1; EnlargedArray = ___23(AdjustedCapacity * ___94->___2100, char, "array list"); } ___2038 = (EnlargedArray != NULL); } if (___2038) { memset(&EnlargedArray[___94->___682*___94->___2100], 0, (AdjustedCapacity - ___94->___682)*___94->___2100); if (___94->Array != NULL) { if (___94->___682 != 0) CopyArrayItems(EnlargedArray, 0, ___94->Array, 0, ___94->___682, ___94->___2100); ___1528(___94->Array, "array list"); } ___94->Array    = EnlargedArray; ___94->___437 = AdjustedCapacity; } } else { ___2038 = ___4224; } ENSURE(ArrayListIsValid(___94)); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___134 ArrayListAlloc(___2225                           ___1186, ArrayListType_e                     ___4234, ArrayListCapacityRequestAdjuster_pf ___438, ___90                          ___439) { REQUIRE(___1186 >= 0); REQUIRE(VALID_ENUM(___4234, ArrayListType_e)); ___134 ___3357 = ALLOC_ITEM(___135, "ArrayList structure"); if (___3357 != NULL) { ___3357->Array           = NULL; ___3357->___4234            = ___4234; ___3357->___2100        = GetElementSize(___4234); ___3357->___682           = 0; ___3357->___437        = 0; ___3357->___2078 = ___1303; if (___438 != NULL) { ___3357->___438           = ___438;
___3357->___439 = ___439; } else { ___3357->___438           = AdjustCapacityRequest; ___3357->___439 = 0; } if (!ArrayListEnlargeCapacity(___3357, ___1186)) ArrayListDealloc(&___3357, NULL, 0); } ENSURE(ArrayListIsValid(___3357) || ___3357 == NULL); ENSURE(IMPLICATION(___3357 != NULL, ___3357->___437 >= ___1186)); return ___3357; } void ArrayListDealloc(___134*              ___94, ArrayListItemDestructor_pf ___2092, ___90                 ___492) { REQUIRE(VALID_REF(___94)); REQUIRE(ArrayListIsValid(*___94) || *___94 == NULL); REQUIRE(VALID_FN_REF(___2092) || ___2092 == NULL); if (*___94 != NULL) { if (___2092 != NULL && (*___94)->___682 != 0) DestroyItems(*___94, 0, (*___94)->___2100, (*___94)->___682, ___2092, ___492); if ((*___94)->___437 != 0) ___1528((*___94)->Array, "array list"); ___1529(*___94, "ArrayList structure"); *___94 = NULL; } ENSURE(*___94 == NULL); }
 #if !defined USE_MACROS_FOR_FUNCTIONS
___2225 ArrayListGetCount_FUNC(___134 ___94) { REQUIRE(ArrayListIsValid(___94)); ___2225 ___3357 = ArrayListGetCount_MACRO(___94); ENSURE(___3357 >= 0); return ___3357; }
 #endif
void ArrayListDeleteAllItems(___134               ___94, ArrayListItemDestructor_pf ___2092, ___90                 ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(VALID_FN_REF(___2092) || ___2092 == NULL); REQUIRE(!___94->___2078); if (___2092 != NULL && ___94->___682 != 0) DestroyItems(___94, 0, ___94->___2100, ___94->___682, ___2092, ___492); if (___94->___682 != 0) memset(&___94->Array[0], 0, ___94->___682*___94->___2100); ___94->___682 = 0; ENSURE(ArrayListIsValid(___94) && ___94->___682 == 0); } void ArrayListDeleteItems(___134               ___94, ___2225                  ___2095, ___2225                  ___682, ArrayListItemDestructor_pf ___2092, ___90                 ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); REQUIRE(1 <= ___682 && ___2095 + ___682 <= ___94->___682); REQUIRE(VALID_FN_REF(___2092) || ___2092 == NULL); REQUIRE(!___94->___2078); if (___2092 != NULL) DestroyItems(___94, ___2095, ___94->___2100, ___682, ___2092, ___492); if (___2095 + ___682 < ___94->___682) CopyArrayItems(___94->Array, ___2095, ___94->Array, ___2095 + ___682, ___94->___682 - (___2095 + ___682), ___94->___2100); memset(&___94->Array[(___94->___682 - ___682)*___94->___2100], 0, ___682*___94->___2100); ___94->___682 -= ___682; ENSURE(ArrayListIsValid(___94)); } void ArrayListDeleteItem(___134               ___94, ___2225                  ___2095, ArrayListItemDestructor_pf ___2092, ___90                 ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); REQUIRE(VALID_FN_REF(___2092) || ___2092 == NULL); ArrayListDeleteItems(___94, ___2095, 1, ___2092, ___492); ENSURE(ArrayListIsValid(___94)); } ___134 ArrayListRemoveItems(___134 ___94, ___2225    ___2095, ___2225    ___682) { ___134 ___3357; REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); REQUIRE(1 <= ___682 && ___2095 + ___682 <= ___94->___682); REQUIRE(!___94->___2078); ___3357 = ArrayListGetItems(___94, ___2095, ___682); if (___3357 != NULL) ArrayListDeleteItems(___94, ___2095, ___682, NULL, 0); ENSURE(ArrayListIsValid(___94)); ENSURE(ArrayListIsValid(___3357) || ___3357 == NULL); return ___3357; } ArrayListItem_u ArrayListRemoveItem(___134 ___94, ___2225    ___2095) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); REQUIRE(!___94->___2078); ArrayListItem_u ___3357; CopyArrayItems(static_cast<char*>(&___3357.___470), 0, ___94->Array, ___2095, 1, ___94->___2100); ArrayListDeleteItems(___94, ___2095, 1, NULL, 0);
ENSURE(ArrayListIsValid(___94)); return ___3357; } ___372 ArrayListInsert(___134 ___3944, ___2225    ___2095, ___134 ___3640) { REQUIRE(ArrayListIsValid(___3944)); REQUIRE(___2095 >= 0); REQUIRE(ArrayListIsValid(___3640)); REQUIRE(___3944 != ___3640); REQUIRE(___3944->___4234 == ___3640->___4234); REQUIRE(!___3944->___2078); ___372 ___2038 = ___4224; if (___3640->___682 != 0) { ___2225 NeededCapacity; if (___2095 > ___3944->___682) NeededCapacity = ___2095 + ___3640->___682; else NeededCapacity = ___3944->___682 + ___3640->___682; if (NeededCapacity > ___3944->___437) ___2038 = ArrayListEnlargeCapacity(___3944, NeededCapacity); if (___2038) { if (___2095 < ___3944->___682) { CopyArrayItems(___3944->Array, ___2095 + ___3640->___682, ___3944->Array, ___2095, ___3944->___682 - ___2095, ___3944->___2100); ___3944->___682 += ___3640->___682; } else { if (___2095 > ___3944->___682) ___3944->___682 = ___2095 + ___3640->___682; else ___3944->___682 += ___3640->___682; } CopyArrayItems(___3944->Array, ___2095, ___3640->Array, 0, ___3640->___682, ___3640->___2100); } } ENSURE(ArrayListIsValid(___3944)); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___372 ArrayListInsertItem(___134    ___94, ___2225       ___2095, ArrayListItem_u ___2084) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(___2095 >= 0); REQUIRE(!___94->___2078); ___372 ___2038 = ___4224; ___2225 NeededCapacity; if (___2095 > ___94->___682) NeededCapacity = ___2095 + 1; else NeededCapacity = ___94->___682 + 1; if (NeededCapacity > ___94->___437) ___2038 = ArrayListEnlargeCapacity(___94, NeededCapacity); if (___2038) { if (___2095 < ___94->___682) { CopyArrayItems(___94->Array, ___2095 + 1, ___94->Array, ___2095, ___94->___682 - ___2095, ___94->___2100); ___94->___682++; } else { if (___2095 > ___94->___682) ___94->___682 = ___2095 + 1; else ___94->___682++; } CopyArrayItems(___94->Array, ___2095, static_cast<char*>(&___2084.___470), 0, 1, ___94->___2100); } ENSURE(ArrayListIsValid(___94)); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___372 ArrayListVisitItems(___134            ___94, ___2225               ___2095, ___2225               ___682, ArrayListItemVisitor_pf ___2101, ___90              ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(VALID_FN_REF(___2101)); ___372 ___2078 = ___94->___2078; ___94->___2078 = ___4224; ___2225   ___1924; int32_t ___2100; ___372   ___1094 = ___4224; for (___1924 = 0, ___2100 = ___94->___2100; ___1924 < ___682 && ___1094; ___1924++) { ___2225 ___2094 = (___1924 + ___2095) * ___2100; ___1094 = ___2101(static_cast<void*>(&___94->Array[___2094]), ___492); } ___94->___2078 = ___2078; ENSURE(___94->___2078 == ___2078); ENSURE(VALID_BOOLEAN(___1094)); return ___1094; } ___134 ArrayListGetItems(___134 ___94,
___2225    ___2095, ___2225    ___682) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); REQUIRE(1 <= ___682 && ___2095 + ___682 <= ___94->___682); ___134 ___3357 = ArrayListAlloc(___682, ___94->___4234, ___94->___438, ___94->___439); if (___3357 != NULL) { CopyArrayItems(___3357->Array, 0, ___94->Array, ___2095, ___682, ___94->___2100); ___3357->___682 = ___682; } ENSURE(ArrayListIsValid(___94)); ENSURE(ArrayListIsValid(___3357) || ___3357 == NULL); return ___3357; } ArrayListItem_u ArrayListGetItem(___134 ___94, ___2225    ___2095) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); ArrayListItem_u ___3357; CopyArrayItems(static_cast<char*>(&___3357.___470), 0, ___94->Array, ___2095, 1, ___94->___2100); return ___3357; }
 #if !defined USE_MACROS_FOR_FUNCTIONS
void const* ArrayListGetItemInternalRef_FUNC(___134 ___94, ___2225    ___2095) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(0 <= ___2095 && ___2095 <= ___94->___682 - 1); void const* ___3357 = ArrayListGetItemInternalRef_MACRO(___94, ___2095); ENSURE(___3357 == NULL || VALID_REF(___3357)); return ___3357; }
 #endif
___372 ArrayListSetItem(___134               ___94, ___2225                  ___2095, ArrayListItem_u            ___2084, ArrayListItemDestructor_pf ___2092, ___90                 ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(___2095 >= 0); REQUIRE(VALID_FN_REF(___2092) || ___2092 == NULL); REQUIRE(IMPLICATION(___2095 + 1 > ___94->___682, !___94->___2078)); ___372 ___2038 = ___4224; if (___2092 != NULL && ___2095 < ___94->___682) DestroyItems(___94, ___2095, ___94->___2100, 1, ___2092, ___492); if (___2095 + 1 > ___94->___437) ___2038 = ArrayListEnlargeCapacity(___94, ___2095 + 1); if (___2038) { if (___2095 + 1 > ___94->___682) ___94->___682 = ___2095 + 1; CopyArrayItems(___94->Array, ___2095, static_cast<char*>(&___2084.___470), 0, 1, ___94->___2100); } ENSURE(ArrayListIsValid(___94)); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___372 ArrayListAppendItem(___134    ___94, ArrayListItem_u ___2084) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(!___94->___2078); ___372 ___2038 = ArrayListInsertItem(___94, ___94->___682, ___2084); ENSURE(ArrayListIsValid(___94)); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___372 ArrayListAppend(___134 ___3944, ___134 ___3640) { REQUIRE(ArrayListIsValid(___3944)); REQUIRE(ArrayListIsValid(___3640)); REQUIRE(___3944 != ___3640); REQUIRE(___3944->___4234 == ___3640->___4234); REQUIRE(!___3944->___2078); ___372 ___2038 = ArrayListInsert(___3944, ___3944->___682, ___3640); ENSURE(ArrayListIsValid(___3944)); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } ___134 ArrayListCopy(___134               ___94, ArrayListItemDuplicator_pf ___2093, ___90                 ___492) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(VALID_FN_REF(___2093) || ___2093 == NULL); ___134 ___3357 = ArrayListAlloc(___94->___682, ___94->___4234, ___94->___438, ___94->___439); if (___3357 != NULL && ___94->___682 != 0) { ___372 ___2038 = ___4224; if (___2093 != NULL) ___2038 = DuplicateItems(___3357->Array, 0, ___94->Array, 0, ___94->___2100, ___94->___682, ___2093, ___492); else CopyArrayItems(___3357->Array, 0, ___94->Array, 0, ___94->___682, ___94->___2100); if (___2038) ___3357->___682 = ___94->___682; else ArrayListDealloc(&___3357, NULL, 0); } ENSURE(___3357 == NULL || (ArrayListIsValid(___3357) && ___3357->___682 == ___94->___682)); return ___3357; } void* ArrayListToArray(___134               ___3640, ArrayListItemDuplicator_pf ___2093, ___90                 ___492) { REQUIRE(ArrayListIsValid(___3640)); REQUIRE(VALID_FN_REF(___2093) || ___2093 == NULL); void* ___3357; if (___3640->___682 != 0) ___3357 = static_cast<void*>(___23(___3640->___682 * ___3640->___2100, char, "native array")); else ___3357 = NULL;
if (___3357 != NULL) { ___372 ___2038 = ___4224; if (___2093 != NULL) ___2038 = DuplicateItems((char*)___3357, 0, ___3640->Array, 0, ___3640->___2100, ___3640->___682, ___2093, ___492); else CopyArrayItems(static_cast<char*>(___3357), 0, ___3640->Array, 0, ___3640->___682, ___3640->___2100); if (!___2038) { char* Tmp = static_cast<char*>(___3357); ___1528(Tmp, "native array"); } } ENSURE(VALID_REF(___3357) || ___3357 == NULL); return ___3357; } ___134 ArrayListFromArray(void*                      ___3640, ___2225                  ___682, ArrayListType_e            ___4234, ArrayListItemDuplicator_pf ___2093, ___90                 ___492) { REQUIRE(VALID_REF(___3640)); REQUIRE(___682 >= 0); REQUIRE(VALID_ENUM(___4234, ArrayListType_e)); REQUIRE(VALID_FN_REF(___2093) || ___2093 == NULL); ___134 ___3357 = ArrayListAlloc(___682, ___4234, NULL, 0); if (___3357 != NULL && ___682 != 0) { ___372 ___2038 = ___4224; if (___2093 != NULL) ___2038 = DuplicateItems(___3357->Array, 0, (char*)___3640, 0, ___3357->___2100, ___682, ___2093, ___492); else CopyArrayItems(___3357->Array, 0, static_cast<char*>(___3640), 0, ___682, ___3357->___2100); if (___2038) ___3357->___682 = ___682; else ArrayListDealloc(&___3357, NULL, 0); } ENSURE(ArrayListIsValid(___3357) || ___3357 == NULL); return ___3357; } ___372 ArrayListBSearch(___134               ___94, ArrayListItem_u            ___2084, ArrayListItemComparator_pf ___533, ___90                 ___492, ___2225*                 ___2094) { REQUIRE(ArrayListIsValid(___94)); REQUIRE(VALID_FN_REF(___533)); REQUIRE(___2094 == NULL || VALID_REF(___2094)); ___2225 MiddleItemIndex = 0; ___2225 FirstItemIndex  = 0; ___2225 NumItems        = ___101(___94); ___2225 LastItemIndex   = NumItems - 1; ___372 Found = ___1303; while (FirstItemIndex <= LastItemIndex && !Found) { MiddleItemIndex = (FirstItemIndex + LastItemIndex) / 2; int CompareResult = ___533(ArrayListGetItem(___94, MiddleItemIndex), ___2084, ___492); if (CompareResult > 0) LastItemIndex = MiddleItemIndex - 1; else if (CompareResult < 0) FirstItemIndex = MiddleItemIndex + 1; else Found = ___4224; } if (___2094 != NULL) { if (Found || NumItems == 0 || FirstItemIndex < NumItems) *___2094 = MiddleItemIndex; else *___2094 = NumItems; } ENSURE(IMPLICATION(___2094 != NULL, 0 <= *___2094 && *___2094 <= ___101(___94))); ENSURE(VALID_BOOLEAN(Found)); return Found; }
 #if !defined USE_MACROS_FOR_FUNCTIONS
void const* ArrayListGetInternalRef_FUNC(___134 ___94) { REQUIRE(ArrayListIsValid(___94)); void const* ___3357 = ___113(___94); ENSURE(___3357 == NULL || VALID_REF(___3357)); return ___3357; }
 #endif
