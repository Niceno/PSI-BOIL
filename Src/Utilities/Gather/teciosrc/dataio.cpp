#include "stdafx.h"
#include "MASTER.h"
 #define ___855
#include "GLOBAL.h"
#include "CodeContract.h"
#include "Q_UNICODE.h"
#include "TranslatedString.h"
#include "TecplotVersion.h"
#include "Version.h"
 #if defined MSWIN
 #pragma warning (disable : 4244)
 #endif
static ___1630 TempGeom; static ___4116 TempText; using namespace tecplot;
#include "DATASET0.h"
#include "SET.h"
#include "FILESTREAM.h"
#include "DATAIO.h"
#include "DATAIO4.h"
#include "STRUTIL.h"
#include "AUXDATA.h"
#include "ARRLIST.h"
#include "STRLIST.h"
#include "ALLOC.h"
#include "DATASET.h"
#include "SYSTEM.h"
#include "Q_MSG.h"
#include "FileSystem.h"
namespace { ___372 validZoneMarker( double zoneMarker, short pltVersion) { ___372 ___3356 = ___1303; if (zoneMarker == ZoneMarkerFull32Bit) ___3356 = ___4224; else if (pltVersion >= 191 && zoneMarker == ZoneMarkerFace64Bit) ___3356 = ___4224; ENSURE(VALID_BOOLEAN(___3356)); return ___3356; } short getZoneVersion(short fileVersion, double zoneMarker) { REQUIRE(zoneMarker == ZoneMarkerFull32Bit || zoneMarker == ZoneMarkerFace64Bit); short zoneVersion = fileVersion; ___476(fileVersion <= 191); if (fileVersion >= 191) { if (zoneMarker == ZoneMarkerFull32Bit) zoneVersion = 112; } return zoneVersion; } } ___372 ___3277(___1403    *___1399, short            fileVersion, ___372        ASSERT_ONLY(___3566), ___1170      *___2845, ___1170      *NumVars, int32_t         *___2790, char           **___901, ___4116         **___340, ___1630         **___336, ___3837  **___789, ___3837   *___4283, ___264      *___884, ___90       ___263, ___3499         **___2073, ___372       *___1819, ___372       *___1818, ___134    *___4680, ___3837   *___4364, ___134    *___4336, ___3499          *___2051, ___2225      **___1439, DataFileType_e  *___1406) { ___372    ___2038 = ___4224; ___372    SentError = ___1303; double       ___4565=0; int          Pass; ___1396 InitialFilePosition; REQUIRE(VALID_REF(___1399) && VALID_REF(___1399->File)); REQUIRE(fileVersion > 0); REQUIRE(VALID_BOOLEAN(___3566)); REQUIRE(VALID_REF(___2845)); REQUIRE(VALID_REF(NumVars)); REQUIRE(VALID_REF(___901)       || (___901 == NULL)); REQUIRE(VALID_REF(___340)           || (___340 == NULL)); REQUIRE(VALID_REF(___336)           || (___336 == NULL)); REQUIRE(VALID_REF(___1819)            || (___1819 == NULL)); REQUIRE(VALID_REF(___1818)           || (___1818 == NULL)); REQUIRE(VALID_REF(___4680)       || (___4680 == NULL)); REQUIRE(VALID_REF(___4364)           || (___4364 == NULL)); REQUIRE(VALID_REF(___2790) || (___2790 == NULL)); REQUIRE(VALID_REF(___4283)            || (___4283 == NULL)); REQUIRE((VALID_REF(___884) && (VALID_REF(*___884) || *___884 == NULL)) || ___884 == NULL); REQUIRE((VALID_REF(___4336) && (VALID_REF(*___4336) || *___4336 == NULL)) || ___4336 == NULL); REQUIRE(VALID_REF(___2073)  || (___2073 == NULL)); REQUIRE((VALID_REF(___789) && VALID_REF(___2790)) || (___789 == NULL)); REQUIRE(VALID_REF(___2051) || (___2051 == NULL)); REQUIRE(VALID_REF(___1439)  || (___1439 == NULL)); REQUIRE(VALID_REF(___1406)         || (___1406 == NULL));
 #if !defined TECPLOTKERNEL
___2225 const maxTextLength = 200; TempText.Text = "";
 #else
___2225 const maxTextLength = ___1545.___2239.MaxChrsInTextLabels;
 #endif
if (___901) *___901 = NULL; if (___340) *___340 = NULL; if (___336) *___336 = NULL; if (___1819) *___1819 = ___1303; if (___1818) *___1818 = ___1303; if (___4680) *___4680 = NULL; if (___4364) *___4364 = NULL; if (___2790) *___2790 = 0; if (___789) *___789 = NULL; if (___884 != NULL) { ___476(VALID_REF(*___884) || *___884 == NULL); } if (___4336 != NULL) { ___476(VALID_REF(*___4336) || *___4336 == NULL); } if (___4283) *___4283 = NULL; if (___2073) *___2073 = NULL; if (___2051) *___2051 = NULL; if (___1439) *___1439 = NULL; if (___1406) *___1406 = ___843; InitialFilePosition = ___4199(___1399->File); for (Pass = 1; ___2038 && (Pass <= 2); Pass++) { if (Pass == 2) { if (___4198(___1399->File, InitialFilePosition, SEEK_SET) != 0) ___2038 = ___1303; if (___2038 && (*___2845 > 0 && ___4680 != NULL && *___4680 == NULL)) { *___4680 = ArrayListAlloc(*___2845, ArrayListType_VoidPtr, ___4666, 0); ___2038 = (*___4680 != NULL); } if (___2038 && (___789 != NULL    && *___789 == NULL && *___2790 > 0)) { *___789 = ___23(*___2790, ___3837, "CustomLabel Sets"); ___2038 = (*___789 != NULL); if (___2038) { int32_t N; for (N = 0; N < *___2790; N++) (*___789)[N] = NULL; } } if (___2038 && (___4283 != NULL && *___4283 == NULL)) { *___4283 = ___3819(); ___2038 = (___372)(*___4283 != NULL); } if (___2038 && (___884 != NULL && *___884 == NULL)) { *___884 = ___231(___263); ___2038 = (___372)(*___884 != NULL); } if (___2038 && (___4336 != NULL && *___4336 == NULL) && *NumVars > 0) { *___4336 = ArrayListAlloc(0, ArrayListType_VoidPtr, ___4666, 0); ___2038 = (*___4336 != NULL && ___170(*___4336, *NumVars - 1, NULL)); } if (___2038            && (*___2845 > 0) && (___2073 != NULL) && (*___2073 == NULL)) { *___2073 = ___23(*___2845, ___3499, "Array of IsVarCellCentered sets"); if (*___2073) { ___1170 Z; for (Z = 0; ___2038 && (Z < *___2845); Z++) { (*___2073)[Z] = ___29(___1303); ___2038 = (___372)((*___2073)[Z] != NULL); } } else ___2038 = ___1303; } if (___2038 && *___2845 > 0 && ___2051 != NULL) { *___2051 = ___29(___1303); ___2038 = (*___2051 != NULL); } if (___2038 && *___2845 > 0 && ___1439 != NULL) { *___1439 = ___23(*___2845, ___2225, "Array of FNNumBndryConns"); ___2038 = (*___1439 != NULL); if (___2038) for (___2225 i = 0; i < *___2845; i++) (*___1439)[i] = 0; } } if (___2790 != NULL) *___2790 = 0; *___2845 = 0; *NumVars  = 0; if (___2038) { char *S = NULL; int  INumVars; ___2038 = ___3285(___1399,
fileVersion, ((Pass == 2) ? &S : (char **)NULL), ((Pass == 2) ? ___1406 : (DataFileType_e *)NULL), &INumVars, ((Pass == 2) ? ___4364 : (___3837 *)NULL)); if (___2038) *NumVars = (___1170)INumVars; if ((Pass == 2) && S && ___2038 && ___901) *___901 = S; else if (S != NULL) ___1528(S, "data set title"); } if (___2038) { if (___2038) ___4565 = ___1760(___1399, FieldDataType_Float, 0.0, 1000.0, &___2038); while (___2038 && (___4565 != EndHeaderMarker)) { if (validZoneMarker(___4565, fileVersion)) { short const zoneVersion = getZoneVersion(fileVersion, ___4565); ___4681* ___4675 = new ___4681(); ___372 ___2866 = (Pass == 2 && ___2073 != NULL); TecplotFileZoneFormat fileZoneFormat( ___1399->___2005 == ___4224, fileVersion, zoneVersion); ___372 LocalIsRawFNAvailable; ___2225 LocalFNNumBndryConns; ___2038 = ___3293(___1399, fileZoneFormat, *___4675, ___2866 ? (*___2073)[*___2845] : NULL, *NumVars, ___263, &LocalIsRawFNAvailable, &LocalFNNumBndryConns); if (___2038 && ___2866 && ___2051 != NULL) { if (LocalIsRawFNAvailable) ___2038 = ___17(*___2051, *___2845, ___1303); } if (___2038 && ___2866 && ___1439 != NULL) (*___1439)[*___2845] = LocalFNNumBndryConns; if (___2038                 && ___4680 != NULL && Pass == 2) { ___476(___4675->___2973 == ___333); ArrayListItem_u CurZoneSpecItem; CurZoneSpecItem.___4438 = (void *)___4675; ArrayListSetItem(*___4680, *___2845, CurZoneSpecItem, ___4679, 0); } else { delete ___4675; ___4675 = NULL; } if (___2038) (*___2845)++; if (*___2845 > ___2380) { ___1175(___4215("Exceeding Tecplot's current zone limit of %d. " "Reduce the number of zones being loaded."), ___2380); ___2038 = ___1303; SentError = ___4224; } } else if (___4565 == ___1615) { ___2038 = ___3286(___1399, fileVersion, ___1303, &TempGeom, 5000); if (___2038) { if (Pass == 1) { if (___1818) *___1818 = ___4224; } } } else if (___4565 == ___4110) { ___2038 = ___3291(___1399, fileVersion, ___1303, &TempText, maxTextLength); if (___2038) { if (Pass == 1) { if (___1819) *___1819 = ___4224; } } } else if (___4565 == ___790) { ___372 ___2866; ___2866 = (Pass == 2)                                && ___2790                         && (*___2790 < ___2363) && ___789; ___2038 = ___3284(___1399, fileVersion, ___2866, (___2866 ? &(*___789)[*___2790] : NULL)); if (___2038 && ___2790) (*___2790)++; } else if (___4565 == ___4284) { ___372 ___2866; char     *CurUserRec = NULL; ___2866 = (___372)((Pass == 2) && ___4283); ___2038 = ___3292(___1399, fileVersion, ___2866 ? &CurUserRec : (char **)NULL); if (___2038 && ___2866) ___2038 = ___3821(*___4283, CurUserRec); if (CurUserRec) ___1528(CurUserRec, "temp user rec"); CurUserRec = NULL; } else if (___4565 == ___885) { ___372 ___2866; ___476(fileVersion >= 101);
___2866 = (Pass == 2 && ___884 != NULL); ___2038 = ___3283(___1399, fileVersion, ___2866 ? *___884 : NULL); if (!___2038) { ___1175(___4215("Invalid DATASETAUXDATA record in binary datafile")); SentError = ___4224; } } else if (___4565 == ___4337) { ___372 ___2866; ___2225 ___4334; ___476(fileVersion >= 102); ___2866 = (Pass == 2 && ___4336 != NULL); ___4334 = ___1748<int32_t>(___1399, fileVersion, 0, *NumVars-1, &___2038); if (___2038) { ___264 VarAuxData; if (___2866) { VarAuxData = (___264)___133(*___4336, ___4334); if (VarAuxData == NULL) { VarAuxData = ___231(___263); ___2038 = (VarAuxData != NULL && ___170(*___4336, ___4334, VarAuxData)); } } else VarAuxData = NULL; ___2038 = ___2038 && ___3283(___1399, fileVersion, VarAuxData); if (!___2038) { ___1175(___4215("Invalid VARAUXDATA record in binary datafile")); SentError = ___4224; } } else { ___1175(___4215("Invalid VARAUXDATA variable number association")); SentError = ___4224; } } else ___2038 = ___1303; if (___2038) ___4565 = ___1760(___1399, FieldDataType_Float, 0.0, 1000.0, &___2038); } } } if (___2038 && (*___2845 == 0) && (*NumVars > 0)) { *NumVars = 0; if (___4364 && *___4364) { ___3826(___4364); } } if (!___2038) { if (___4680 && *___4680) ArrayListDealloc(___4680, ___4679, 0); if (___901 && *___901) { ___1528(*___901, "DataSetTitle"); *___901 = NULL; } if (___4364 && *___4364) { ___3826(___4364); } if (___4283 && *___4283) ___3826(___4283); } if ((___884 != NULL && *___884 != NULL) && (!___2038)) ___236(___884); if (!___2038 && !SentError) ___1175(___4215("Invalid header in binary datafile")); ENSURE((___4364 == NULL) || (*___4364 == NULL) || ___3846(*___4364)); ENSURE(IMPLICATION(___4283 != NULL, (*___4283 == NULL || ___3846(*___4283)))); ENSURE(IMPLICATION(___884 != NULL, (*___884 == NULL || VALID_REF(*___884)))); return (___2038); } ___372 ___2874(___1403 **___1399, char const    *___1437, ___1396   ___3684, int32_t       *___2102) { ___372 ___3357 = ___4224; REQUIRE(VALID_REF(___1399)); REQUIRE(*___1399 == NULL); REQUIRE(VALID_REF(___1437)); REQUIRE(___3684 >= 0); REQUIRE(VALID_REF(___2102)); FILE *File = tecplot::filesystem::fileOpen(___1437, "rb"); if (File == NULL) ___3357 = ___1303; if (___3357) { *___1399 = ___1400(File, ___4224); ___3357 = (*___1399 != NULL); } ___3357 = ___3357 && (___4198((*___1399)->File, ___3684, SEEK_SET) == 0); if (___3357) { *___2102 = ___1747(*___1399); ___3357 = (40 <= *___2102 && *___2102 <=  71)  || (*___2102 ==  75)                     || (100 <= *___2102 && *___2102 <= 112) || (*___2102 == 191); ___476(TecplotSDKBinaryFileVersion == 191); } ENSURE(VALID_BOOLEAN(___3357)); return (___3357); }
