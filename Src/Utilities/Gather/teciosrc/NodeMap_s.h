 #pragma once
#include "ThirdPartyHeadersBegin.h"
#include <fstream>
#include <vector>
#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "MASTER.h"
#include "GLOBAL.h"
#include "basicTypes.h"
#include "fileio.h"
namespace tecplot { namespace tecioszl { struct ___2728 { typedef boost::shared_ptr<___2728> Ptr; static Ptr makePtr (int32_t nodesPerCell, int64_t cellCount, int64_t maxNodeValue); static OffsetDataType_e getRawItemTypeForMaxNodeValue(int64_t maxNodeValue); int32_t ___2498; int64_t ___2390; int64_t m_maxNodeValue; ___2728(int32_t nodesPerCell, int64_t cellCount, int64_t maxNodeValue); virtual ~___2728(); OffsetDataType_e getRawItemType() const; virtual int64_t storedValueCount() const = 0; virtual void appendValue(int64_t ___4312) = 0; virtual void ___3502(int64_t ___2863, int64_t ___4312) = 0; virtual int64_t ___4312(int64_t ___2863) const = 0; virtual void* getRawPtr() = 0; virtual void writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const = 0; virtual uint64_t sizeInFile(bool ___4478) const = 0; static Ptr makePtr(tecplot::___3931::___1397& inputFile, bool readASCII); protected: virtual void readValuesFromFile(tecplot::___3931::___1397& inputFile, bool readASCII) = 0; }; template <typename T> class TypedNodeMap : public ___2728 { public: TypedNodeMap(int32_t nodesPerCell, int64_t cellCount, int64_t maxNodeValue); virtual int64_t storedValueCount() const; virtual void appendValue(int64_t ___4312); virtual void ___3502(int64_t ___2863, int64_t ___4312); virtual int64_t ___4312(int64_t ___2863) const; virtual void* getRawPtr(); virtual void writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const; virtual uint64_t sizeInFile(bool ___4478) const; protected: virtual void readValuesFromFile(tecplot::___3931::___1397& inputFile, bool readASCII); private: std::vector<T> m_nodes; }; template<typename T> TypedNodeMap<T>::TypedNodeMap(int32_t nodesPerCell, int64_t cellCount, int64_t maxNodeValue) : ___2728(nodesPerCell, cellCount, maxNodeValue) { REQUIRE(maxNodeValue < static_cast<int64_t>(std::numeric_limits<T>::max())); } template<typename T> int64_t TypedNodeMap<T>::storedValueCount() const { return static_cast<int64_t>(m_nodes.size()); } template<typename T> void TypedNodeMap<T>::appendValue(int64_t ___4312) { REQUIRE(___4312 < std::numeric_limits<T>::max()); if (m_nodes.empty()) m_nodes.reserve(___2498 * ___2390); m_nodes.push_back(static_cast<T>(___4312)); } template<typename T> void TypedNodeMap<T>::___3502(int64_t ___2863, int64_t ___4312) { REQUIRE(___4312 < std::numeric_limits<T>::max()); if (m_nodes.empty() || m_nodes.size() <= (size_t)___2863) m_nodes.resize(___2863 + 1); m_nodes[___2863] = static_cast<T>(___4312); } template<typename T> int64_t TypedNodeMap<T>::___4312(int64_t ___2863) const { REQUIRE(0 <= ___2863 && ___2863 < static_cast<int64_t>(m_nodes.size())); return m_nodes[___2863]; } template<typename T> void* TypedNodeMap<T>::getRawPtr() { if (m_nodes.empty()) m_nodes.assign(___2498 * ___2390, 0); return &m_nodes[0]; } template<typename T> void TypedNodeMap<T>::writeToFile(tecplot::___3931::FileWriterInterface& outputFile, bool ___4478) const
{ tecplot::tecioszl::writeScalar(outputFile, ___2498, ___4478); tecplot::tecioszl::writeScalar(outputFile, ___2390, ___4478); tecplot::tecioszl::writeScalar(outputFile, m_maxNodeValue, ___4478); tecplot::tecioszl::writeVector(outputFile, m_nodes, ___4478); } template<typename T> uint64_t TypedNodeMap<T>::sizeInFile(bool ___4478) const { return tecplot::tecioszl::scalarSizeInFile(___2498, ___4478) + tecplot::tecioszl::scalarSizeInFile(___2390, ___4478) + tecplot::tecioszl::scalarSizeInFile(m_maxNodeValue, ___4478) + tecplot::tecioszl::vectorSizeInFile(m_nodes, ___4478); } template<typename T> void TypedNodeMap<T>::readValuesFromFile(tecplot::___3931::___1397& inputFile, bool readASCII) { tecplot::tecioszl::readVector(inputFile, m_nodes, readASCII); } }}
