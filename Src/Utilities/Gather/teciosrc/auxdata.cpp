#include "stdafx.h"
#include "MASTER.h"
 #define ___260
#include "GLOBAL.h"
#include "CodeContract.h"
#include "ALLOC.h"
#include "CHARTYPE.h"
#include "STRUTIL.h"
#include "ARRLIST.h"
#include "DATASET.h"
#include "STRLIST.h"
#include "SET.h"
#include "AUXDATA.h"
using namespace tecplot; struct AuxDataItem_s { char const*   ___2684; ___90    ___4313; AuxDataType_e ___4234; ___372     ___3360; }; struct AuxData_s { ___90   ___2891; ___134 ItemList; }; ___372 ___250(char      ___470, ___372 ___2028) { ___372 IsValidNameChar; REQUIRE("Char can be any value"); REQUIRE(VALID_BOOLEAN(___2028)); IsValidNameChar = (___470 == '_' || tecplot::___1996(___470)); if (!___2028) IsValidNameChar = (IsValidNameChar || ___470 == '.'     || tecplot::___2010(___470)); ENSURE(VALID_BOOLEAN(IsValidNameChar)); return IsValidNameChar; } ___372 ___249(const char *___2684) { ___372  IsValidName; const char *NPtr; REQUIRE(VALID_REF(___2684)); for (NPtr = ___2684, IsValidName = ___250(*NPtr, ___4224); IsValidName && *NPtr != '\0'; NPtr++) { IsValidName = ___250(*NPtr, ___1303); } ENSURE(VALID_BOOLEAN(IsValidName)); return IsValidName; } static void AuxDataItemDealloc(AuxDataItem_s **AuxDataItem) { REQUIRE(VALID_REF(AuxDataItem)); REQUIRE(VALID_REF(*AuxDataItem) || *AuxDataItem == NULL); if (*AuxDataItem != NULL) { char* ___2684 = const_cast<char*>((*AuxDataItem)->___2684); if (___2684 != NULL) ___1528(___2684, "auxiliary name"); ___476((*AuxDataItem)->___4234 == ___270); char* ___4313 = reinterpret_cast<char*>((*AuxDataItem)->___4313); if (___4313 != NULL) ___1528(___4313, "auxiliary value"); ___1529(*AuxDataItem, "auxiliary data item"); *AuxDataItem = NULL; } ENSURE(*AuxDataItem == NULL); } static AuxDataItem_s* AuxDataItemAlloc(char const*   ___2684, ___90    ___4313, AuxDataType_e ___4234, ___372     ___3360) { REQUIRE(VALID_REF(___2684) && ___249(___2684)); REQUIRE(IMPLICATION(___4234 == ___270, (VALID_REF((char *)___4313) || (char *)___4313 == NULL))); REQUIRE(VALID_ENUM(___4234, AuxDataType_e)); REQUIRE(VALID_BOOLEAN(___3360)); AuxDataItem_s* ___3357 = ALLOC_ITEM(AuxDataItem_s, "auxiliary data item"); if (___3357 != NULL) { ___372 ___2038; ___3357->___4234   = ___4234; ___3357->___3360 = ___3360; ___3357->___2684   = ___1133(___1095(___2684)); ___2038 = (___3357->___2684 != NULL); ___3357->___4313 = 0; if (___2038) { ___476(___4234 == ___270); char* strValue = reinterpret_cast<char*>(___4313); if (strValue != NULL) { char* strCopy = ___1133(___1095(strValue)); ___3357->___4313 = reinterpret_cast<___90>(strCopy); ___2038 = (strCopy != NULL); } else { ___3357->___4313 = 0; } } if (!___2038) AuxDataItemDealloc(&___3357); } ENSURE(VALID_REF(___3357) || ___3357 == NULL); return ___3357; } static ___372 AuxDataItemListItemDestructor(void       *___2096, ___90  ___492) { AuxDataItem_s **AuxDataItemRef = (AuxDataItem_s **)___2096; REQUIRE(VALID_REF(AuxDataItemRef)); REQUIRE(VALID_REF(*AuxDataItemRef) || *AuxDataItemRef == NULL); ___4276(___492); if (*AuxDataItemRef != NULL) AuxDataItemDealloc(AuxDataItemRef); ENSURE(*AuxDataItemRef == NULL); return ___4224; } ___372 ___251(void       *___2096, ___90  ___492) { ___264 *AuxDataRef = (___264 *)___2096;
REQUIRE(VALID_REF(AuxDataRef)); REQUIRE(VALID_REF(*AuxDataRef) || *AuxDataRef == NULL); ___4276(___492); if (*AuxDataRef != NULL) ___236(AuxDataRef); ENSURE(*AuxDataRef == NULL); return ___4224; } static ___372 AuxDataItemDuplicator(void       *___3947, void       *___3643, ___90 ___492) { ___372 ___2038 = ___4224; AuxDataItem_s **TargetAuxDataItemRef = (AuxDataItem_s **)___3947; AuxDataItem_s **SourceAuxDataItemRef = (AuxDataItem_s **)___3643; ___372       ConsiderRetain; REQUIRE(VALID_REF(TargetAuxDataItemRef)); REQUIRE(VALID_REF(SourceAuxDataItemRef)); REQUIRE(VALID_REF(*SourceAuxDataItemRef) || *SourceAuxDataItemRef == NULL); REQUIRE(VALID_BOOLEAN((___372)___492)); ConsiderRetain = (___372)___492; if (*SourceAuxDataItemRef != NULL && (!ConsiderRetain || (*SourceAuxDataItemRef)->___3360)) { *TargetAuxDataItemRef = AuxDataItemAlloc((*SourceAuxDataItemRef)->___2684, (*SourceAuxDataItemRef)->___4313, (*SourceAuxDataItemRef)->___4234, (*SourceAuxDataItemRef)->___3360); ___2038 = (*TargetAuxDataItemRef != NULL); } else *TargetAuxDataItemRef = NULL; ENSURE(VALID_REF(*TargetAuxDataItemRef) || *TargetAuxDataItemRef == NULL); ENSURE(VALID_BOOLEAN(___2038)); return ___2038; } void ___236(___264 *___230) { REQUIRE(VALID_REF(___230)); REQUIRE(VALID_REF(*___230) || *___230 == NULL); if (*___230 != NULL) { ArrayListDealloc(&(*___230)->ItemList, AuxDataItemListItemDestructor, 0); ___1529(*___230, "auxiliary data container"); *___230 = NULL; } ENSURE(*___230 == NULL); } ___264 ___231(___90 ___2891) { ___264 ___3357 = ALLOC_ITEM(AuxData_s, "auxiliary data container"); if (___3357 != NULL) { ___3357->___2891 = ___2891; ___3357->ItemList = ArrayListAlloc(0, ArrayListType_VoidPtr, NULL, 0); if (___3357->ItemList == NULL) ___236(&___3357); } ENSURE(VALID_REF(___3357) || ___3357 == NULL); return ___3357; } ___264 ___234(___264 ___230, ___372  ConsiderRetain) { ___264 ___3357; REQUIRE(VALID_REF(___230)); REQUIRE(VALID_BOOLEAN(ConsiderRetain)); ___3357 = ALLOC_ITEM(AuxData_s, "auxiliary data container"); if (___3357 != NULL) { ___3357->___2891 = ___230->___2891; ___3357->ItemList = ArrayListCopy(___230->ItemList, AuxDataItemDuplicator, ConsiderRetain); if (___3357->ItemList != NULL) { if (ConsiderRetain) { int32_t ___2095 = 0; int32_t ItemCount = static_cast<int32_t>(___101(___3357->ItemList)); while (___2095 < ItemCount) { if (___133(___3357->ItemList, ___2095) == NULL) { int32_t BaseOffsetToRemove = ___2095; int32_t NumItemsToRemove   = 1; while (BaseOffsetToRemove + NumItemsToRemove < ItemCount && ___133(___3357->ItemList, BaseOffsetToRemove + NumItemsToRemove) == NULL) NumItemsToRemove++; ArrayListDeleteItems(___3357->ItemList, BaseOffsetToRemove, NumItemsToRemove, NULL, 0); ItemCount = static_cast<int32_t>(___101(___3357->ItemList)); } else ___2095++; } } } else ___236(&___3357); } ENSURE(VALID_REF(___3357) || ___3357 == NULL);
return ___3357; } int32_t ___248(___264 ___230) { int32_t NumItems; REQUIRE(VALID_REF(___230)); NumItems = static_cast<int32_t>(___101(___230->ItemList)); ENSURE(NumItems >= 0); return NumItems; } ___372 ___246(___264  ___230, const char *___2684, int32_t    *___2094) { ___372 FoundItem = ___1303; int32_t   ___1924; int32_t   NumItems; REQUIRE(VALID_REF(___230)); INVARIANT("AuxData->ItemList is case-insensitive sorted by AuxDataItem->Name"); REQUIRE(VALID_REF(___2684) && ___249(___2684)); REQUIRE(VALID_REF(___2094)); NumItems = ___248(___230); int ___2322, ___1828; ___2322 = 0; ___1828 = NumItems - 1; ___1924 = 0; while (___2322 <= ___1828) { int CompareResult; ___1924 = (___2322 + ___1828) / 2; AuxDataItem_s* AuxDataItem = (AuxDataItem_s *)___133(___230->ItemList, ___1924); CompareResult = ustrcmp(___2684, AuxDataItem->___2684); if (CompareResult < 0) ___1828 = ___1924 - 1; else if (CompareResult > 0) ___2322 = ++___1924; else { FoundItem = ___4224; break; } } *___2094 = ___1924; ENSURE(VALID_BOOLEAN(FoundItem)); ENSURE(0 <= *___2094 && ((FoundItem  && *___2094 <  NumItems) || (!FoundItem && *___2094 <= NumItems))); return FoundItem; } void ___244(___264    ___230, int32_t       ___1924, const char    **___2684, ___90    *___4313, AuxDataType_e *___4234, ___372     *___3360) { AuxDataItem_s *AuxDataItem; REQUIRE(VALID_REF(___230)); INVARIANT("AuxData->ItemList is case-insensitive sorted by AuxDataItem->Name"); REQUIRE(0 <= ___1924 && ___1924 < ___101(___230->ItemList)); REQUIRE(VALID_REF(___2684)); REQUIRE(VALID_REF(___4313)); REQUIRE(VALID_REF(___4234)); REQUIRE(VALID_REF(___3360)); AuxDataItem = (AuxDataItem_s *)___133(___230->ItemList, ___1924); *___2684       = AuxDataItem->___2684; *___4313      = AuxDataItem->___4313; *___4234       = AuxDataItem->___4234; *___3360     = AuxDataItem->___3360; ENSURE(VALID_REF(*___2684) && ___249(*___2684)); ENSURE(IMPLICATION(*___4234 == ___270, (VALID_REF((char *)(*___4313)) || (char *)(*___4313) == NULL))); ENSURE(VALID_ENUM(*___4234, AuxDataType_e)); ENSURE(VALID_BOOLEAN(*___3360)); } ___372 ___245(___264    ___230, const char    *___2684, ___90    *___4313, AuxDataType_e *___4234, ___372     *___3360) { ___372 FoundItem; int32_t ___2094; REQUIRE(VALID_REF(___230)); INVARIANT("AuxData->ItemList is case-insensitive sorted by AuxDataItem->Name"); REQUIRE(VALID_REF(___2684) && ___249(___2684)); REQUIRE(VALID_REF(___4313)); REQUIRE(VALID_REF(___4234)); REQUIRE(VALID_REF(___3360)); FoundItem = ___246(___230, ___2684, &___2094); if (FoundItem) { const char *SameName; ___244(___230, ___2094, &SameName, ___4313, ___4234, ___3360); ___476(ustrcmp(___2684, SameName) == 0); } ENSURE(VALID_BOOLEAN(FoundItem)); ENSURE(IMPLICATION(FoundItem, IMPLICATION(*___4234 == ___270, (VALID_REF((char *)(*___4313)) || (char *)(*___4313) == NULL)))); ENSURE(IMPLICATION(FoundItem, VALID_ENUM(*___4234, AuxDataType_e))); ENSURE(IMPLICATION(FoundItem,
VALID_BOOLEAN(*___3360))); return FoundItem; } ___372 ___242(___264     ___230, const char    *___2684, ___372     *___4313, AuxDataType_e *___4234, ___372     *___3360) { ___372 FoundItem; REQUIRE(VALID_REF(___230)); INVARIANT("AuxData->ItemList is case-insensitive sorted by AuxDataItem->Name"); REQUIRE(VALID_REF(___2684) && ___249(___2684)); REQUIRE(VALID_REF(___4313)); REQUIRE(VALID_REF(___4234)); REQUIRE(VALID_REF(___3360)); ___90 strValue; FoundItem = ___245(___230, ___2684, &strValue, ___4234, ___3360); if (FoundItem && (ustrcmp((char *)strValue, "YES")  == 0 || ustrcmp((char *)strValue, "YEP")  == 0 || ustrcmp((char *)strValue, "Y")    == 0 || ustrcmp((char *)strValue, "TRUE") == 0 || ustrcmp((char *)strValue, "T")    == 0 || ustrcmp((char *)strValue, "ON")   == 0 || ustrcmp((char *)strValue, "1")    == 0)) { *___4313 = ___4224; } else { *___4313 = ___1303; } ENSURE(VALID_BOOLEAN(FoundItem)); ENSURE(VALID_BOOLEAN(*___4313)); return FoundItem; } ___372 ___267(___264    ___230, char const*   ___2684, ___90    ___4313, AuxDataType_e ___4234, ___372     ___3360) { REQUIRE(VALID_REF(___230)); INVARIANT("AuxData->ItemList is case-insensitive sorted by AuxDataItem->Name"); REQUIRE(VALID_REF(___2684) && ___249(___2684)); REQUIRE(IMPLICATION(___4234 == ___270, (VALID_REF((char *)___4313) || (char *)___4313 == NULL))); REQUIRE(VALID_ENUM(___4234, AuxDataType_e)); REQUIRE(VALID_BOOLEAN(___3360)); AuxDataItem_s* AuxDataItem = AuxDataItemAlloc(___2684, ___4313, ___4234, ___3360); ___372 ___2038 = (AuxDataItem != NULL); if (___2038) { int32_t       ___2094; ArrayListItem_u ListItem; ListItem.___4438 = (void *)AuxDataItem; if (!___246(___230, ___2684, &___2094)) ___2038 = ArrayListInsertItem(___230->ItemList, ___2094, ListItem); else ___2038 = ArrayListSetItem(___230->ItemList, ___2094, ListItem, AuxDataItemListItemDestructor, 0); if (!___2038) AuxDataItemDealloc(&AuxDataItem); } ENSURE(VALID_BOOLEAN(___2038)); INVARIANT("AuxData->ItemList is case-insensitive sorted by AuxDataItem->Name"); return ___2038; } void ___237(___264 ___230, int32_t  ___1924) { REQUIRE(VALID_REF(___230)); REQUIRE(0 <= ___1924 && ___1924 < ___101(___230->ItemList)); ArrayListDeleteItem(___230->ItemList, ___1924, AuxDataItemListItemDestructor, 0); } ___372 ___238(___264 ___230, const char *___2684) { ___372 FoundItem; int32_t ___2094; REQUIRE(VALID_REF(___230)); REQUIRE(VALID_REF(___2684) && ___249(___2684)); FoundItem = ___246(___230, ___2684, &___2094); if (FoundItem) ___237(___230, ___2094); ENSURE(VALID_BOOLEAN(FoundItem)); return FoundItem; } void AuxDataDeleteItems(___264 ___230) { REQUIRE(VALID_REF(___230)); ArrayListDeleteAllItems(___230->ItemList); }
