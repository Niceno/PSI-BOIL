#include "NodeMap_s.h"
namespace tecplot { namespace tecioszl { ___2728::___2728(int32_t nodesPerCell, int64_t cellCount, int64_t maxNodeValue) : ___2498(nodesPerCell) , ___2390(cellCount) , m_maxNodeValue(maxNodeValue) { } ___2728::~___2728() { } OffsetDataType_e ___2728::getRawItemType() const { return getRawItemTypeForMaxNodeValue(m_maxNodeValue); } OffsetDataType_e ___2728::getRawItemTypeForMaxNodeValue(int64_t maxNodeValue) { if (maxNodeValue < std::numeric_limits<int32_t>::max()) return OffsetDataType_32Bit; else return OffsetDataType_64Bit; } ___2728::Ptr ___2728::makePtr(int32_t nodesPerCell, int64_t cellCount, int64_t maxNodeValue) { if (getRawItemTypeForMaxNodeValue(maxNodeValue) == OffsetDataType_32Bit) return boost::make_shared<TypedNodeMap<int32_t> >(nodesPerCell, cellCount, maxNodeValue); else return boost::make_shared<TypedNodeMap<int64_t> >(nodesPerCell, cellCount, maxNodeValue); } ___2728::Ptr ___2728::makePtr(tecplot::___3931::___1397& inputFile, bool readASCII) { int32_t nodesPerCell; int64_t cellCount; int64_t maxNodeValue; tecplot::tecioszl::readScalar(inputFile, nodesPerCell, readASCII); tecplot::tecioszl::readScalar(inputFile, cellCount, readASCII); tecplot::tecioszl::readScalar(inputFile, maxNodeValue, readASCII); Ptr ___3356 = makePtr(nodesPerCell, cellCount, maxNodeValue); ___3356->readValuesFromFile(inputFile, readASCII); return ___3356; } }}
