#include "Include/psi-boil.h"
#include "project.cpp"
#include "update_step.cpp"
#include <fstream>

#define _GNU_SOURCE 1
#include <fenv.h>
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}


/* domain dimensions (given by problem) */
const real LX =   2e-3;
const real LZ =   2e-3;

/* computed parameters */
//const int NX = 4;
const int NX = 100;
const int NY = 4;
const int NZ = 100;

const real DZ = LZ/real(NZ);

const real LY =   real(NY)/real(NX)*LX;

real Tout=101;
real Tsat=100;
real cangle0 = 180.-60.;
/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>( -LX/2.,LX/2.), NX, Periodic::no() );
  Grid1D gy( Range<real>( -LY/2.,LY/2.), NY, Periodic::yes() );
  Grid1D gz( Range<real>( 0,LZ), NZ, Periodic::no() );

  Grid1D gzc( Range<real>( -2*DZ,LZ), NZ+2, Periodic::no() );

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  Domain dc(gx, gy, gzc);

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d), step(d); // temperature
  Scalar mdot(d);        // phase-change
  Scalar sflag(d);        // phase-change

  Vector uvw2(dc); // vel
  Scalar c2(dc), g2(dc);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );

    uvw2.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw2.bc(m).add( BndCnd( Dir::imax(), BndType::wall() ) );
    uvw2.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw2.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
    uvw2.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw2.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  }
  p.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  q = p.shape();

  c.bc().add( BndCnd( Dir::imin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  g = c.shape();
  step = c.shape();
  cold = c.shape();
  sflag = c.shape();

  c2.bc().add( BndCnd( Dir::imin(), BndType::wall() ) );
  c2.bc().add( BndCnd( Dir::imax(), BndType::wall() ) );
  c2.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c2.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
  c2.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c2.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  g2 = c2.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::neumann() ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::dirichlet(), Tout ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::dirichlet(), Tsat ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
  vapor  .cp    (2030*0.597);
  vapor  .lambda(0.025);
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);
  const real latent=2258.0*1e3;

  Matter mixed(liquid, vapor,& step); //c=1: full of liquid, c=0: full of vapor
  mixed.sigma(2.3610e-2);
  const real liquid_drhodt=-0.7;   //[kg/m3K]
  const real vapor_drhodt=-0.0017; //[kg/m3K]
  const real gravity = 9.81;

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt = 5000;
  const int  nint = ndt/50;
  const int  bint = ndt/1;
  const real dt  = 1.0e-5;
  const real dxmin = d.dxyz_min();
  const real cfl_limit = 0.2;
  Times time(ndt, dt);
  time.print_time(false);
  time.set_coef_dec(0.2);

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  const real radius = 3.*DZ;
  const real xcent = 0.0;
  const real zcent = radius*(1.-cos(boil::pi*cangle0/180.))-radius;
  for_vijk(c2,i,j,k) {
    real alp=1.5*c2.dxc(i);
    real dist=sqrt(pow(c2.xc(i)-xcent,2.0)
                  +pow(c2.zc(k)-zcent,2.0));
    if (dist<radius-alp) {
      c2[i][j][k]=1.0;
    } else if(dist<radius+alp) {
      c2[i][j][k]=0.5-0.5*sin((0.5*boil::pi*(dist-radius))/alp);
    }
  }
  for_avij(c2,i,j) {
    c2[i][j][c2.sk()  ] = 0.0;//c2[i][j][c2.sk()+2];
    c2[i][j][c2.sk()+1] = 0.0;//c2[i][j][c2.sk()+2];
  }

  for_avijk(c,i,j,k) {
      c[i][j][k] = c2[i][j][k+2];
  }

  for_avijk(tpr,i,j,k){
    tpr[i][j][k] = Tsat;
  }

  update_step(c,step,sflag);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.diffusion_set (TimeScheme::backward_euler());
  ns.convection_set(ConvScheme::upwind());

  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(8);


  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
  CIPCSL2 conc2 (c2, g2, c2, uvw2, time, solver);
  conc.totalvol();
  conc.set_cangle(cangle0);
  conc.set_itsharpen(0);
  conc.set_nredist(0);
  conc.ancillary();
  conc2.ancillary();
  conc2.set_itsharpen(8);

  EnthalpyFD enthFD(tpr, q, c, uvw, time, solver, &mixed, Tsat);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());
  PhaseChange pc (mdot, tpr, q, c, g, f, step, uvw, time, &mixed, latent, Tsat, NULL);

  boil::plot->plot(uvw, c, tpr, mdot, "uvw-c-tpr-mdot", 0);
  boil::plot->plot(uvw2,c2,g2, "uvw2-c2-g2", 0);

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    conc. load("conc",ts);
    press.load("press",ts);
    tpr.  load("tpr",ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);

  } 
  input.close();

  /*------------+
  |  time loop  |
  +------------*/
  int testint = 1;
  for(time.start(); time.end(); time.increase()) {
    boil::oout << "##################" << boil::endl;
    boil::oout << "# TIME:      " << time.current_time() << boil::endl;
    boil::oout << "# TIME STEP: " << time.current_step() << boil::endl;
    boil::oout << "# WTIME:     " << boil::timer.current_min() << boil::endl;
    boil::oout << "##################" << boil::endl;

    /*---------------------------------------+
    |  solve energy equation + phase change  |
    +---------------------------------------*/
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"Enthalpy");
    pc.update();
    real vpc = ns.vol_phase_change(&f);
    boil::oout<<"VPC= "<<time.current_time()<<" "<<vpc<<" "<<vpc*time.dt()<<boil::endl;

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
        xyz[m][i][j][k]=0.0;
    /* surface tension */
    conc.tension(&xyz, mixed, step);
    /* gravity force */
    Comp m = Comp::w();
    for_vmijk(xyz,m,i,j,k){
      real phil=step[i][j][k];
      real phiv=1.0-phil;
      real deltmp=tpr[i][j][k]-Tsat;
      real rhomix = (liquid.rho()->value() + liquid_drhodt*deltmp)*phil
                  + (vapor.rho()->value()  + vapor_drhodt*deltmp)*phiv;
      if(d.ibody().on(m,i,j,k))
        xyz[m][i][j][k] += -gravity * xyz.dV(m,i,j,k) * rhomix;
    }

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    ns.grad(press);
    ns.solve(ResRat(1e-14));
    p = 0.0;
    if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;
    press.exchange();


#if 1
    /* this part does not work in parallel computation */
    real dltp = press[1][1][1];
    for_vijk(press,i,j,k)
      press[i][j][k] -= dltp;
#endif

    for_m(m)
    for_avmijk(uvw2,m,i,j,k) {
      if(k>uvw2.sk(m)+1)
        uvw2[m][i][j][k] = uvw[m][i][j][k-2];
      else if(m!=Comp::w()&&k>=uvw2.sk(m)) 
        uvw2[m][i][j][k] = uvw[m][i][j][uvw2.sk(m)];
      else
        uvw2[m][i][j][k] = 0.0;
    }
    for_avijk(g2,i,j,k) {
      if(k>g2.sk()+1)
        g2[i][j][k] = g[i][j][k-2];
      else
        g2[i][j][k] = 0.0;
    }

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    cold=c;
#if 0
    conc2.advance();
    for_avijk(c,i,j,k) {
        c[i][j][k] = c2[i][j][k+2];
    }
    conc.update_node(c);
    conc.ancillary();
#else
    conc.advance();
#endif
    conc.totalvol();

    update_step(c, step, sflag);
    pc.modify_vel(uvw,c,cold);

    /*-------------+
    |  dt control  |
    +-------------*/
    real cflmax = ns.cfl_max();
    time.control_dt(cflmax, cfl_limit, dt);

#if 0
    if((time.current_step()==testint) ) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
      boil::plot->plot(uvw2,c2,g2, "uvw2-c2-g2", time.current_step());
      testint++;
      if (testint == 5) 0xit(0);
    }
#endif

    if(time.current_step() % nint == 0 || 
       time.current_step() == 1 ||
       time.current_step() == ndt) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
      boil::plot->plot(uvw2,c2,g2, "uvw2-c2-g2", time.current_step());
    }

    if(((time.current_step()) % (bint)==0) ) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      conc .save("conc",  time.current_step());
      tpr  .save("tpr",   time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }

    if(time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      conc .save("conc",  time.current_step());
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      uvw  .rm("uvw", ts);
      conc .rm("conc", ts);
      press.rm("press", ts);
      tpr  .rm("tpr", ts);
    }
  }

#if 0
  for_wvmijk(conc.sxyz,Comp::k(),i,j,k)
    boil::oout<<i<<" "<<j<<" "<<k<<" "<<conc.sxyz.zc(Comp::k(),k)<<" "<<conc.fs[Comp::k()][i][j][k]<<" "<<c[i][j][k-1]<<boil::endl;
#endif

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
/*-----------------------------------------------------------------------------+
 '$Id: main-CIPCSL2-1d.cpp,v 1.3 2018/09/26 10:06:18 sato Exp $'/
+-----------------------------------------------------------------------------*/
