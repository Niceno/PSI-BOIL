#include "Include/psi-boil.h"
#include "project.cpp"
#include <fstream>
//#define USE_VOF

#define _GNU_SOURCE 1
#include <fenv.h>
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}


/* domain dimensions (given by problem) */
//const real LX =   0.5;
const real LX =   0.2;
const real LZ =   0.2;

/* computed parameters */
//const int NX = 4;
const int NX = 100;
const int NY = 4;
const int NZ = 100;

const real DZ = LZ/real(NZ);

const real LY =   real(NY)/real(NX)*LX;
/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>( 0,LX), NX, Periodic::yes() );
  Grid1D gy( Range<real>( -LY/2.,LY/2.), NY, Periodic::yes() );
  Grid1D gz( Range<real>( 0,LZ), NZ, Periodic::no() );

  Grid1D gzc( Range<real>( -1*DZ,LZ), NZ+1, Periodic::no() );

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  Domain dc(gx, gy, gzc);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt = 800;//8000;
  const int nint = 100;
  const int  bint = 20000;
  const real dt  = 0.25 * LX / real(NX);
  Times time(ndt, dt); 
	
  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d); // vel
  Scalar c  (d), g  (d), kappa(d); // concentration

  Vector uvw2(dc); // vel
  Scalar c2(dc), g2(dc);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
#if 1
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
    uvw2.bc(m).add( BndCnd( Dir::imin(), BndType::periodic() ) );
    uvw2.bc(m).add( BndCnd( Dir::imax(), BndType::periodic() ) );
    uvw2.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw2.bc(m).add( BndCnd( Dir::kmax(), BndType::wall() ) );
    uvw2.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw2.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  }
#endif
  c.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  c2.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  c2.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );
  c2.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c2.bc().add( BndCnd( Dir::kmax(), BndType::wall() ) );
  c2.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c2.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  Comp m=Comp::u();
  for_vmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=0.0;

  m=Comp::v();
  for_vmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=0.0;

  m=Comp::w();
  for_vmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=0.0;
  uvw.exchange();

  for_vijk(c,i,j,k) 
    c[i][j][k] = 0.0;

  const real radius = LZ/4.0;
  const real xcent = LX/2.0;
  const real ycent = 0.0;
  const real zcent = LZ/4.0;
  for_vijk(c2,i,j,k) {
    real dist=sqrt(pow(c2.xc(i)-xcent,2.0)
                  +pow(c2.zc(k)-zcent,2.0));
    if (dist<radius*0.80) {
      c2[i][j][k]=1.0;
    } else if(dist<radius*1.2) {
      int mm=10;
      real x0=dc.xn(i);
      real y0=dc.yn(j);
      real z0=dc.zn(k);
      real ddx=dc.dxc(i)/real(mm);
      real ddy=dc.dyc(j)/real(mm);
      real ddz=dc.dzc(k)/real(mm);
      int itmp=0;
      for (int ii=0; ii<mm; ii++){
        for (int jj=0; jj<mm; jj++){
          for (int kk=0; kk<mm; kk++){
            real xxc=x0+0.5*ddx+real(ii)*ddx;
            real yyc=y0+0.5*ddy+real(jj)*ddy;
            real zzc=z0+0.5*ddz+real(kk)*ddz;
            real dist=sqrt(pow(xxc-xcent,2.0)
                          +pow(zzc-zcent,2.0));
            if (dist<radius){
              itmp=itmp+1;
            }
          }
        }
      }
      c2[i][j][k]=real(itmp)/real(mm*mm*mm);
    }
  }
  c2.bnd_update();
  c2.exchange_all();

  for_avijk(c,i,j,k) {
      c[i][j][k] = c2[i][j][k+3];
  }

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

#ifdef USE_VOF
  VOF conc  (c, g, kappa, uvw, time, solver);
#else
  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
  CIPCSL2 conc2 (c2, g2, c2, uvw2, time, solver);
#endif
  conc.totalvol();
  conc.set_cangle(180.);

#if 1
  m=Comp::u();
  for_vmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=1.0;
  for_vmijk(uvw2,m,i,j,k)
    uvw2[m][i][j][k]=1.0;
#endif

  conc.set_itsharpen(0);
  conc.set_nredist(0);
  conc2.set_itsharpen(4);

  boil::plot->plot(uvw,c, "uvw-c", 0);
  boil::plot->plot(c2, "c2", 0);

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    conc. load("conc",ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);

  } 
  input.close();


  /* run */
  for(time.start(); time.end(); time.increase()) {

    conc.advance();
    conc.totalvol();
    boil::oout<<"MC: "<<time.current_time()<<" "<<conc.get_clrsum1()<<" "<<conc.get_clrsum2()<<boil::endl;

    conc2.advance();
    for_avijk(c,i,j,k) {
        c[i][j][k] = c2[i][j][k+3];
    }
    conc.update_node(c);


#if 0
    for_vijk(c,i,j,k) {
      if(c.zc(k)<c.dzc(k)&&c[i][j][k]>boil::micro&&i==6&&j==50&&k==1)
         boil::aout<<i<<" "<<j<<" "<<k<<" | "<<c[i][j][k]<<" "<<c[i][j][k+1]<<boil::endl;
    }
#endif

    //if(time.current_step() == 400 || time.current_step() == ndt) {
    if(time.current_step() % 400 == 0 || time.current_step() == ndt) {
      boil::plot->plot(uvw, c, "uvw-c",  time.current_step());
      boil::plot->plot(c2, "c2", time.current_step());
    }

    if(((time.current_step()) % (bint)==0) ) {
      uvw  .save("uvw",   time.current_step());
      conc .save("conc",  time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }

    if(time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      conc .save("conc",  time.current_step());
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      uvw  .rm("uvw", ts);
      conc .rm("conc", ts);
    }
  }

#if 0
  for_wvmijk(conc.sxyz,Comp::k(),i,j,k)
    boil::oout<<i<<" "<<j<<" "<<k<<" "<<conc.sxyz.zc(Comp::k(),k)<<" "<<conc.fs[Comp::k()][i][j][k]<<" "<<c[i][j][k-1]<<boil::endl;
#endif

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
/*-----------------------------------------------------------------------------+
 '$Id: main-CIPCSL2-1d.cpp,v 1.3 2018/09/26 10:06:18 sato Exp $'/
+-----------------------------------------------------------------------------*/
