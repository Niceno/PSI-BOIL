#include "Include/psi-boil.h"

#define USE_VOF
//#define USE_FULL
#define USE_PC4
#define USE_SECOND_ORDER
#define USE_VOF_VEL
//#define USE_UNCOND_EXTRP
//#define DISCARD_POINTS

const int NZ = 4;

/******************************************************************************/
int main(int argc, char * argv[]) {

  /* Journal of Computational Physics, 249, 127-161 */
  /* Sucking problem */

  boil::timer.start();

  if(argc<3) {
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin level (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int Level=atoi(argv[2]);
  boil::oout<<"level= "<<Level<<"\n";

  /* computed parameters */
  const int dtLevel = 1; // 1 or 2
  const int NX = 2*40*Level;

  /* domain dimensions (given by problem) */
  const real LX = 8.0e-3;
  const real DX = LX/real(NX);
  const real LZ = DX*real(NZ);

  const real xint = 0.002205323668813564;
  const real x0 = xint-1.01*DX;

  const real Tout=5.;
  const real Tsat=0.;

#ifndef USE_VOF
  boil::oout<<"Edit cipcsl2_sharpen.cpp!\n";
  boil::oout<<"#if 1 (for 1D)\n";
  const int NZ = 3;
  const real LZ = DX*real(NZ);
#endif

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0*LX+x0,1.0*LX+x0), NX, Periodic::no() );
#ifdef USE_FULL
  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::yes() );
#else
  Grid1D gz(DX);
#endif

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gz, gz);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d), uvw_1(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d), step(d); // temperature
  Scalar mdot(d);        // phase-change
  Scalar mflx(d);        // phase-change
  Scalar sflag(d);        // phase-change

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef USE_FULL
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif
    uvw_1(m) = uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef USE_FULL
  p.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
  p.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();

  c = p.shape();
  g = c.shape();
  step = c.shape();
  cold = c.shape();
  sflag = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), Tsat ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), Tout ) );
#ifdef USE_FULL
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
  vapor  .cp    (2030*0.597);
  vapor  .lambda(0.025);
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);

#ifndef USE_VOF
  Matter mixed(liquid, vapor,& step); //c=1: full of liquid, c=0: full of vapor
#else
  Matter mixed(liquid, vapor,& c); //c=1: full of liquid, c=0: full of vapor
#endif
  mixed.sigma(2.3610e-2);
  mixed.latent(2258.0*1e3);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt =500*Level*dtLevel;
  const int  nint = 100*Level*dtLevel;
  const real dt  = 1.0e-3/real(Level*dtLevel);

  Times time(ndt, dt);

  OPR(  NX );
  OPR(  LX );
  OPR(  dt );
  OPR( ndt );
 
  /*--------------------+
  |  initial condition  |
  +--------------------*/
  /* read from file */
  real xi[200],tprin[200];
  std::fstream input;
  input.open("input.sucking");
  if( input.fail() ) {
      boil::oout<<"Error: input.sucking is necessary!!!";
      exit(0);
  } else {
    for(int i=0; i<200; i++){
      input>>xi[i]>>tprin[i];
    }
  }

  /* color function */
  for_vijk(c,i,j,k)
    c[i][j][k] = 1.0;
  for_vijk(c,i,j,k) {
    if(i==boil::BW&&((c.xc(boil::BW)-x0)<2.*c.dxc(boil::BW))) {
      c[i][j][k]=0.0;
    } else if(i==1+boil::BW&&((c.xc(boil::BW)-x0)<2.*c.dxc(boil::BW))) {
      c[i][j][k]=0.99; /* approximately one cell */
    } else {
      c[i][j][k] = 1.0;
    }
  }
  c.bnd_update();
  c.exchange_all();

  /* temperature */
  for(int i=0; i<200; i++){
    xi[i]+=xint;
    tprin[i] -= 373.15;
  }
  real xiend=xi[199];
  for_vijk(tpr,i,j,k){
    real xtmp=tpr.xc(i);
    if(xtmp>=xiend){
      tpr[i][j][k] = Tout;
    } else if (xtmp<=xint) {
      tpr[i][j][k] = Tsat;
    } else {
      for(int ii=0; ii<199; ii++){
        if((xtmp-xi[ii])*(xtmp-xi[ii+1])<=0) {
          real we1=(xi[ii+1]-xtmp)/(xi[ii+1]-xi[ii]);
          real we2=(xtmp-xi[ii])/(xi[ii+1]-xi[ii]);
          tpr[i][j][k]=we1*tprin[ii]+we2*tprin[ii+1];
        }
      }
    }
  }
  tpr.bnd_update();
  tpr.exchange_all();

  boil::plot->plot(uvw, c, tpr, mdot, "uvw-c-tpr-mdot", 0);

  for_avijk(c,i,j,k){
    step[i][j][k]=c[i][j][k];
  }

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Momentum ns( uvw, xyz, time, solver, &mixed);
  Pressure pr(p, f, uvw, time, solver, &mixed);
#ifndef USE_VOF
  CIPCSL2 conc  (c,  g, kappa, uvw, time, solver);
  conc.set_nredist(1);
  conc.set_itsharpen(4);
#else 
  #ifdef USE_VOF_VEL
  VOF conc  (c,  g, kappa, uvw_1, time, solver);
  #else
  VOF conc  (c,  g, kappa, uvw, time, solver);
  #endif
#endif
  AC multigrid( &pr );
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(1);

  conc.init();
  c.exchange_all();
  conc.ancillary();
  conc.front_minmax();
  conc.totalvol();

  TIF tsat(Tsat);
  EnthalpyFD enthFD(tpr, q, uvw, time, solver, &mixed,
                     conc.topo,tsat);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());
#ifndef USE_PC4
  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g , f , uvw, conc.topo,
                    tsat, time, &mixed);
#else
  PhaseChange4   pc(mdot, mflx, tpr, q, c, g , f , uvw, conc.topo,
                    tsat, time, &mixed);
  #ifdef USE_SECOND_ORDER
  pc.set_second_order_accuracy(true);
  #else
  pc.set_second_order_accuracy(false);
  #endif
  #ifdef USE_UNCOND_EXTRP
  pc.set_unconditional_extrapolation(true);
  #else
  pc.set_unconditional_extrapolation(false);
  #endif
  #ifdef DISCARD_POINTS
  pc.set_discard_points_near_interface(true);
  #else
  pc.set_discard_points_near_interface(false);
  #endif
#endif

  boil::plot->plot(uvw, c, tpr, mdot, "uvw-c-tpr-mdot", 0);

  conc.new_time_step();
  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-7));

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    ns.vol_phase_change(&f);

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
	xyz[m][i][j][k]=0.0;

    ns.grad(press);
    ns.solve(ResRat(1e-7));

    p = 0.0;
    if (multigrid.wcycle(ResRat(1e-7))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;
    press.exchange();

    //exit(0);

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    /* new time step */
    conc.new_time_step();

    cold=c;
#ifndef USE_VOF_VEL
    conc.advance();
#else
    conc.advance_with_extrapolation(true,ResRat(1e-7),uvw,f,
                                    &liquid,&uvw_1);
#endif
 
    conc.front_minmax();
    conc.totalvol();

    boil::oout<<"xpos= "<<time.current_time()<<" "<<conc.topo->get_xmaxft()-x0<<" "<<(conc.topo->get_xmaxft()-x0)/DX<<boil::endl;

    for_avijk(c,i,j,k){
      step[i][j][k]=c[i][j][k];
    }

#ifndef USE_VOF
    pc.modify_vel(uvw,c,cold);
#endif

    if(time.current_step() % (nint)==0 ||time.current_step()==1) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
    }
  }

#if 1
  std::ofstream fout;
  fout.open("velocity-u.txt");
  Comp m=Comp::u();
  for_vmi(uvw,m,i) {
       fout << uvw.xc(m,i) << "  " << uvw[m][i][1][1] << "\n";
  }
  fout.close();

  fout.open("color.txt");
  for_vi(c,i) {
       fout << c.xc(i) << "  " << c[i][1][1] << "\n";
  }
  fout.close();

  fout.open("temperature.txt");
  for_vi(tpr,i) {
        fout << tpr.xc(i) << "  " << tpr[i][1][1] << "\n";
  }
  fout.close();

  fout.open("mdot.txt");
  for_vi(tpr,i) {
        fout << c.xc(i) << "  " << mdot[i][1][1] << "\n";
  }
  fout.close();
#endif

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}	
