#include "Include/psi-boil.h"

#define USE_VOF
//#define USE_FULL

const int NZ = 4;

/******************************************************************************/
int main(int argc, char * argv[]) {

  /* Journal of Computational Physics, 249, 127-161 */
  /* Sucking problem */

  boil::timer.start();

  if(argc<3) {
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin level (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int Level=atoi(argv[2]);
  boil::oout<<"level= "<<Level<<"\n";

  /* computed parameters */
  const int dtLevel = 1; // 1 or 2
  const int NX = 2*40*Level;

  /* domain dimensions (given by problem) */
  const real LX = 8.0e-3;
  const real DX = LX/real(NX);
  const real LZ = DX*real(NZ);

  const real xint = 0.002205323668813564;
  const real x0 = xint-2.01*DX;

  const real Tout=5.;
  const real Tsat=0.;

#ifndef USE_VOF
  boil::oout<<"Edit cipcsl2_sharpen.cpp!\n";
  boil::oout<<"#if 1 (for 1D)\n";
  const int NZ = 3;
  const real LZ = DX*real(NZ);
#endif

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0*LX+x0,1.0*LX+x0), NX, Periodic::no() );
#ifdef USE_FULL
  Grid1D gz( Range<real>(0.0,LZ), NZ, Periodic::yes() );
#else
  Grid1D gz(DX);
#endif

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gz, gz);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d), uvw_1(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d), step(d); // temperature
  Scalar mdot(d);        // phase-change
  Scalar mflx(d);        // phase-change
  Scalar tprold(d),tprap1(d),tprap2(d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef USE_FULL
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif
    uvw_1(m) = uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
#ifdef USE_FULL
  p.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
  p.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();

  c = p.shape();
  g = c.shape();
  step = c.shape();
  cold = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), Tsat ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), Tout ) );
#ifdef USE_FULL
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
#else
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#endif
  tprap1 = tpr.shape();
  tprap2 = tpr.shape();
  tprold = tpr.shape();

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  const real mul = 0.28e-3;
  const real rhol = 958.4;
  const real lambdal = 0.679;
  const real cpl = 4215.9*rhol;
  const real alpl = lambdal/cpl;

  const real muv = 1.255e-5;
  const real rhov = 0.597;
  const real lambdav = 0.025;
  const real cpv = 2030.*rhov;
  const real alpv = lambdav/cpv;

  Matter vapor(d), liquid(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);
  vapor  .lambda(lambdav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);
  liquid.lambda(lambdal);

#ifndef USE_VOF
  Matter mixed(liquid, vapor,& step); //c=1: full of liquid, c=0: full of vapor
#else
  Matter mixed(liquid, vapor,& c); //c=1: full of liquid, c=0: full of vapor
#endif
  mixed.sigma(2.3610e-2);
  mixed.latent(2258.0*1e3);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt =500*Level*dtLevel;
  const int  nint = 100*Level*dtLevel;
  const real dt  = 1.0e-3/real(Level*dtLevel);

  Times time(ndt, dt);

  OPR(  NX );
  OPR(  LX );
  OPR(  dt );
  OPR( ndt );
 
  /*--------------------+
  |  initial condition  |
  +--------------------*/
  /* color function */
  for_vijk(c,i,j,k)
    c[i][j][k] = 1.0;
  for_vijk(c,i,j,k) {
    if(c.xc(i)-x0<2.*c.dxc(i)) {
      c[i][j][k]=0.0;
    } else if(c.xc(i)-x0<3.*c.dxc(i)) {
      c[i][j][k]=0.99; /* approximately two cells */
    } else {
      c[i][j][k] = 1.0;
    }
  }
  c.bnd_update();
  c.exchange_all();

  /* temperature */
  const real betasol = 0.7677282527146145;
  const real t0 = 0.1;
  const real gamma = rhov*sqrt(alpv)/rhol/sqrt(alpl);
  auto tsol = [&](const real x, const real t) {
    return (Tout-Tsat)-(Tout-Tsat)/erfc(betasol*gamma)*
           erfc(x/2./sqrt(alpl*t)+betasol*(rhov-rhol)/rhol*sqrt(alpv/alpl)); 
  };
  for_vijk(tpr,i,j,k) {
    real xtmp=tpr.xc(i);
    if(xtmp<=xint) {
      tpr[i][j][k] = Tsat;
    } else {
      tpr[i][j][k] = tsol(xtmp,t0); 
    }
  }
  tpr.bnd_update();
  tpr.exchange_all();

  boil::plot->plot(uvw, c, tpr, mdot, "uvw-c-tpr-mdot", 0);

  for_avijk(c,i,j,k){
    step[i][j][k]=c[i][j][k];
  }

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Momentum ns( uvw, xyz, time, solver, &mixed);
  Pressure pr(p, f, uvw, time, solver, &mixed);
#ifndef USE_VOF
  CIPCSL2 conc  (c,  g, kappa, uvw, time, solver);
  conc.set_nredist(1);
  conc.set_itsharpen(4);
#else 
  VOF conc  (c,  g, kappa, uvw_1, time, solver);
#endif
  AC multigrid( &pr );
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(1);

  conc.init();
  c.exchange_all();
  conc.ancillary();
  conc.front_minmax();
  conc.totalvol();

  TIF tsat(Tsat);
  CommonHeatTransfer cht(tpr,conc.topo,tsat,&mixed);
  EnthalpyFD enthFD(tpr, q, uvw, uvw_1, uvw, time, solver, &mixed, cht);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());
  enthFD.set_no_solid_acceleration(false);
  enthFD.set_flux_accuracy_order(AccuracyOrder::First());
  PhaseChange4 pc(mdot, mflx, q, g , f , uvw, cht,
                  time, &mixed);
  pc.set_accuracy_order(AccuracyOrder::FourthUpwind());
  pc.set_unconditional_extrapolation(false);
  pc.set_discard_points_near_interface(false);

  boil::plot->plot(uvw, c, tpr, mdot, "uvw-c-tpr-mdot", 0);

  conc.new_time_step();
  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    /*---------------+
    |  phase change  |
    +---------------*/
    pc.update();
    real massflux_heat = pc.get_smdot();
    massflux_heat /= conc.topo->get_totarea();
    boil::oout<<"mflux= "<<time.current_time()<<" "
                         <<massflux_heat<<" "
                         <<boil::endl;

    ns.vol_phase_change(&f);

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
	xyz[m][i][j][k]=0.0;

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    p = 0.0;
    if (multigrid.fcycle(ResTol(1e-7))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;
    press.exchange();

    //exit(0);

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    /* new time step */
    conc.new_time_step();

    cold=c;
    conc.advance_with_extrapolation(true,ResTol(1e-7),uvw,f,
                                    &liquid,&uvw_1);
 
    conc.front_minmax();
    conc.totalvol();

    for_vijk(tpr,i,j,k) {
      if(conc.topo->interface(i,j,k)) {
        boil::oout<<"tpr= "<<time.current_time()<<" "<<i<<" "<<tpr[i-1][j][k]<<" "<<tpr[i][j][k]<<" "<<tpr[i+1][j][k]<<boil::endl;
      }
    }
    boil::oout<<"xpos= "<<time.current_time()<<" "<<conc.topo->get_xmaxft()-x0<<" "<<(conc.topo->get_xmaxft()-x0)/DX<<boil::endl;

    for_avijk(c,i,j,k){
      step[i][j][k]=c[i][j][k];
    }

#ifndef USE_VOF
    pc.modify_vel(uvw,c,cold);
#endif

    /*------------------------+
    |  solve energy equation  |
    +------------------------*/
    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-14));

    if(time.current_step() % (nint)==0 ||time.current_step()==1) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
    }
  }

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}	
