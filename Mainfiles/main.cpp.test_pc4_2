#include "Include/psi-boil.h"
#include <fstream>
#include <iostream>
#include <fenv.h>
#include <random>
#define _GNU_SOURCE 1
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

#define CASE 1
/* 0: x-dir, 1: z-dir */

/******************************************************************************/
int main(int argc, char ** argv) {

/* ------------ input from command line */
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int seed = atoi(argv[2]); /* rng seed */
  boil::oout<<"seed= "<<seed<<"\n";

  const bool snd_order = atoi(argv[3]); /* order of method */
  boil::oout<<"snd_order= "<<snd_order<<"\n";

  const int ord = atoi(argv[4]); /* order of polynomial (1,2,4)
                                    1: neumann cannot be satisfied */
  boil::oout<<"pol_order= "<<ord<<"\n";

  if(ord!=1&&ord!=2&&ord!=4) exit(0);

  boil::timer.start();

  const real twall0 = 0.;
  real tsat0 = twall0-3.;
  const real twall1 = tsat0-4.;
  const real rhov = 1.;
  const real rhol = 1000.;
  const real lambdav = 0.5;
  const real lambdal = 0.6;
  const real latent=2000*1000.0;
  const real lambdasol = 1.1;

  const int NX1  = 10;
  real LX1 = 0.1e-3;
  real DX1 = LX1/15.;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx1( Range<real>(0.0,LX1)
            , Range<real>(3.0*DX1,1.0*DX1)
            , NX1, Periodic::no() );
  Grid1D gx2( Range<real>(-LX1,0.0)
            , Range<real>(1.0*DX1,3.0*DX1)
            , NX1, Periodic::no() );
  Grid1D gx(gx2,gx1, Periodic::no());

  /*---------+
  |  domain  |
  +---------*/
  Comp m;
#if CASE == 0
  Body floor("floorx.stl");
  m = Comp::i();
  Domain d(gx , gx1, gx1, &floor);
#else
  Body floor("floorz.stl");
  m = Comp::k();
  Domain d(gx1, gx1, gx , &floor);
#endif

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d);           // vel
  Scalar f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar tpr(d), q  (d);           // temperature
  Scalar mdot(d), mflx(d);         // phase-change rate

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  Dir d1(Dir::undefined()),d2(Dir::undefined()),d3(Dir::undefined()),
      d4(Dir::undefined()),d5(Dir::undefined()),d6(Dir::undefined());
#if CASE == 0
  d1 = Dir::imin();
  d2 = Dir::imax();
  d3 = Dir::jmin();
  d4 = Dir::jmax();
  d5 = Dir::kmin();
  d6 = Dir::kmax();
#else
  d1 = Dir::kmin();
  d2 = Dir::kmax();
  d3 = Dir::imin();
  d4 = Dir::imax();
  d5 = Dir::jmin();
  d6 = Dir::jmax();
#endif 

  for_m(m) {
    uvw.bc(m).add( BndCnd( d1, BndType::wall() ) );
    uvw.bc(m).add( BndCnd( d2, BndType::wall() ) );
    uvw.bc(m).add( BndCnd( d3, BndType::wall() ) );
    uvw.bc(m).add( BndCnd( d4, BndType::wall() ) );
    uvw.bc(m).add( BndCnd( d5, BndType::wall() ) );
    uvw.bc(m).add( BndCnd( d6, BndType::wall() ) );
  }

  c.bc().add( BndCnd( d1, BndType::wall() ) );
  c.bc().add( BndCnd( d2, BndType::wall() ) );
  c.bc().add( BndCnd( d3, BndType::neumann() ) );
  c.bc().add( BndCnd( d4, BndType::neumann() ) );
  c.bc().add( BndCnd( d5, BndType::neumann() ) );
  c.bc().add( BndCnd( d6, BndType::neumann() ) );

  /* copy b.c. from p */
  f = c.shape();
  mdot = c.shape();
  mflx = c.shape();
  q = c.shape();
  kappa = c.shape();
  g = c.shape();

  tpr.bc().add( BndCnd( d1, BndType::dirichlet(), twall0 ) );
  tpr.bc().add( BndCnd( d2, BndType::dirichlet(), twall1 ) );
  tpr.bc().add( BndCnd( d3, BndType::neumann() ) );
  tpr.bc().add( BndCnd( d4, BndType::neumann() ) );
  tpr.bc().add( BndCnd( d5, BndType::neumann() ) );
  tpr.bc().add( BndCnd( d6, BndType::neumann() ) );

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d), heater(d);
  vapor  .lambda(lambdav);
  vapor  .rho(rhov);
  liquid.lambda(lambdal);
  liquid.rho(rhol);

  /* nickel */
  heater.lambda (lambdasol);

  Matter * zero = &vapor;
  Matter * one = &liquid;
  Matter mixed(*one,*zero, &c);
  mixed.latent(latent);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  Times time(10,1.0);

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Krylov * solverCGic = new CG(d, Prec::ic2());
  Krylov * solver = solverCGic;

  /* color function */
  VOF conc(c, g, kappa, uvw, time, solver);

  /* enthalpy equation */
  TIF tsat(tsat0);

  /* phase change */
  PhaseChange4 pc(mdot, mflx, tpr, q, c, g, f, uvw, conc.topo,
                  tsat, time, &mixed, &heater);

  if(snd_order) {
    pc.set_second_order_accuracy(true);
  }

#if 0
  /* test differences */
  pc.test_differences(100);
#else

  for(int count(0); count<9; ++count) {

    boil::oout<<"\n\n################################### "<<count<<"\n\n"<<boil::endl;

    /* set temperature: two polynomials, one in solid, other in fluid */
    std::mt19937 rng(seed);
    std::uniform_real_distribution<real> distR1(1.,10.);
    std::uniform_real_distribution<real> distR2(-10.,10.);
    std::uniform_real_distribution<real> distR3(tsat0,twall0);
    std::uniform_int_distribution<int> distI(0,1);

    real a0(0.),a1(0.),a2(0.),a3(0.),a4(0.);
    real b0(0.),b1(0.),b2(0.),b3(0.),b4(0.);
    real c0(0.),c1(0.),c2(0.),c3(0.),c4(0.);

    a0 = distR3(rng);
    if(ord==1) {
      /* consistency with dirichlet bc */
      a1 = (twall0 - a0)/(-LX1);
    } else {
      a1 = distR2(rng);
      if(ord==2) {
        /* consistency with dirichlet bc */
        a2 = (twall0 - a0 - a1*(-LX1))/pow(-LX1,2.);
      } else {
        a2 = distR2(rng);
        a3 = distR2(rng);
        /* consistency with dirichlet bc */
        a4 = (twall0 - a0 - a1*(-LX1) - a2*(-LX1)*(-LX1) - a3*pow(-LX1,3.))/pow(-LX1,4.);
      }
    }

    b0 = a0; /* continuity of temperature */
    b1 = lambdasol/lambdal*a1; /* continuity of fluxes */

    real tref(twall1);
    real posref(LX1);
    
    /* for posref, we use the fact that y-grid is invariant and
       identical to positive x and z grids */
    switch(count) {
      case 0 : 
        c = 1.;
        break;
      case 1 : 
        posref = 0.1*c.dyc(boil::BW); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 2 : 
        posref = 0.7*c.dyc(boil::BW); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 3 : 
        posref = c.yn(boil::BW+1)+0.1*c.dyc(boil::BW+1); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 4 : 
        posref = c.yn(boil::BW+1)+0.7*c.dyc(boil::BW+1); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 5 : 
        posref = c.yn(c.ej()-1)+0.1*c.dyc(c.ej()-1); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 6 : 
        posref = c.yn(c.ej()-1)+0.7*c.dyc(c.ej()-1); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 7 : 
        posref = c.yn(c.ej())+0.1*c.dyc(c.ej()); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      case 8 : 
        posref = c.yn(c.ej())+0.7*c.dyc(c.ej()); 
        tsat0 = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},posref); 
        tsat.set_tref(tsat0);
        tref = tsat0;
        break;
      default :
        exit(0);
    }

    c = 0.;
    for_vijk(c,i,j,k) {
#if CASE == 0
      if(c.xn(i+1)<posref)
        c[i][j][k] = 1.;
      else if(c.xn(i)<posref)
        c[i][j][k] = (posref-c.xn(i))/c.dxc(i);
#else
      if(c.zn(k+1)<posref)
        c[i][j][k] = 1.;
      else if(c.zn(k)<posref)
        c[i][j][k] = (posref-c.zn(k))/c.dzc(k);
#endif
    }

    c.bnd_update();
    c.exchange_all();
    conc.init();

    if(count!=1) {
      if(ord>1) {
        if(ord==2||(count>=2&&count<=4)) {
          /* consistency with dirichlet bc */
          b2 = (tref - b0 - b1*posref)/pow(posref,2.);
        } else {
          b2 = distR2(rng);
          b3 = distR2(rng);
          /* consistency with dirichlet bc */
          b4 = (tref - b0 - b1*posref - b2*posref*posref - b3*pow(posref,3.))/pow(posref,4.);
        }
      }
    }

    if(count!=0) {
      c1 = (twall1-tref)/(LX1-posref);
      c0 = tref-c1*posref;
    }

    for_vijk(tpr,i,j,k) {
#if CASE == 0
      real x = c.xc(i);
#else
      real x = c.zc(k);
#endif
      if(x<0)
        tpr[i][j][k] = pc.evaluate_polynomial(ord,{a0,a1,a2,a3,a4},x);
      else if(x<posref)
        tpr[i][j][k] = pc.evaluate_polynomial(ord,{b0,b1,b2,b3,b4},x);
      else
        tpr[i][j][k] = pc.evaluate_polynomial(ord,{c0,c1,c2,c3,c4},x);
    }
    tpr.bnd_update();

    pc.update();

    boil::plot->plot(c,tpr,mdot,"c-tpr-mdot",count);

#if CASE == 0
      int ii = NX1+boil::BW;
      int iii = ii-1;
      int jj = boil::BW;
      int jjj = jj;
      int kk = boil::BW;
      int kkk = kk;
      real xpos = tpr.xn(ii);
      real dxm = 0.5*tpr.dxc(iii);
      real dxp = 0.5*tpr.dxc(ii);
#else
      int ii = boil::BW;
      int iii = ii;
      int jj = boil::BW;
      int jjj = jj;
      int kk = NX1+boil::BW;
      int kkk = kk-1;
      real xpos = tpr.zn(kk);
      real dxm = 0.5*tpr.dzc(kkk);
      real dxp = 0.5*tpr.dzc(kk);
#endif
  
    /* test bnd temperature */
    boil::oout<<xpos<<" | "<<pc.node_tmp()[m][ii][jj][kk]<<" "<<a0<<" | "
               <<pc.lambda(iii,jjj,kkk)*(pc.node_tmp()[m][ii][jj][kk]-tpr[iii][jjj][kkk])/dxm<<" "
               <<-pc.lambda(ii,jj,kk)*(pc.node_tmp()[m][ii][jj][kk]-tpr[ii][jj][kk])/dxp<<" "
               <<pc.lambda(iii,jjj,kkk)*pc.evaluate_polynomial_derivative(ord,{a0,a1,a2,a3,a4},0)<<" "
               <<pc.lambda(ii,jj,kk)*pc.evaluate_polynomial_derivative(ord,{b0,b1,b2,b3,b4},0)<<" "
               <<pc.lambda(iii,jjj,kkk)<<" "
               <<pc.lambda(ii,jj,kk)<<" "
               <<d.ibody().on(iii,jjj,kkk)<<" "
               <<d.ibody().on(ii,jj,kk)<<" "
               <<boil::endl;
  
    /* gradient testing */
    std::vector<real> tv, tl;
  
#if CASE == 0
    int j0 = jj;
    int k0 = kk;
    for_vi(tpr,i0) {
      real x = c.xc(i0);
      boil::oout<<i0<<" "<<tpr[i0][j0][k0]<<" |";
#else
    int i0 = ii;
    int j0 = jj;
    for_vk(tpr,k0) {
      real x = c.zc(k0);
      boil::oout<<k0<<" "<<tpr[i0][j0][k0]<<" |";
#endif
      pc.request_gradient(i0,j0,k0,tv,tl);
      for(auto t : tv)
        boil::oout<<" "<<t;
      boil::oout<<" |";
      for(auto t : tl)
        boil::oout<<" "<<t;
      boil::oout<<" |";
      real ref;
      if(x<0) {
        ref = pc.lambda(i0,j0,k0)*pc.evaluate_polynomial_derivative(ord,{a0,a1,a2,a3,a4},x);
      } else if(x<posref) {
        ref = pc.lambda(i0,j0,k0)*pc.evaluate_polynomial_derivative(ord,{b0,b1,b2,b3,b4},x);
      } else {
        ref = pc.lambda(i0,j0,k0)*pc.evaluate_polynomial_derivative(ord,{c0,c1,c2,c3,c4},x);
      }
      boil::oout<<" "<<ref<<" "<<pc.lambda(i0,j0,k0)<<boil::endl;
    }

  }
#endif

  boil::oout << "finished" << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}
