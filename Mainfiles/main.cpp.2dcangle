#include "Include/psi-boil.h"
#include "setup_circle.cpp"
#include <fstream>
#define USE_VOF

#define _GNU_SOURCE 1
#include <fenv.h>
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}

/* domain dimensions (given by problem) */
const real LX = 4.;

/* computed parameters */
const int NX = 256;
const int NY = 4;
const int NZ = 128;

const real LY = real(NY)/real(NX)*LX ;
const real LZ = real(NZ)/real(NX)*LX ;

/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC(AsNodes::no(), Buffers::no());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>( -LX/2.,LX/2.), NX, Periodic::yes() );
  Grid1D gy( Range<real>( -LY/2.,LY/2.), NY, Periodic::yes() );
  Grid1D gz( Range<real>( -LZ/2.,LZ/2.), NZ, Periodic::no() );

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d); // vel
  Scalar p  (d), f  (d), press(d); // pressure
  Scalar c  (d), g  (d), kappa(d); // concentration

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::wall() ) );
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::neumann() ) );

  f = p.shape();
  g = p.shape();
  press = p.shape();

  c.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::wall() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::wall() ) );

  kappa = c.shape();

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.0);
  vapor  .rho   (1.0);
  vapor  .cp    (1.0);
  vapor  .lambda(1.0);
  liquid.mu     (1.0);
  liquid.rho    (1.0);
  liquid.cp     (1.0);
  liquid.lambda (1.0);
  const real cangle0 = 156./180.*boil::pi;

#ifndef USE_VOF
  Matter mixed(liquid, vapor,& c); //c=1: full of liquid, c=0: full of vapor
#else
  //Matter mixed(liquid, vapor,& c,& bndclr); //c=1: full of liquid, c=0: full of vapor
  Matter mixed(liquid, vapor,& c); //c=1: full of liquid, c=0: full of vapor
#endif
  mixed.sigma(0.9428);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt = 300000;
  const int  nint2 = 100000;
  const real tint = 0.1;
  const real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(vapor.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  const real tend = 300.0;
  Times time(ndt, dt); 

  /*------------+
  |  equations  |
  +------------*/
#ifdef USE_VOF
  VOF conc  (c, g, kappa, uvw, time, solver);
#else
  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
  //conc.set_nredist(1);
  //conc.set_itsharpen(32);
  //conc.set_itsharpen(8);
#endif
  conc.totalvol();
  conc.set_cangle(25.);

  Momentum ns( uvw, xyz, time, solver, &mixed);
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(8);

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_m(m)
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=0.0;

  for_vijk(c,i,j,k) 
    c[i][j][k] = 0.0;

  const real radius = LZ/4.0;
  const real xcent = 0.0;
  const real zcent = radius*(1.-cos(cangle0))-radius-LZ/2.0;
#ifndef USE_VOF
  for_vijk(c,i,j,k) {
    real alp=1.5*d.dxc(i);
    real dist=sqrt(pow(c.xc(i)-xcent,2.0)
                  +pow(c.zc(k)-zcent,2.0));
    if (dist<radius-alp) {
      c[i][j][k]=1.0;
    } else if(dist<radius+alp) {
      c[i][j][k]=0.5-0.5*sin((0.5*boil::pi*(dist-radius))/alp);
    }
  }
#else
  #if 1
  for_vijk(c,i,j,k) {
      int mm=15;
      real x0=d.xn(i);
      real z0=d.zn(k);
      real ddx=d.dxc(i)/real(mm);
      real ddz=d.dzc(k)/real(mm);
      int itmp=0;
      for (int ii=0; ii<mm; ii++){
        for (int jj=0; jj<mm; jj++){
          for (int kk=0; kk<mm; kk++){
            real xxc=x0+0.5*ddx+real(ii)*ddx;
            real zzc=z0+0.5*ddz+real(kk)*ddz;
            real dist=sqrt(pow(xxc-xcent,2.0)
                          +pow(zzc-zcent,2.0));
            if (dist<radius){
              itmp=itmp+1;
            }
          }
        }
      }
      c[i][j][k]=real(itmp)/real(mm*mm*mm);
  }
  #else
  setup_circle_xz(c,radius,xcent,zcent);
  #endif
#endif
  c.bnd_update();
  c.exchange_all();
  conc.init();
  conc.curvature();
  boil::plot->plot(uvw,c,press, "uvw-c-press", 0);

  //exit(0);


  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    press.load("press",   ts);
    conc. load("conc",ts);
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
  } 
  input.close();

  /* set iint */
  int iint = int(time.current_time()/tint) + 1;

  /*------------+
  |  Time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
	xyz[m][i][j][k]=0.0;
    conc.tension(&xyz, mixed);

    ns.grad(press);
    ns.solve(ResRat(1.0e-14));
    p = 0.0;
    if(multigrid.vcycle(ResRat(1e-6))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;
    press.exchange();


    /* shift pressure */
    real pmin=1.0e+300;
    for_vijk(press,i,j,k){
      if(pmin>press[i][j][k]) pmin=press[i][j][k];
    }
    boil::cart.min_real(&pmin);

    for_vijk(press,i,j,k)
      press[i][j][k] -= pmin;

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    conc.advance();
    conc.totalvol();
    conc.front_minmax();
#ifndef USE_VOF
    boil::oout<<"totalvol= "<<time.current_time()<<" "
      <<conc.get_clrsum1()<<" "<<conc.get_clrsum2()<<"\n";
#endif

    /* dt control */
    real cflmax = ns.cfl_max();
    boil::oout<<"cfl_max= "<<time.current_time()<<" "<<cflmax<<"\n";
    real cfl_limit=0.25;  // max limit of CFL
    time.control_dt(cflmax, cfl_limit, dt);

    /* output tecplot */
    if((time.current_time()) / (tint) >= real(iint) ) {
      iint = int(time.current_time() / tint);
      if(iint==1 || iint==10 || iint==50 || iint==3000) {
        boil::plot->plot(uvw, c, press, "uvw-c-press", iint);
        boil::plot->plot(xyz, c, kappa, "xyz-c-kappa", iint);
      }
    }

    /* output bck */
    if(((time.current_step()) % (nint2)==0) ) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
#ifdef USE_VOF
      c .save("c",  time.current_step());
#else
      conc .save("conc",  time.current_step());
#endif
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }

    if(time.current_time()>tend) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
#ifdef USE_VOF
      c .save("c",  time.current_step());
#else
      conc .save("conc",  time.current_step());
#endif
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
#ifdef USE_VOF
      c .rm("c",  time.current_step());
#else
      conc .rm("conc", ts);
#endif
    }
  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
