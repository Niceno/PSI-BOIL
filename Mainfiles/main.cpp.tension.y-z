#include "Include/psi-boil.h"
#include "setup_circle.cpp"
#include <fstream>
#define USE_VOF
//#define AVEJ
#define SYM
//#define USE_BNDCLR

/* computed parameters */
const int gLevel = 4;
#ifdef SYM
const int NX = 16*gLevel;
#else
const int NX = 32*gLevel;
#endif
const int NY = NX;
const int NZ = 3;

/* domain dimensions (given by problem) */
//const real LX =   1.0;
const real LX =   4.0e-3;
const real LY =   LX;
#ifdef SYM
const real LZ =   0.5*LX/real(NX)*real(NZ);
#else
const real LZ =   LX/real(NX)*real(NZ);
#endif

#ifdef USE_VOF
const int mSimple = 1;
#else
const int mSimple = 1;
#endif

/******************************************************************************/
main(int argc, char * argv[]) {

  if(argc==1){
    boil::oout<<"An argument is required!"<<"\n";
    boil::oout<<"./Boil wmin (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef SYM
  //Grid1D gx( Range<real>(0.0,0.5*LX), NX, Periodic::no(), BndGrid::symmetry() );
  //Grid1D gy( Range<real>(0.0,0.5*LY), NY, Periodic::no(), BndGrid::symmetry() );
  Grid1D gx( Range<real>(0.0,0.5*LX), NX, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
  Grid1D gy( Range<real>(0.0,0.5*LY), NY, Periodic::no(),
             BndGrid::symmetry(), BndGrid::wall() );
#else
  Grid1D gx( Range<real>(-0.5*LX,0.5*LX), NX, Periodic::no() );
  Grid1D gy( Range<real>(-0.5*LY,0.5*LY), NY, Periodic::no() );
#endif
  Grid1D gz( Range<real>(-0.5*LZ,0.5*LZ), NZ, Periodic::yes() );
  /*---------+
  |  domain  |
  +---------*/
  Domain d(gz, gx, gy);

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), uvw_old(d); // vel
  Vector xyz(d); // body force
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press  (d), p(d), f  (d);

#ifdef USE_BNDCLR
  Vector bndclr(d), bndclrold(d);
#endif

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
#ifdef SYM
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::periodic() ) );
    uvw_old(m)=uvw(m).shape();
#ifdef USE_BNDCLR
    bndclr(m)    = uvw(m).shape();
    bndclrold(m) = uvw(m).shape();
#endif
  }

#ifdef SYM
  c.bc().add( BndCnd( Dir::jmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::symmetry() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#else
  c.bc().add( BndCnd( Dir::jmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::outlet() ) );
#endif
  c.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );

  press=c.shape();
  p=c.shape();
  kappa=c.shape();
  cold=c.shape();

  Matter air(d), water(d);
#if 0
  air  .mu    (1.0000e-3);
  air  .rho   (1.0000e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+0);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.01);
#else
  air  .mu    (1.0000e-5);
  air  .rho   (1.2500e+0);
  water.mu    (1.0000e-3);
  water.rho   (1.0000e+3);

#ifdef USE_BNDCLR
  Matter mixed(water, air, &c, &bndclr);
#else
  Matter mixed(water, air, &c);
#endif
  mixed.sigma (0.07);
#endif

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  real dxmin = d.dxyz_min();
  const real dt = 10.0 * pow(air.rho()->value()*pow(dxmin,3.0)
                           /(2.0*3.1415*mixed.sigma()->value()),0.5);
  const real tend = 0.1;
  const int ndt = tend/dt;
  const int nint = ndt/10;
  Times time(ndt, dt); 
	
#if 1
  boil::oout<<"si= "<<c.si()<<" ei= "<<c.ei()<<"\n";
  boil::oout<<"sj= "<<c.sj()<<" ei= "<<c.ej()<<"\n";
  boil::oout<<"sk= "<<c.sk()<<" ei= "<<c.ek()<<"\n";
#endif

  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  input.open("time.txt", std::ios::in);
  bool restart = false;

  if( !input.fail() ) {
    restart=true;
  }

  if( restart ) {
    int ts;
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);
    uvw   .load("uvw", ts);
    press .load("press", ts);
    c     .load("c", ts);
  } else {

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  for_m(m)
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=0.0;

  c = 0.0;

  const real xcent = 0.0;
  const real ycent = 0.0;
  const real zcent = 0.0;

  const real radius = LX/4.0;
#if 0
  // set theoretical value of single droplet for color function
  for_vijk(c,i,j,k){
    int inm,inp,jnm,jnp;
    if (c.xc(i)>0.0 && c.yc(j)>0.0) {
      inm=i; inp=i+1; jnm=j; jnp=j+1;
    } else if (c.xc(i)>0.0 && c.yc(j)<0.0) {
      inm=i; inp=i+1; jnm=j+1; jnp=j; 
    } else if (c.xc(i)<0.0 && c.yc(j)>0.0) {
      inm=i+1; inp=i; jnm=j; jnp=j+1;
    } else {
      inm=i+1; inp=i; jnm=j+1; jnp=j;
    }

    // check vertex
    int imm=0, imp=0, ipm=0, ipp=0;

    real dtmp = sqrt(pow(c.xn(inm)-xcent,2.0) + pow(c.yn(jnm)-ycent,2.0));
    if (dtmp<=radius) imm=1;

    dtmp = sqrt(pow(c.xn(inm)-xcent,2.0) + pow(c.yn(jnp)-ycent,2.0));
    if (dtmp<=radius) imp=1;

    dtmp = sqrt(pow(c.xn(inp)-xcent,2.0) + pow(c.yn(jnm)-ycent,2.0));
    if (dtmp<=radius) ipm=1;

    dtmp = sqrt(pow(c.xn(inp)-xcent,2.0) + pow(c.yn(jnp)-ycent,2.0));
    if (dtmp<=radius) ipp=1;

    if (imm+imp+ipm+ipp==4) {

      // full of liquid
      c[i][j][k] = 1.0;

    } else if(imm+imp+ipm+ipp==0){

      // full of gas
      c[i][j][k] = 0.0;

    } else if(imm+imp+ipm+ipp==1) {

      // one vertex is in liquid
      real theta1 = asin(fabs(c.yn(jnm))/radius);
      real theta2 = acos(fabs(c.xn(inm))/radius);

      if (approx(theta2-theta1,0.0)) {

        //exception
        c[i][j][k]=0.0;

      } else {

        real area = radius*radius*(theta2-theta1)*0.5;
        real a = fabs(c.yn(jnm))/(radius*cos(theta1));
        real yy = a*fabs(c.xn(inm));
        area = area - (radius*sin(theta2)-yy)*fabs(c.xn(inm))*0.5
                    - (fabs(c.yn(jnm))-yy)
                     *(radius*cos(theta1)-fabs(c.xn(inm)))*0.5;
        c[i][j][k] = area/(fabs(c.dxc(inm))*fabs(c.dyc(jnm)));
        //std::cout<<area<<"\n";
        
      }

    } else if (imm+imp+ipm+ipp==3) {

      // one vertex is in gas
      real theta1 = acos(fabs(c.xn(inp))/radius);
      real theta2 = asin(fabs(c.yn(jnp))/radius);

      real area = (fabs(c.xn(inp))-radius*cos(theta2))*fabs(c.yn(jnp))*0.5
                + (fabs(c.yn(jnp))-radius*sin(theta1))*fabs(c.xn(inp))*0.5;
      area -= radius*radius*(theta2-theta1)*0.5;
      area = c.dxc(i)*c.dyc(j)-area;
      c[i][j][k] = area/(c.dxc(i)*c.dyc(j));
      //std::cout<<c[i][j][k]<<"\n";

    } else if (imm+imp+ipm+ipp==2) {

      // two vertices are in gas
      if (ipm==1) {
        // imm and ipm are in liquid
        real theta1 = acos(fabs(c.xn(inp))/radius);
        real theta2 = acos(fabs(c.xn(inm))/radius);

        real area = radius*radius*(theta2-theta1)*0.5;
        real a1 = radius*sin(theta1)/fabs(c.xn(inp));
        area += (fabs(c.xn(inp))-fabs(c.yn(jnm))/a1)
               *(radius*sin(theta1)-fabs(c.yn(jnm)))*0.5;
        area -= (fabs(c.yn(jnm))/a1-fabs(c.xn(inm)))*fabs(c.yn(jnm))*0.5;
        area -= (radius*sin(theta2)-fabs(c.yn(jnm)))*fabs(c.xn(inm))*0.5;
        c[i][j][k] = area/(c.dxc(i)*c.dyc(j));
        //std::cout<<c[i][j][k]<<"\n";
      } else if (imp==1) {
        // imm and imp are in liquid
        real theta1 = asin(fabs(c.yn(jnm))/radius);
        real theta2 = asin(fabs(c.yn(jnp))/radius);

        real area = radius*radius*(theta2-theta1)*0.5;
        real a2 = fabs(c.yn(jnp))/(radius*cos(theta2));
        area += (radius*cos(theta2)-fabs(c.xn(inm)))
               *(fabs(c.yn(jnp))-a2*fabs(c.xn(inm)))*0.5;
        area -= (a2*fabs(c.xn(inm))-fabs(c.yn(jnm)))*fabs(c.xn(inm))*0.5;
        area -= (radius*cos(theta1)-fabs(c.xn(inm)))*fabs(c.yn(jnm))*0.5;
        c[i][j][k] = area/(c.dxc(i)*c.dyc(j));
      } else {
        std::cout<<"Error!!!\n";
        exit(0);
      }
    }
  }
#else
  setup_circle_yz(c,radius,xcent,ycent);
#endif
#if 1
  for_avijk(c,i,j,k)
    c[i][j][k] = 1. - c[i][j][k];
#endif

  c.bnd_update();
  c.exchange_all();
  boil::plot->plot(uvw,c,press, "uvw-c-press", 0);

  } // restart

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::ic2());
  //Krylov * solver = new CG(d, Prec::di());
  Momentum ns( uvw, xyz, time, solver, &mixed);
  ns.convection_set(TimeScheme::backward_euler()); //ns.convection is mandatory
  ns.diffusion_set(TimeScheme::backward_euler());
  Pressure pr(p, f, uvw, time, solver, &mixed);

  AC multigrid( &pr );
  if(mSimple>1) {
    multigrid.min_cycles(4);  // 4
    multigrid.max_cycles(8); // 8
  } else {
    multigrid.min_cycles(6);  // 6
  }
  multigrid.stop_if_diverging(true);

#ifdef USE_VOF
  #ifdef USE_BNDCLR
  VOF conc  (c, g, kappa, uvw, time, solver, &bndclr);
  #else
  VOF conc  (c, g, kappa, uvw, time, solver);
  #endif
  conc.set_curv_method(0);  // height function
  //conc.set_curv_method(1);  // smoothed VOF
  conc.ancillary();
#else
  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
  conc.set_itsharpen(8);
  conc.set_globalSharpen();
#endif
  conc.totalvol();


  for(time.start(); time.end(); time.increase()) {

    // store velocity
    for_m(m)
      uvw_old(m) = uvw(m);
    // store color function
    cold = c;
#ifdef USE_BNDCLR
    for_m(m)
      bndclrold(m) = bndclr(m);
#endif

    /* inner loop */
    for(int mloop=0; mloop<mSimple; mloop++) {

      //reset body force
      for_m(m)
        for_avmijk(xyz,m,i,j,k)
          xyz[m][i][j][k]=0.0;

      /* surface tension */
      conc.tension(&xyz, mixed);

      /* essential for moving front */
      ns.discretize();
      pr.discretize();
      pr.coarsen();

      /* momentum */
      ns.new_time_step(uvw_old);
      ns.convection();
      ns.grad(press);
      ns.solve(ResRat(1e-8));

      p=0.0;
      if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);

      ns.project(p);
      press += p;
      press.exchange();

      ns.cfl_max();

#ifdef USE_VOF
      conc.advance(cold);
#else
      conc.advance();
#endif
      conc.totalvol();
#ifndef USE_VOF
      boil::oout<<"totalvol: "<<time.current_time()<<" "<< conc.get_clrsum1()<<" "<<conc.get_clrsum2()<<"\n";
#endif

    }
    /* post process */
    //velocity
    real umax=0.0, vmax=0.0, wmax=0.0;
    real usum=0.0, vsum=0.0, wsum=0.0;
    int icount=0;
    for_vijk(c,i,j,k) {
      real utmp=fabs(0.5*(uvw[Comp::u()][i][j][k]+uvw[Comp::u()][i+1][j][k]));
      real vtmp=fabs(0.5*(uvw[Comp::v()][i][j][k]+uvw[Comp::v()][i][j+1][k]));
      real wtmp=fabs(0.5*(uvw[Comp::w()][i][j][k]+uvw[Comp::w()][i][j][k+1]));
      if (umax<utmp) umax=utmp;
      if (vmax<vtmp) vmax=vtmp;
      if (wmax<wtmp) wmax=wtmp;
      usum += utmp;
      vsum += vtmp;
      wsum += wtmp;
      icount++;
    }
    boil::cart.max_real(&umax);
    boil::cart.max_real(&vmax);
    boil::cart.max_real(&wmax);
    boil::cart.sum_real(&usum);
    boil::cart.sum_real(&vsum);
    boil::cart.sum_real(&wsum);
    boil::cart.sum_int(&icount);
    usum /= real(icount);
    vsum /= real(icount);
    wsum /= real(icount);
    boil::oout<<"velocity= "<<time.current_time()<<" "
                <<umax<<" "<<vmax<<" "<<wmax<<" "
                <<usum<<" "<<vsum<<" "<<wsum<<"\n";

    if(time.current_step() % nint == 0 || time.current_step()==1 ) {
      boil::plot->plot(uvw, c, press,"uvw-c-press",  time.current_step());
      boil::plot->plot(xyz, c, kappa,"xyz-c-kappa",  time.current_step());
    }

    if(time.current_step() % nint == 0) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
      c    .save("c",  time.current_step());
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << "\n";
        output << time.current_time()+time.dt() << "\n";
        output << time.dt() << "\n";
        output.close();
      }
    }
  }

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
