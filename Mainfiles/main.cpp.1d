#include "Include/psi-boil.h"
#include "disjoint_pressure.cpp"

//#define STANDARD  /* no interfacial resistance */
#define USE_VOF   /* use vof instead of clr */
//#define STRETCH /* use stretched grid */
//#define MIRRORED /* mirror the geometry */
#define ADIABATIC /* no thermal conductivity in vapor */

/******************************************************************************/
int main(int argc, char * argv[]) {

  boil::timer.start();

  if(argc<3){
    boil::oout<<"Two arguments required!"<<"\n";
    boil::oout<<"./Boil wmin gLevel"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  int level=atoi(argv[2]);
  boil::oout<<"level= "<<level<<"\n";

  real thickness = 5e-7;
  const int NX = 50*level;

#ifdef STRETCH
  const int AR = 4;
  const real mult = 1.2;
  real DXi  = 3e-9/real(level);

  int NXst  = 15; /* from aspect ratio */
  int NXun  = NX - NXst;
  real DXf  = DXi * pow(mult,real(NXst-1));

  real LXst = DXi * (1.0-pow(mult,real(NXst)))/(1.0-mult);
  real LXun = DXf * real(NXun);
  real LX   = LXst + LXun;

  real DXu = sqrt(DXi*DXf);
  real DZ = DXu*real(AR);

#else
  real DX = 20e-9/real(level);
  real DZ = DX;
  real DXf = DX;
  real LX = real(NX)*DX;
#endif
  real LZ = DZ;

  const real Tout=101.0+273.15;
  const real Tsat=100.0+273.15;

#ifndef USE_VOF
  boil::oout<<"Edit cipcsl2_sharpen.cpp!\n";
  boil::oout<<"#if 1 (for 1D)\n";
#endif

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef STRETCH
  Grid1D gx_st(Range<real>( 0.0, LXst ),
  #ifdef MIRRORED
               Range<real>( DXf, DXi  ),
  #else
               Range<real>( DXi, DXf  ),
  #endif
               NXst, Periodic::no());
  Grid1D gx_un(Range<real>( 0.0, LXun ),
               NXun, Periodic::no());

  #ifdef MIRRORED
  Grid1D gx(gx_un, gx_st, Periodic::no());
  #else
  Grid1D gx(gx_st, gx_un, Periodic::no());
  #endif
#else
  Grid1D gx( Range<real>( 0.0,LX), NX, Periodic::no() );
#endif
  Grid1D gz(DZ);

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gz, gz);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new BiCGS(d, Prec::di());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d);
  Scalar step(d), sflag(d); // temperature
  Scalar mdot(d);        // phase-change

  Scalar mflx(d);
  Scalar pcc(d);
#ifdef USE_VOF
  Vector uvw_1(d), uvw_2(d);
#endif

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
#ifdef MIRRORED
  Dir dxm = Dir::imin();
  Dir dxp = Dir::imax();
#else
  Dir dxm = Dir::imax();
  Dir dxp = Dir::imin();
#endif
 

  for_m(m) {
    uvw.bc(m).add( BndCnd( dxp, BndType::wall() ) );
    uvw.bc(m).add( BndCnd( dxm, BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
#ifdef USE_VOF
    uvw_1(m) = uvw(m).shape();
    uvw_2(m) = uvw(m).shape();
#endif
  }

  p.bc().add( BndCnd( dxp, BndType::neumann() ) );
  p.bc().add( BndCnd( dxm, BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  q = p.shape();
  mflx = p.shape();

  c.bc().add( BndCnd( dxp, BndType::wall() ) );
  c.bc().add( BndCnd( dxm, BndType::outlet() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
  g = c.shape();
  step = c.shape();
  sflag = c.shape();
  cold = c.shape();

  tpr.bc().add( BndCnd( dxp, BndType::dirichlet(), Tout ) );
  tpr.bc().add( BndCnd( dxm, BndType::dirichlet(), Tsat ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
  OPR( Tout );

  pcc   = p.shape();

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  Matter vapor(d), liquid(d);
  vapor  .mu    (1.255e-5);
  vapor  .rho   (0.597);
#ifdef ADIABATIC
  vapor  .lambda(1000.0);
  vapor  .cp    (0.1);
#else
  vapor  .lambda(0.025);
  vapor  .cp    (2030*0.597);
#endif
  liquid.mu    (0.28e-3);
  liquid.rho   (958.4);
  liquid.cp    (4215.9*958.4);
  liquid.lambda(0.679);

  const real Mv = 18.015e-3;
  vapor.mmass(Mv);
  liquid.mmass(Mv);

  const real latent=2258.0*1e3;
  const real hamaker = 5.0e-20;
  const real pc0 = (Tout/Tsat-1.0)*latent*liquid.rho()->value();
  const real delta0 = pow(hamaker/pc0,1.0/3.0);

#ifndef USE_VOF
  Matter mixed(liquid, vapor,& step); //c=1: full of liquid, c=0: full of vapor
#else
  Matter mixed(liquid, vapor,& c);
#endif
  mixed.sigma(2.3610e-2);
  mixed.latent(latent);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt = 2*150000*level;
  const int  nint = 10000;//ndt/4;
  const int  bint = ndt/1.5;
  const real dt  = 1.0e-8/real(level);
  const real dxmin = d.dxyz_min();
  const real cfl_limit = 0.2;
  Times time(ndt, dt);
  time.set_coef_dec(0.2);

#ifndef USE_VOF
  #ifdef STRETCH
  time.set_dt(dt/4.);
  #endif
#endif

  OPR(  NX );
  OPR(  dt );
  OPR( ndt );

  for_vijk(c,i,j,k) 
    c[i][j][k] = 0.0;

#ifdef STANDARD
  real tint0 = Tsat;
#else
  real tint0 = Tsat+hamaker/pow(thickness,3.)*Tsat/liquid.rho()->value()/latent;
#endif
  for_vijk(c,i,j,k) {
#ifdef MIRRORED
    if(c.xn(i)>LX-thickness) {
      c[i][j][k]=1.0;
      tpr[i][j][k] = Tout+(Tsat-Tout)*(LX-tpr.xc(i))/thickness; 
    } else if(c.xn(i+1)>LX-thickness) {
      c[i][j][k]=1.-(LX-thickness-c.xn(i))/c.dxc(i);
      if(c[i][j][k]>0.5) {
        tpr[i][j][k] = Tout+(Tsat-Tout)*(LX-tpr.xc(i))/thickness; 
      } else {
        tpr[i][j][k] = Tsat;
      }
#else
    if(c.xn(i+1)<thickness) {
      c[i][j][k]=1.0;
      tpr[i][j][k] = Tout+(Tsat-Tout)*tpr.xc(i)/thickness; 
    } else if(c.xn(i)<thickness) { 
      c[i][j][k]=(thickness-c.xn(i))/c.dxc(i);
      if(c[i][j][k]>0.5) {
        tpr[i][j][k] = Tout+(Tsat-Tout)*tpr.xc(i)/thickness; 
      } else {
        tpr[i][j][k] = Tsat;
      }
#endif
    } else {
      c[i][j][k]=0.0;
      tpr[i][j][k] = Tsat; 
    }
  }
  c.bnd_update();
  c.exchange_all();
  tpr.bnd_update();
  tpr.exchange_all();

  step = c;
  pcc  = 0.0;

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  Momentum ns( uvw, xyz, time, solver, &mixed);
  Pressure pr(p, f, uvw, time, solver, &mixed);
  AC multigrid( &pr );
  multigrid.stop_if_diverging(true);
  multigrid.min_cycles(4);

#ifndef USE_VOF
  CIPCSL2 conc  (c,  g, kappa, uvw, time, solver);
  conc.set_globalSharpen();
  conc.set_nredist(1);
  conc.set_itsharpen(32);
#else
  VOF conc(c,  g, kappa, uvw_1, time, solver);
#endif
  conc.init();
  conc.front_minmax();
  conc.totalvol();

#ifdef STANDARD
  TIF tsat(Tsat);
#else
  TIF tsat(Tsat, &mixed, (*conc.topo.adens), mflx, &pcc); 
  tsat.set_weak_limiting(Tsat,Tout);
  tsat.tif  = tint0;
#endif
  EnthalpyFD enthFD(tpr, q, uvw, time, solver, &mixed,
                    conc.topo, tsat);

  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());

  PhaseChangeVOF pc(mdot, mflx, tpr, q, c, g , f , uvw, conc.topo,
                    tsat, time, &mixed);

#ifndef STANDARD
  boil::plot->plot(uvw,c,tpr,mdot,tsat.tif,"uvw-c-tpr-mdot-tif",0);
#else
  boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",0);
#endif

  /*---------------------------------------------------------------+
  |                     start computation                          |
  +----------------------------------------------------------------*/
#if 1
  /*-------------------+
  |  check if restart  |
  +-------------------*/
  std::fstream input;
  int irun = 0;
  if(boil::cart.iam()==0){
    input.open("run.txt", std::ios::in);
    if( !input.fail() ) {
      input >> irun;
      std::cout<<"read irun.  irun= "<<irun<<"\n";
    }
    input.close();
  }
  boil::cart.sum_int(&irun);
  if (irun==1){
    boil::oout<<"exit job due to irun=1"<<"\n";
    exit(0);
  }

  if(boil::cart.iam()==0){
    std::fstream output;
    output.open("run.txt", std::ios::out);
    output << 1 << boil::endl;
    output.close();
  }

  int ts=0;
  input.open("time.txt", std::ios::in);
  if( !input.fail() ) {
    real t,dtf;
    input >> ts;
    input >> t;
    input >> dtf;
    uvw.  load("uvw",ts);
    press.load("press",ts);
#ifndef USE_VOF
    conc. load("conc",ts);
#else
    c.load("conc",ts);
#endif
    tpr.  load("tpr",ts);
#ifndef STANDARD
    (tsat.tif).load("tif",ts);
#endif
    time.first_step(ts);
    time.current_time(t);
    time.set_dt(dtf);

  } 
  input.close();

    boil::oout << "######################" << boil::endl;
    boil::oout << "# START FROM SCRATCH #" << boil::endl;
    boil::oout << "######################" << boil::endl;
#endif

#ifndef USE_VOF
  update_step(c, step, sflag);
#endif
  int testint = 1;
  /*-------------------+
  |  reset body force  |
  +-------------------*/
  for_m(m)
    for_avmijk(xyz,m,i,j,k)
      xyz[m][i][j][k] = 0.0;

  /*------------+
  |  time loop  |
  +------------*/
  for(time.start(); time.end(); time.increase()) {

    /*---------------------------------------+
    |  solve energy equation + phase change  |
    +---------------------------------------*/
    calculate_disjoint_pressure_x(pcc, c, (*conc.topo.adens), (*conc.topo.fs),
                                  hamaker, delta0);

    //tsat.set_ur(0.2);

    enthFD.discretize();
    enthFD.new_time_step();
    enthFD.solve(ResRat(1e-16),"Enthalpy");
#ifdef ADIABATIC
    real maxtif(0.);
    for_vijk(tpr,i,j,k) {
      if((*conc.topo.adens)[i][j][k]>boil::pico&&tsat.Tint(i,j,k)>maxtif)
        maxtif = tsat.Tint(i,j,k);
    }
    boil::cart.max_real(&maxtif);
    for_vijk(tpr,i,j,k) {
      if(c[i][j][k]<0.5) tpr[i][j][k] = maxtif;
    }
    tpr.bnd_update();
    tpr.exchange();
#endif

    pc.update();
   
    //for_vijk(c,i,jj,kk) {
    for_vi(c,i) {
      int jj(1+boil::BW), kk(1+boil::BW);
      if(fabs(mdot[i][jj][kk])>boil::atto) boil::aout<<"main:: "<<i<<" "<<jj<<" "<<kk<<" "<<mdot[i][jj][kk]<<" | "<<c[i-1][jj][kk]<<" "<<c[i][jj][kk]<<" "<<c[i+1][jj][kk]<<" | "<<tpr[i-1][jj][kk]<<" "<<tpr[i][jj][kk]<<" "<<tpr[i+1][jj][kk]<<" | "<<tsat.Tint(i,jj,kk)<<boil::endl;
    }
    //if(time.current_step()==11)exit(0);
  
    ns.vol_phase_change(&f);

    /* essential for moving front */
    ns.discretize();
    pr.discretize();

    /* momentum */
    ns.cfl_max();
    ns.new_time_step();

    for_m(m)
      for_avmijk(xyz,m,i,j,k)
	xyz[m][i][j][k]=0.0;

    ns.grad(press);
    ns.solve(ResRat(1e-14));

    p = 0.0;
    if (multigrid.vcycle(ResRat(1e-6))) OMS(converged);
    p.exchange();
    ns.project(p);
    press += p;
    press.exchange();

    for_vi(c,i)
      if((*conc.topo.adens)[i][0+boil::BW][0+boil::BW]>boil::atto)
        boil::aout<<"main2:: "<<i<<" "<<uvw[Comp::u()][i-1][0+boil::BW][0+boil::BW]<<" "<<uvw[Comp::u()][i][0+boil::BW][0+boil::BW]<<" "<<uvw[Comp::u()][i+1][0+boil::BW][0+boil::BW]<<" | "<<uvw.outflow(i,boil::BW,boil::BW)<<" "<<(*conc.topo.adens)[i][0+boil::BW][0+boil::BW]<<" "<<(*conc.topo.adens)[i+1][0+boil::BW][0+boil::BW]<<" "<<boil::endl;

#if 0
    /* this part does not work in parallel computation */
    real dltp = press[1][1][1];
    for_vijk(press,i,j,k)
      press[i][j][k] -= dltp;
#endif

    /*---------------------------+
    |  solve transport equation  |
    +---------------------------*/
    cold=c;
#ifndef USE_VOF
    conc.advance();
#else
    conc.advance_with_extrapolation(true,ResRat(1e-6),uvw,f,
                                    &liquid,&uvw_1);
#endif

    conc.color_minmax();
    conc.front_minmax();
    conc.totalvol();

    /* necessary corrections for 1D */
    real mflx_max(0.0);
    for_vijk(c,i,j,k) {
      if(mflx[i][j][k]>mflx_max)
        mflx_max = mflx[i][j][k];
    }
    boil::cart.max_real(&mflx_max);
    mflx = mflx_max;
    for_avijk(c,i,j,k) {
      if(i>boil::BW&&(*conc.topo.adens)[i][j][k]>0.0 && (*conc.topo.adens)[i-1][j][k]>0.0) {
        (*conc.topo.adens)[i][j][k] = 0.0;
      }
    }

#ifndef USE_VOF
    update_step(c, step, sflag);
    pc.modify_vel(uvw,c,cold);
#endif

    /*-------------+
    |  dt control  |
    +-------------*/
    real cflmax = ns.cfl_max();
    time.control_dt(cflmax, cfl_limit, dt);

#if 0
    if (time.dt()<1.0e-11) {
      boil::oout<<"Too small dt: "<<dt<<"\n";
      exit(0);
    }
#endif

    if(time.current_step() % (nint)==0 ||time.current_step()==1) {
#ifndef STANDARD
      boil::plot->plot(uvw,c,tpr,mdot,tsat.tif,"uvw-c-tpr-mdot-tif",time.current_step());
#else
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
#endif
    }

#if 0
    if((time.current_step()==testint) ) {
      boil::plot->plot(uvw,c,tpr,mdot,"uvw-c-tpr-mdot",time.current_step());
      testint++;
      if (testint == 5) exit(0);
    }
#endif
#if 1
    /*--------------+
    |  backup data  |
    +--------------*/
    if(((time.current_step()) % (bint)==0) ) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
#ifndef USE_VOF
      conc .save("conc",  time.current_step());
#else
      c.save("conc",  time.current_step());
#endif
      tpr  .save("tpr",   time.current_step());
#ifndef STANDARD
      (tsat.tif).save("tif",   time.current_step());
#endif
      if( boil::cart.iam()==0) {
        std::fstream output;
        std::stringstream ss;
        ss <<"time-"<<time.current_step()<<".txt";
        std::string fname = ss.str();
        int len = fname.length();
        char * cfname = new char[len+1];
        memcpy(cfname, fname.c_str(), len+1);
        output << std::setprecision(16);
        output.open(cfname, std::ios::out);
        output << time.current_step() << boil::endl;
        output << time.current_time()+time.dt() << boil::endl;
        output << time.dt() << boil::endl;
        output.close();
      }
    }
    if( boil::timer.current_min() > (wmin-30.0)
      || time.current_step()==time.total_steps()) {
      uvw  .save("uvw",   time.current_step());
      press.save("press", time.current_step());
#ifndef USE_VOF
      conc .save("conc",  time.current_step());
#else
      c .save("conc",  time.current_step());
#endif    
      tpr  .save("tpr",   time.current_step());
#ifndef STANDARD
      (tsat.tif).save("tif",   time.current_step());
#endif
      std::fstream output;
      output << std::setprecision(16);
      output.open("time.txt", std::ios::out);
      output << time.current_step() << boil::endl;
      output << time.current_time()+time.dt() << boil::endl;
      output << time.dt() << boil::endl;
      output.close();
      output.open("run.txt", std::ios::out);
      output << 0 << boil::endl;
      output.close();
      boil::timer.stop();
      boil::timer.report();
      uvw  .rm("uvw", ts);
      press.rm("press", ts);
#ifndef USE_VOF
      conc .rm("conc", ts);
#else
      c .rm("conc", ts);
#endif    
      tpr  .rm("tpr", ts);
#ifndef STANDARD
      (tsat.tif).rm("tif",ts);
#endif
      exit(0);
    }
#endif
  }

  boil::timer.stop();
  boil::timer.report();

}	
