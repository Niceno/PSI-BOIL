#include "Include/psi-boil.h"

/******************************************************************************/
int main(int argc, char * argv[]) {

  /* Journal of Computational Physics, 249, 127-161 */
  /* Sucking problem */

  boil::timer.start();

  if(argc<3) {
    boil::oout<<"Two command line arguments required!"<<"\n";
    boil::oout<<"./Boil wmin level (wmin::wall time in minute)"<<"\n";
    exit(0);
  }
  int wmin=atoi(argv[1]);
  boil::oout<<"wmin= "<<wmin<<"\n";

  const int Level=atoi(argv[2]);
  boil::oout<<"level= "<<Level<<"\n";

  /* computed parameters */
  const int dtLevel = 1; // 1 or 2
  const int NX = 2*40*Level;

  /* domain dimensions (given by problem) */
  const real LX = 8.0e-3;
  const real DX = LX/real(NX);

  const real Tout=10.;
  const real Tsat=0.;

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();
  //boil::plot = new PlotTEC(AsNodes::no(), Buffers::yes());

  /*----------+
  |  grid(s)  |
  +----------*/
  Grid1D gx( Range<real>(0.0,1.0*LX), NX, Periodic::no() );
  Grid1D gz(DX);

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gz, gz);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d), xyz(d), uvw_1(d); // vel
  Scalar p  (d), f  (d); // pressure
  Scalar c  (d), g  (d), kappa(d), cold(d); // concentration
  Scalar press(d);
  Scalar tpr(d), q  (d); // temperature
  Scalar mdot(d);        // phase-change
  Scalar mflx(d);        // phase-change
  Scalar tprold(d),tprap1(d),tprap2(d);

  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::wall() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::outlet() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
    uvw_1(m) = uvw(m).shape();
  }

  p.bc().add( BndCnd( Dir::imin(), BndType::neumann() ) );
  p.bc().add( BndCnd( Dir::imax(), BndType::outlet() ) );
  p.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  p.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );

  /* copy b.c. from p */
  press = p.shape();
  f = p.shape();
  mdot = p.shape();
  mflx = p.shape();
  q = p.shape();

  c = p.shape();
  g = c.shape();
  cold = c.shape();

  tpr.bc().add( BndCnd( Dir::imin(), BndType::dirichlet(), Tsat ) );
  tpr.bc().add( BndCnd( Dir::imax(), BndType::dirichlet(), Tout ) );
  tpr.bc().add( BndCnd( Dir::kmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::kmax(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmin(), BndType::pseudo() ) );
  tpr.bc().add( BndCnd( Dir::jmax(), BndType::pseudo() ) );
  tprap1 = tpr.shape();
  tprap2 = tpr.shape();
  tprold = tpr.shape();

  /*----------------------+
  |  physical properties  |
  +----------------------*/
  const real mul = 0.28e-3;
  const real rhol = 958.4;
  const real lambdal = 0.679;
  const real cpl = 4215.9*rhol;
  const real alpl = lambdal/cpl;

  const real muv = 1.255e-5;
  const real rhov = 0.597;
  const real lambdav = 0.025;
  const real cpv = 2030.*rhov;
  const real alpv = lambdav/cpv;

  const real latent = 2258.0*1e3;

  Matter vapor(d), liquid(d);
  vapor  .mu    (muv);
  vapor  .rho   (rhov);
  vapor  .cp    (cpv);
  vapor  .lambda(lambdav);
  liquid.mu    (mul);
  liquid.rho   (rhol);
  liquid.cp    (cpl);
  liquid.lambda(lambdal);

  Matter mixed(liquid, vapor,& c); //c=1: full of liquid, c=0: full of vapor
  mixed.sigma(2.3610e-2);
  mixed.latent(latent);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt =500*Level*dtLevel;
  const int  nint = 100*Level*dtLevel;
  const real dt  = 1.0e-3/real(Level*dtLevel);

  Times time(ndt, dt);

  OPR(  NX );
  OPR(  LX );
  OPR(  dt );
  OPR( ndt );

  /*-----------------+
  |  define solvers  |
  +-----------------*/
  VOF conc  (c,  g, kappa, uvw_1, time, solver);
 
  TIF tsat(Tsat);
  CommonHeatTransfer cht(tpr,conc.topo,tsat,&mixed);
  EnthalpyFD enthFD(tpr, q, uvw, uvw_1, uvw, time, solver, &mixed, cht);
  enthFD.convection_set(TimeScheme::forward_euler());
  enthFD.diffusion_set(TimeScheme::backward_euler());
  enthFD.set_no_solid_acceleration(false);
  enthFD.set_gradt_accuracy_order(AccuracyOrder::First());
  PhaseChange4 pc(mdot, mflx, q, g , f , uvw, cht,
                  time, &mixed);

  //pc.set_accuracy_order(AccuracyOrder::FirstUpwind());
  pc.set_accuracy_order(AccuracyOrder::Second());
  //pc.set_accuracy_order(AccuracyOrder::Fourth());
  pc.set_unconditional_extrapolation(false);
  pc.set_discard_points_near_interface(false);

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  const real betasol = 1.5447277323985733;
  const real gamma = rhov*sqrt(alpv)/rhol/sqrt(alpl);

  auto xgamma = [&](const real t) {
    return 2.*betasol*sqrt(alpv*t);
  };
  auto tgamma = [&](const real x) {
    return pow(x/(2.*betasol),2.)/alpv;
  };
  auto argerfc = [&](const real x, const real t) {
    return x/2./sqrt(alpl*t)+betasol*(rhov-rhol)/rhol*sqrt(alpv/alpl);
  };
  auto tsol = [&](const real x, const real t) {
    return (Tout-Tsat)-(Tout-Tsat)/erfc(betasol*gamma)*
           erfc(argerfc(x,t));
  };
  auto d1tdx = [&](const real x, const real t) {
    real a = 1./(2*sqrt(alpl*t));
    real derfc = -2.*a*exp(-argerfc(x,t)*argerfc(x,t))/sqrt(boil::pi);
    return -(Tout-Tsat)/erfc(betasol*gamma)*derfc;
  };
  auto d2tdx = [&](const real x, const real t) {
    real a = 1./(2*sqrt(alpl*t));
    real derfc = 4*a*a*exp(-argerfc(x,t)*argerfc(x,t))
                 *argerfc(x,t)/sqrt(boil::pi);
    return -(Tout-Tsat)/erfc(betasol*gamma)*derfc;
  };

  auto secdiff = [&](const std::vector<real> & stencil,
                     const std::vector<real> & values) {
    real dxm = stencil[1];
    real dxp = stencil[2];
    real cm = 2./dxm/(dxm+dxp);
    real cp = 2./dxp/(dxm+dxp);
    real cc = -(cm+cp);

    return cc*values[0]+cm*values[1]+cp*values[2];
  };

  real x0 = LX/2.;

  for(int tt(0); tt<=49;++tt) {
    real xpos = x0 + (real(tt)/50.+0.01)*DX;
#include "test.cpp"
  }

  boil::oout << "Finished." << boil::endl;
  boil::timer.stop();
  boil::timer.report();

}	
