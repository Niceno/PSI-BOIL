#include "Include/psi-boil.h"
#include <fstream>
#include "compare_areas.cpp"
#define USE_VOF
//#define STRETCH

#define _GNU_SOURCE 1
#include <fenv.h>
#if 1
static void __attribute__ ((constructor)) trapfpe(void)
{
  /* Enable some exceptions. At startup all exceptions are masked. */
  feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
}
#endif

const int base = 8;
const int level = 2;

/* domain dimensions (given by problem) */
//const real LX =   0.5;
const real LX =   0.2;
const real LY =   0.2;
const real LZ =   0.2;

/* computed parameters */
const int NX = level*base;
const int NY = level*base;
const int NZ = level*base;

/******************************************************************************/
main(int argc, char * argv[]) {

  boil::timer.start();

  /*--------------------------------+
  |  choose the output file format  |
  +--------------------------------*/
  boil::plot = new PlotTEC();

  /*----------+
  |  grid(s)  |
  +----------*/
#ifdef STRETCH

  /* x */
  real DX = LX/real(NX);

  real DXs = DX/2.;
  real DXw = 2.*DX;

  int NXs = NX/4;
  int NXw = NX/4;

  Grid1D gx_s1(Range<real>( -LX/2., -LX/4. ),
              Range<real>( DX, DXs  ),
              NXs, Periodic::no());
  Grid1D gx_s2(Range<real>( -LX/4., 0. ),
              Range<real>( DXs, DX  ),
              NXs, Periodic::no());
  Grid1D gx_w1(Range<real>( 0., LX/4. ),
              Range<real>( DX, DXw  ),
              NXw, Periodic::no());
  Grid1D gx_w2(Range<real>( LX/4., LX/2. ),
              Range<real>( DXw, DX  ),
              NXw, Periodic::no());

  Grid1D gx_s(gx_s1,gx_s2, Periodic::no());
  Grid1D gx_w(gx_w1,gx_w2, Periodic::no());

  Grid1D gx(gx_s,gx_w, Periodic::yes());

  /* y */
  real DY = LY/real(NY);

  real DYs = DY/2.;
  real DYw = 2.*DY;

  int NYs = NY/4;
  int NYw = NY/4;

  Grid1D gy_s1(Range<real>( -LY/2., -LY/4. ),
              Range<real>( DY, DYs  ),
              NYs, Periodic::no());
  Grid1D gy_s2(Range<real>( -LY/4., 0. ),
              Range<real>( DYs, DY  ),
              NYs, Periodic::no());
  Grid1D gy_w1(Range<real>( 0., LY/4. ),
              Range<real>( DY, DYw  ),
              NYw, Periodic::no());
  Grid1D gy_w2(Range<real>( LY/4., LY/2. ),
              Range<real>( DYw, DY  ),
              NYw, Periodic::no());

  Grid1D gy_s(gy_s1,gy_s2, Periodic::no());
  Grid1D gy_w(gy_w1,gy_w2, Periodic::no());

  Grid1D gy(gy_s,gy_w, Periodic::yes());

  /* z */
  real DZ = LZ/real(NZ);

  real DZs = DZ/2.;
  real DZw = 2.*DZ;

  int NZs = NZ/4;
  int NZw = NZ/4;

  Grid1D gz_s1(Range<real>( -LZ/2., -LZ/4. ),
              Range<real>( DZ, DZs  ),
              NZs, Periodic::no());
  Grid1D gz_s2(Range<real>( -LZ/4., 0. ),
              Range<real>( DZs, DZ  ),
              NZs, Periodic::no());
  Grid1D gz_w1(Range<real>( 0., LZ/4. ),
              Range<real>( DZ, DZw  ),
              NZw, Periodic::no());
  Grid1D gz_w2(Range<real>( LZ/4., LZ/2. ),
              Range<real>( DZw, DZ  ),
              NZw, Periodic::no());

  Grid1D gz_s(gz_s1,gz_s2, Periodic::no());
  Grid1D gz_w(gz_w1,gz_w2, Periodic::no());

  Grid1D gz(gz_s,gz_w, Periodic::yes());

#else
  Grid1D gx( Range<real>( -LX/2.,LX/2.), NX, Periodic::yes() );
  Grid1D gy( Range<real>( -LY/2.,LY/2.), NY, Periodic::yes() );
  Grid1D gz( Range<real>( -LZ/2.,LZ/2.), NZ, Periodic::yes() );
#endif

  /*---------+
  |  domain  |
  +---------*/
  Domain d(gx, gy, gz);

  /*-------------------+
  |  time-integration  |
  +-------------------*/
  const int  ndt = NX*100;
  const int nint = ndt/10;
  const real dxmin = d.dxyz_min();
  const real velmag = sqrt(3.);
  const real dt  = 0.01 * dxmin;
  Times time(ndt, dt); 
	
  /*------------------+
  |  define unknowns  |
  +------------------*/
  Vector uvw(d); // vel
  Scalar c  (d), g  (d), kappa(d); // concentration
  Scalar heaviside(d), heaviadens(d);
  Scalar grad0adens(d), gradAadens(d), gradBadens(d);


  /*-----------------------------+ 
  |  insert boundary conditions  |
  +-----------------------------*/
  for_m(m) {
    uvw.bc(m).add( BndCnd( Dir::imin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::imax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::kmax(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmin(), BndType::periodic() ) );
    uvw.bc(m).add( BndCnd( Dir::jmax(), BndType::periodic() ) );
  }

  c.bc().add( BndCnd( Dir::imin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::imax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::kmax(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmin(), BndType::periodic() ) );
  c.bc().add( BndCnd( Dir::jmax(), BndType::periodic() ) );
 
  heaviside = c.shape();
  heaviadens = c.shape();
  grad0adens = c.shape();
  gradAadens = c.shape();
  gradBadens = c.shape();

  /*--------------------+
  |  initial condition  |
  +--------------------*/
  Comp m=Comp::u();
  for_avmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=1.0;

  m=Comp::v();
  for_avmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=1.0;//0.0;

  m=Comp::w();
  for_avmijk(uvw,m,i,j,k)
    uvw[m][i][j][k]=1.0;//0.5;
  uvw.exchange();

  for_vijk(c,i,j,k) 
    c[i][j][k] = 0.0;

  const real valmult = 1.0+1e-2;
  const real radius = valmult*LZ/4.0;
  const real xcent = 0.;
  const real ycent = 0.;
  const real zcent = 0.;
  int Realsum(0);

  for_vijk(c,i,j,k) {
    real wsb_x = c.xc(i) - c.dxc(i)*0.5;
    real wst_x = c.xc(i) - c.dxc(i)*0.5;
    real wnb_x = c.xc(i) - c.dxc(i)*0.5;
    real wnt_x = c.xc(i) - c.dxc(i)*0.5;
    real esb_x = c.xc(i) + c.dxc(i)*0.5;
    real est_x = c.xc(i) + c.dxc(i)*0.5;
    real enb_x = c.xc(i) + c.dxc(i)*0.5;
    real ent_x = c.xc(i) + c.dxc(i)*0.5;

    real wsb_y = c.yc(j) - c.dyc(j)*0.5;
    real wst_y = c.yc(j) - c.dyc(j)*0.5;
    real wnb_y = c.yc(j) + c.dyc(j)*0.5;
    real wnt_y = c.yc(j) + c.dyc(j)*0.5;
    real esb_y = c.yc(j) - c.dyc(j)*0.5;
    real est_y = c.yc(j) - c.dyc(j)*0.5;
    real enb_y = c.yc(j) + c.dyc(j)*0.5;
    real ent_y = c.yc(j) + c.dyc(j)*0.5;

    real wsb_z = c.zc(k) - c.dzc(k)*0.5;
    real wst_z = c.zc(k) + c.dzc(k)*0.5;
    real wnb_z = c.zc(k) - c.dzc(k)*0.5;
    real wnt_z = c.zc(k) + c.dzc(k)*0.5;
    real esb_z = c.zc(k) - c.dzc(k)*0.5;
    real est_z = c.zc(k) + c.dzc(k)*0.5;
    real enb_z = c.zc(k) - c.dzc(k)*0.5;
    real ent_z = c.zc(k) + c.dzc(k)*0.5;
  
    real wsb_dist = sqrt(pow(wsb_x-xcent,2.0)+pow(wsb_y-ycent,2.0)+pow(wsb_z-zcent,2.0));
    real wst_dist = sqrt(pow(wst_x-xcent,2.0)+pow(wst_y-ycent,2.0)+pow(wst_z-zcent,2.0));
    real wnb_dist = sqrt(pow(wnb_x-xcent,2.0)+pow(wnb_y-ycent,2.0)+pow(wnb_z-zcent,2.0));
    real wnt_dist = sqrt(pow(wnt_x-xcent,2.0)+pow(wnt_y-ycent,2.0)+pow(wnt_z-zcent,2.0));
    real esb_dist = sqrt(pow(esb_x-xcent,2.0)+pow(esb_y-ycent,2.0)+pow(esb_z-zcent,2.0));
    real est_dist = sqrt(pow(est_x-xcent,2.0)+pow(est_y-ycent,2.0)+pow(est_z-zcent,2.0));
    real enb_dist = sqrt(pow(enb_x-xcent,2.0)+pow(enb_y-ycent,2.0)+pow(enb_z-zcent,2.0));
    real ent_dist = sqrt(pow(ent_x-xcent,2.0)+pow(ent_y-ycent,2.0)+pow(ent_z-zcent,2.0));
 
    if(wsb_dist<radius&&wst_dist<radius&&wnb_dist<radius&&wnt_dist<radius&&
       esb_dist<radius&&est_dist<radius&&enb_dist<radius&&ent_dist<radius) {
       c[i][j][k] = 1.0;
    } else if(wsb_dist<=radius||wst_dist<=radius||wnb_dist<=radius||wnt_dist<=radius||
              esb_dist<=radius||est_dist<=radius||enb_dist<=radius||ent_dist<=radius) {
       Realsum++;
       int mm=20;
       real x0=d.xn(i);
       real y0=d.yn(j);
       real z0=d.zn(k);
       real ddx=d.dxc(i)/real(mm);
       real ddy=d.dyc(j)/real(mm);
       real ddz=d.dzc(k)/real(mm);
       int itmp=0;
       for (int ii=0; ii<mm; ii++){
         for (int jj=0; jj<mm; jj++){
           for (int kk=0; kk<mm; kk++){
             real xxc=x0+0.5*ddx+real(ii)*ddx;
             real yyc=y0+0.5*ddy+real(jj)*ddy;
             real zzc=z0+0.5*ddz+real(kk)*ddz;
             real dist=sqrt(pow(xxc-xcent,2.0)
                           +pow(yyc-ycent,2.0)+pow(zzc-zcent,2.0));
             if (dist<radius){
               itmp=itmp+1;
             }
           }
         }
       }
       c[i][j][k]=real(itmp)/real(mm*mm*mm);
    }
  }

  /* verification */
  real Realarea = 4.*acos(-1.0)*radius*radius;
  boil::oout<<"Real: "<<Realarea<<" "<<Realsum<<boil::endl;

  c.bnd_update();
  c.exchange_all();

  Heaviside indicator(heaviside, &c);

  /*----------------+
  |  linear solver  |
  +----------------*/
  Krylov * solver = new CG(d, Prec::di());

#ifdef USE_VOF
  VOF conc  (c, g, kappa, uvw, time, solver);
#else
  CIPCSL2 conc  (c, g, kappa, uvw, time, solver);
#endif
  conc.totalvol();
  conc.curvature();

  indicator.calculate();

  FineScalar marker(c,conc.fs,&(conc.nx),&(conc.ny),&(conc.nz),&(conc.nalpha)); 
  marker.evaluate();
 
  compare_areas(c, indicator, heaviadens, grad0adens, gradAadens, gradBadens);
  marker.cal_adens();

#if 0
  real phisum = 0.0;
  real mcvsum = 0.0;
  real truthsum(0.0);
  int truthnum(0);
  for_vijk(c,i,j,k) {
    phisum += c[i][j][k] * c.dV(i,j,k);
    mcvsum += indicator.value(i,j,k) * c.dV(i,j,k);
    truthsum += pow(c[i][j][k]-indicator.value(i,j,k),2.0);
    if(fabs(c[i][j][k]-indicator.value(i,j,k))>boil::pico) truthnum++;
  }
  truthsum = sqrt(truthsum)/real(truthnum);

  boil::oout<<"Truth-measure-MC: "<<phisum<<" "<<mcvsum<<" "<<truthnum<<" "<<truthsum<<boil::endl;
#endif

  boil::plot->plot(uvw,c,marker.adens,heaviadens, "uvw-c-adens-heaviadens", 0);
 
#if 1
  for(time.start(); time.end(); time.increase()) {

#if 0
    boil::oout<<"Velocity update: "<<time.current_time()/time.total_time()<<boil::endl;

    m=Comp::v();
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=time.current_time()/time.total_time();

    m=Comp::w();
    for_avmijk(uvw,m,i,j,k)
      uvw[m][i][j][k]=(0.5-time.current_time()/time.total_time());
    uvw.exchange();
#endif

    boil::oout<<"Real: "<<Realarea<<" "<<Realsum<<boil::endl;

    conc.advance();
    conc.totalvol();
    //conc.curvature();

    marker.evaluate();
    compare_areas(c, indicator, heaviadens, grad0adens, gradAadens, gradBadens);
    marker.cal_adens();

    if(time.current_step() % nint == 0) {
      boil::plot->plot(uvw,c,marker.adens,heaviadens, "uvw-c-adens-heaviadens", time.current_step());
    }

  }
#endif

  boil::oout << "finished" << boil::endl;

  boil::timer.stop();
  boil::timer.report();

}	
/*-----------------------------------------------------------------------------+
 '$Id: main-CIPCSL2-1d.cpp,v 1.3 2018/09/26 10:06:18 sato Exp $'/
+-----------------------------------------------------------------------------*/
